
NonBlocking_LCD_With_KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00002f74  00003008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800066  00800066  0000300e  2**0
                  ALLOC
  3 .stab         00003a08  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ff  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_4>
      14:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_10>
      2c:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <main>
      8a:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER0_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMER0_voidInit(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
		CLR_BIT(Ru8_TCCR0,Ru8_TCCR2) ;
	#elif u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM00_BIT) ;
      9a:	a3 e5       	ldi	r26, 0x53	; 83
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e3 e5       	ldi	r30, 0x53	; 83
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	8f 7b       	andi	r24, 0xBF	; 191
      a6:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
      a8:	a3 e5       	ldi	r26, 0x53	; 83
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e3 e5       	ldi	r30, 0x53	; 83
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	88 60       	ori	r24, 0x08	; 8
      b4:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_FOC0_BIT) ;
      b6:	a3 e5       	ldi	r26, 0x53	; 83
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e3 e5       	ldi	r30, 0x53	; 83
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8f 77       	andi	r24, 0x7F	; 127
      c2:	8c 93       	st	X, r24
	
	
	
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER0_COMP_MATCH_NON_PWM_CONFIG==u8_OC0_DISCONNECTED
			CLR_BIT(Ru8_TCCR0,u8_COM00_BIT) ;
      c4:	a3 e5       	ldi	r26, 0x53	; 83
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	e3 e5       	ldi	r30, 0x53	; 83
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	8f 7d       	andi	r24, 0xDF	; 223
      d0:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_COM01_BIT) ;
      d2:	a3 e5       	ldi	r26, 0x53	; 83
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e3 e5       	ldi	r30, 0x53	; 83
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8f 7e       	andi	r24, 0xEF	; 239
      de:	8c 93       	st	X, r24
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
      e0:	a3 e5       	ldi	r26, 0x53	; 83
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e3 e5       	ldi	r30, 0x53	; 83
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	8b 7f       	andi	r24, 0xFB	; 251
      ec:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
      ee:	a3 e5       	ldi	r26, 0x53	; 83
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	e3 e5       	ldi	r30, 0x53	; 83
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
      fc:	a3 e5       	ldi	r26, 0x53	; 83
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e3 e5       	ldi	r30, 0x53	; 83
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	8e 7f       	andi	r24, 0xFE	; 254
     108:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <TIMER2_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER2_voidInit(void)
{
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER2_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR2,u8_WGM20_BIT) ;
		CLR_BIT(Ru8_TCCR2,u8_WGM21_BIT) ;
		CLR_BIT(Ru8_TCCR2,u8_FOC2_BIT) ;
	#elif u8_TIMER2_MODE_CONFIG==u8_CTC_MODE
		CLR_BIT(Ru8_TCCR2,u8_WGM20_BIT) ;
     118:	a5 e4       	ldi	r26, 0x45	; 69
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e5 e4       	ldi	r30, 0x45	; 69
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	8f 7b       	andi	r24, 0xBF	; 191
     124:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR2,u8_WGM21_BIT) ;
     126:	a5 e4       	ldi	r26, 0x45	; 69
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e5 e4       	ldi	r30, 0x45	; 69
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	88 60       	ori	r24, 0x08	; 8
     132:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR2,u8_FOC2_BIT) ;
     134:	a5 e4       	ldi	r26, 0x45	; 69
     136:	b0 e0       	ldi	r27, 0x00	; 0
     138:	e5 e4       	ldi	r30, 0x45	; 69
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	8f 77       	andi	r24, 0x7F	; 127
     140:	8c 93       	st	X, r24



	#if	u8_TIMER2_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER2_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER2_COMP_MATCH_NON_PWM_CONFIG==u8_OC2_DISCONNECTED
			CLR_BIT(Ru8_TCCR2,u8_COM20_BIT) ;
     142:	a5 e4       	ldi	r26, 0x45	; 69
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e5 e4       	ldi	r30, 0x45	; 69
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8f 7d       	andi	r24, 0xDF	; 223
     14e:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR2,u8_COM21_BIT) ;
     150:	a5 e4       	ldi	r26, 0x45	; 69
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	e5 e4       	ldi	r30, 0x45	; 69
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	8f 7e       	andi	r24, 0xEF	; 239
     15c:	8c 93       	st	X, r24
	#elif u8_TIMER2_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
		CLR_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
		SET_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
	#elif u8_TIMER2_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     15e:	a5 e4       	ldi	r26, 0x45	; 69
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	e5 e4       	ldi	r30, 0x45	; 69
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	8b 7f       	andi	r24, 0xFB	; 251
     16a:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     16c:	a5 e4       	ldi	r26, 0x45	; 69
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	e5 e4       	ldi	r30, 0x45	; 69
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	82 60       	ori	r24, 0x02	; 2
     178:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     17a:	a5 e4       	ldi	r26, 0x45	; 69
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	e5 e4       	ldi	r30, 0x45	; 69
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	8e 7f       	andi	r24, 0xFE	; 254
     186:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     188:	cf 91       	pop	r28
     18a:	df 91       	pop	r29
     18c:	08 95       	ret

0000018e <TIMER0_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal) 
{
     18e:	df 93       	push	r29
     190:	cf 93       	push	r28
     192:	00 d0       	rcall	.+0      	; 0x194 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6>
     194:	00 d0       	rcall	.+0      	; 0x196 <TIMER0_u8StartWithclockAndPrescalerSelect+0x8>
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
     1a2:	28 2f       	mov	r18, r24
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	3c 83       	std	Y+4, r19	; 0x04
     1a8:	2b 83       	std	Y+3, r18	; 0x03
     1aa:	8b 81       	ldd	r24, Y+3	; 0x03
     1ac:	9c 81       	ldd	r25, Y+4	; 0x04
     1ae:	8c 30       	cpi	r24, 0x0C	; 12
     1b0:	91 05       	cpc	r25, r1
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x28>
     1b4:	6b c0       	rjmp	.+214    	; 0x28c <TIMER0_u8StartWithclockAndPrescalerSelect+0xfe>
     1b6:	2b 81       	ldd	r18, Y+3	; 0x03
     1b8:	3c 81       	ldd	r19, Y+4	; 0x04
     1ba:	2d 30       	cpi	r18, 0x0D	; 13
     1bc:	31 05       	cpc	r19, r1
     1be:	8c f4       	brge	.+34     	; 0x1e2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x54>
     1c0:	8b 81       	ldd	r24, Y+3	; 0x03
     1c2:	9c 81       	ldd	r25, Y+4	; 0x04
     1c4:	8a 30       	cpi	r24, 0x0A	; 10
     1c6:	91 05       	cpc	r25, r1
     1c8:	a9 f1       	breq	.+106    	; 0x234 <TIMER0_u8StartWithclockAndPrescalerSelect+0xa6>
     1ca:	2b 81       	ldd	r18, Y+3	; 0x03
     1cc:	3c 81       	ldd	r19, Y+4	; 0x04
     1ce:	2b 30       	cpi	r18, 0x0B	; 11
     1d0:	31 05       	cpc	r19, r1
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x48>
     1d4:	45 c0       	rjmp	.+138    	; 0x260 <TIMER0_u8StartWithclockAndPrescalerSelect+0xd2>
     1d6:	8b 81       	ldd	r24, Y+3	; 0x03
     1d8:	9c 81       	ldd	r25, Y+4	; 0x04
     1da:	89 30       	cpi	r24, 0x09	; 9
     1dc:	91 05       	cpc	r25, r1
     1de:	a1 f0       	breq	.+40     	; 0x208 <TIMER0_u8StartWithclockAndPrescalerSelect+0x7a>
     1e0:	ad c0       	rjmp	.+346    	; 0x33c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
     1e2:	2b 81       	ldd	r18, Y+3	; 0x03
     1e4:	3c 81       	ldd	r19, Y+4	; 0x04
     1e6:	2e 30       	cpi	r18, 0x0E	; 14
     1e8:	31 05       	cpc	r19, r1
     1ea:	09 f4       	brne	.+2      	; 0x1ee <TIMER0_u8StartWithclockAndPrescalerSelect+0x60>
     1ec:	7b c0       	rjmp	.+246    	; 0x2e4 <TIMER0_u8StartWithclockAndPrescalerSelect+0x156>
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	9c 81       	ldd	r25, Y+4	; 0x04
     1f2:	8e 30       	cpi	r24, 0x0E	; 14
     1f4:	91 05       	cpc	r25, r1
     1f6:	0c f4       	brge	.+2      	; 0x1fa <TIMER0_u8StartWithclockAndPrescalerSelect+0x6c>
     1f8:	5f c0       	rjmp	.+190    	; 0x2b8 <TIMER0_u8StartWithclockAndPrescalerSelect+0x12a>
     1fa:	2b 81       	ldd	r18, Y+3	; 0x03
     1fc:	3c 81       	ldd	r19, Y+4	; 0x04
     1fe:	2f 30       	cpi	r18, 0x0F	; 15
     200:	31 05       	cpc	r19, r1
     202:	09 f4       	brne	.+2      	; 0x206 <TIMER0_u8StartWithclockAndPrescalerSelect+0x78>
     204:	85 c0       	rjmp	.+266    	; 0x310 <TIMER0_u8StartWithclockAndPrescalerSelect+0x182>
     206:	9a c0       	rjmp	.+308    	; 0x33c <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     208:	a3 e5       	ldi	r26, 0x53	; 83
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e3 e5       	ldi	r30, 0x53	; 83
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	8b 7f       	andi	r24, 0xFB	; 251
     214:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     216:	a3 e5       	ldi	r26, 0x53	; 83
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e3 e5       	ldi	r30, 0x53	; 83
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8d 7f       	andi	r24, 0xFD	; 253
     222:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     224:	a3 e5       	ldi	r26, 0x53	; 83
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e3 e5       	ldi	r30, 0x53	; 83
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	81 60       	ori	r24, 0x01	; 1
     230:	8c 93       	st	X, r24
     232:	85 c0       	rjmp	.+266    	; 0x33e <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     234:	a3 e5       	ldi	r26, 0x53	; 83
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e3 e5       	ldi	r30, 0x53	; 83
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	8b 7f       	andi	r24, 0xFB	; 251
     240:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     242:	a3 e5       	ldi	r26, 0x53	; 83
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e3 e5       	ldi	r30, 0x53	; 83
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	82 60       	ori	r24, 0x02	; 2
     24e:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     250:	a3 e5       	ldi	r26, 0x53	; 83
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e3 e5       	ldi	r30, 0x53	; 83
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8e 7f       	andi	r24, 0xFE	; 254
     25c:	8c 93       	st	X, r24
     25e:	6f c0       	rjmp	.+222    	; 0x33e <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     260:	a3 e5       	ldi	r26, 0x53	; 83
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e3 e5       	ldi	r30, 0x53	; 83
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	8b 7f       	andi	r24, 0xFB	; 251
     26c:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     26e:	a3 e5       	ldi	r26, 0x53	; 83
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	e3 e5       	ldi	r30, 0x53	; 83
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	82 60       	ori	r24, 0x02	; 2
     27a:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     27c:	a3 e5       	ldi	r26, 0x53	; 83
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	e3 e5       	ldi	r30, 0x53	; 83
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	81 60       	ori	r24, 0x01	; 1
     288:	8c 93       	st	X, r24
     28a:	59 c0       	rjmp	.+178    	; 0x33e <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     28c:	a3 e5       	ldi	r26, 0x53	; 83
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e3 e5       	ldi	r30, 0x53	; 83
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	84 60       	ori	r24, 0x04	; 4
     298:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     29a:	a3 e5       	ldi	r26, 0x53	; 83
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e3 e5       	ldi	r30, 0x53	; 83
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	8d 7f       	andi	r24, 0xFD	; 253
     2a6:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     2a8:	a3 e5       	ldi	r26, 0x53	; 83
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	e3 e5       	ldi	r30, 0x53	; 83
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	8e 7f       	andi	r24, 0xFE	; 254
     2b4:	8c 93       	st	X, r24
     2b6:	43 c0       	rjmp	.+134    	; 0x33e <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     2b8:	a3 e5       	ldi	r26, 0x53	; 83
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e3 e5       	ldi	r30, 0x53	; 83
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	84 60       	ori	r24, 0x04	; 4
     2c4:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     2c6:	a3 e5       	ldi	r26, 0x53	; 83
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	e3 e5       	ldi	r30, 0x53	; 83
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	8d 7f       	andi	r24, 0xFD	; 253
     2d2:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     2d4:	a3 e5       	ldi	r26, 0x53	; 83
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e3 e5       	ldi	r30, 0x53	; 83
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	8c 93       	st	X, r24
     2e2:	2d c0       	rjmp	.+90     	; 0x33e <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING : 
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     2e4:	a3 e5       	ldi	r26, 0x53	; 83
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	e3 e5       	ldi	r30, 0x53	; 83
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	84 60       	ori	r24, 0x04	; 4
     2f0:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     2f2:	a3 e5       	ldi	r26, 0x53	; 83
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	e3 e5       	ldi	r30, 0x53	; 83
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     300:	a3 e5       	ldi	r26, 0x53	; 83
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	e3 e5       	ldi	r30, 0x53	; 83
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	8e 7f       	andi	r24, 0xFE	; 254
     30c:	8c 93       	st	X, r24
     30e:	17 c0       	rjmp	.+46     	; 0x33e <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     310:	a3 e5       	ldi	r26, 0x53	; 83
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	e3 e5       	ldi	r30, 0x53	; 83
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     31e:	a3 e5       	ldi	r26, 0x53	; 83
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e3 e5       	ldi	r30, 0x53	; 83
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	82 60       	ori	r24, 0x02	; 2
     32a:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     32c:	a3 e5       	ldi	r26, 0x53	; 83
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e3 e5       	ldi	r30, 0x53	; 83
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	81 60       	ori	r24, 0x01	; 1
     338:	8c 93       	st	X, r24
     33a:	01 c0       	rjmp	.+2      	; 0x33e <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		
		default : u8_ErrorFlag = u8_NOK ; 
     33c:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ; 
     33e:	89 81       	ldd	r24, Y+1	; 0x01
}
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	cf 91       	pop	r28
     34a:	df 91       	pop	r29
     34c:	08 95       	ret

0000034e <TIMER2_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER2_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal)
{
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	00 d0       	rcall	.+0      	; 0x354 <TIMER2_u8StartWithclockAndPrescalerSelect+0x6>
     354:	00 d0       	rcall	.+0      	; 0x356 <TIMER2_u8StartWithclockAndPrescalerSelect+0x8>
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	3c 83       	std	Y+4, r19	; 0x04
     368:	2b 83       	std	Y+3, r18	; 0x03
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	9c 81       	ldd	r25, Y+4	; 0x04
     36e:	8c 30       	cpi	r24, 0x0C	; 12
     370:	91 05       	cpc	r25, r1
     372:	09 f4       	brne	.+2      	; 0x376 <TIMER2_u8StartWithclockAndPrescalerSelect+0x28>
     374:	6b c0       	rjmp	.+214    	; 0x44c <TIMER2_u8StartWithclockAndPrescalerSelect+0xfe>
     376:	2b 81       	ldd	r18, Y+3	; 0x03
     378:	3c 81       	ldd	r19, Y+4	; 0x04
     37a:	2d 30       	cpi	r18, 0x0D	; 13
     37c:	31 05       	cpc	r19, r1
     37e:	8c f4       	brge	.+34     	; 0x3a2 <TIMER2_u8StartWithclockAndPrescalerSelect+0x54>
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	9c 81       	ldd	r25, Y+4	; 0x04
     384:	8a 30       	cpi	r24, 0x0A	; 10
     386:	91 05       	cpc	r25, r1
     388:	a9 f1       	breq	.+106    	; 0x3f4 <TIMER2_u8StartWithclockAndPrescalerSelect+0xa6>
     38a:	2b 81       	ldd	r18, Y+3	; 0x03
     38c:	3c 81       	ldd	r19, Y+4	; 0x04
     38e:	2b 30       	cpi	r18, 0x0B	; 11
     390:	31 05       	cpc	r19, r1
     392:	0c f0       	brlt	.+2      	; 0x396 <TIMER2_u8StartWithclockAndPrescalerSelect+0x48>
     394:	45 c0       	rjmp	.+138    	; 0x420 <TIMER2_u8StartWithclockAndPrescalerSelect+0xd2>
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	9c 81       	ldd	r25, Y+4	; 0x04
     39a:	89 30       	cpi	r24, 0x09	; 9
     39c:	91 05       	cpc	r25, r1
     39e:	a1 f0       	breq	.+40     	; 0x3c8 <TIMER2_u8StartWithclockAndPrescalerSelect+0x7a>
     3a0:	ad c0       	rjmp	.+346    	; 0x4fc <TIMER2_u8StartWithclockAndPrescalerSelect+0x1ae>
     3a2:	2b 81       	ldd	r18, Y+3	; 0x03
     3a4:	3c 81       	ldd	r19, Y+4	; 0x04
     3a6:	2e 30       	cpi	r18, 0x0E	; 14
     3a8:	31 05       	cpc	r19, r1
     3aa:	09 f4       	brne	.+2      	; 0x3ae <TIMER2_u8StartWithclockAndPrescalerSelect+0x60>
     3ac:	7b c0       	rjmp	.+246    	; 0x4a4 <TIMER2_u8StartWithclockAndPrescalerSelect+0x156>
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	8e 30       	cpi	r24, 0x0E	; 14
     3b4:	91 05       	cpc	r25, r1
     3b6:	0c f4       	brge	.+2      	; 0x3ba <TIMER2_u8StartWithclockAndPrescalerSelect+0x6c>
     3b8:	5f c0       	rjmp	.+190    	; 0x478 <TIMER2_u8StartWithclockAndPrescalerSelect+0x12a>
     3ba:	2b 81       	ldd	r18, Y+3	; 0x03
     3bc:	3c 81       	ldd	r19, Y+4	; 0x04
     3be:	2f 30       	cpi	r18, 0x0F	; 15
     3c0:	31 05       	cpc	r19, r1
     3c2:	09 f4       	brne	.+2      	; 0x3c6 <TIMER2_u8StartWithclockAndPrescalerSelect+0x78>
     3c4:	85 c0       	rjmp	.+266    	; 0x4d0 <TIMER2_u8StartWithclockAndPrescalerSelect+0x182>
     3c6:	9a c0       	rjmp	.+308    	; 0x4fc <TIMER2_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     3c8:	a5 e4       	ldi	r26, 0x45	; 69
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	e5 e4       	ldi	r30, 0x45	; 69
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	8b 7f       	andi	r24, 0xFB	; 251
     3d4:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     3d6:	a5 e4       	ldi	r26, 0x45	; 69
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e5 e4       	ldi	r30, 0x45	; 69
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	8d 7f       	andi	r24, 0xFD	; 253
     3e2:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     3e4:	a5 e4       	ldi	r26, 0x45	; 69
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e5 e4       	ldi	r30, 0x45	; 69
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	8c 93       	st	X, r24
     3f2:	85 c0       	rjmp	.+266    	; 0x4fe <TIMER2_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     3f4:	a5 e4       	ldi	r26, 0x45	; 69
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e5 e4       	ldi	r30, 0x45	; 69
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     402:	a5 e4       	ldi	r26, 0x45	; 69
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e5 e4       	ldi	r30, 0x45	; 69
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	82 60       	ori	r24, 0x02	; 2
     40e:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     410:	a5 e4       	ldi	r26, 0x45	; 69
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e5 e4       	ldi	r30, 0x45	; 69
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	8e 7f       	andi	r24, 0xFE	; 254
     41c:	8c 93       	st	X, r24
     41e:	6f c0       	rjmp	.+222    	; 0x4fe <TIMER2_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     420:	a5 e4       	ldi	r26, 0x45	; 69
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e5 e4       	ldi	r30, 0x45	; 69
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	8b 7f       	andi	r24, 0xFB	; 251
     42c:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     42e:	a5 e4       	ldi	r26, 0x45	; 69
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	e5 e4       	ldi	r30, 0x45	; 69
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     43c:	a5 e4       	ldi	r26, 0x45	; 69
     43e:	b0 e0       	ldi	r27, 0x00	; 0
     440:	e5 e4       	ldi	r30, 0x45	; 69
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	81 60       	ori	r24, 0x01	; 1
     448:	8c 93       	st	X, r24
     44a:	59 c0       	rjmp	.+178    	; 0x4fe <TIMER2_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     44c:	a5 e4       	ldi	r26, 0x45	; 69
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	e5 e4       	ldi	r30, 0x45	; 69
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	84 60       	ori	r24, 0x04	; 4
     458:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     45a:	a5 e4       	ldi	r26, 0x45	; 69
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e5 e4       	ldi	r30, 0x45	; 69
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	8d 7f       	andi	r24, 0xFD	; 253
     466:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     468:	a5 e4       	ldi	r26, 0x45	; 69
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e5 e4       	ldi	r30, 0x45	; 69
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	8e 7f       	andi	r24, 0xFE	; 254
     474:	8c 93       	st	X, r24
     476:	43 c0       	rjmp	.+134    	; 0x4fe <TIMER2_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     478:	a5 e4       	ldi	r26, 0x45	; 69
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	e5 e4       	ldi	r30, 0x45	; 69
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	84 60       	ori	r24, 0x04	; 4
     484:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     486:	a5 e4       	ldi	r26, 0x45	; 69
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	e5 e4       	ldi	r30, 0x45	; 69
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	8d 7f       	andi	r24, 0xFD	; 253
     492:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     494:	a5 e4       	ldi	r26, 0x45	; 69
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	e5 e4       	ldi	r30, 0x45	; 69
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	81 60       	ori	r24, 0x01	; 1
     4a0:	8c 93       	st	X, r24
     4a2:	2d c0       	rjmp	.+90     	; 0x4fe <TIMER2_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING :
			SET_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     4a4:	a5 e4       	ldi	r26, 0x45	; 69
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e5 e4       	ldi	r30, 0x45	; 69
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	84 60       	ori	r24, 0x04	; 4
     4b0:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     4b2:	a5 e4       	ldi	r26, 0x45	; 69
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	e5 e4       	ldi	r30, 0x45	; 69
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	82 60       	ori	r24, 0x02	; 2
     4be:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     4c0:	a5 e4       	ldi	r26, 0x45	; 69
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	e5 e4       	ldi	r30, 0x45	; 69
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	8e 7f       	andi	r24, 0xFE	; 254
     4cc:	8c 93       	st	X, r24
     4ce:	17 c0       	rjmp	.+46     	; 0x4fe <TIMER2_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     4d0:	a5 e4       	ldi	r26, 0x45	; 69
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	e5 e4       	ldi	r30, 0x45	; 69
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     4de:	a5 e4       	ldi	r26, 0x45	; 69
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e4       	ldi	r30, 0x45	; 69
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     4ec:	a5 e4       	ldi	r26, 0x45	; 69
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	e5 e4       	ldi	r30, 0x45	; 69
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	8c 93       	st	X, r24
     4fa:	01 c0       	rjmp	.+2      	; 0x4fe <TIMER2_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;

		default : u8_ErrorFlag = u8_NOK ;
     4fc:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ;
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
}
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	08 95       	ret

0000050e <TIMER0_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIMER0_voidstop(void)
{
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     516:	a3 e5       	ldi	r26, 0x53	; 83
     518:	b0 e0       	ldi	r27, 0x00	; 0
     51a:	e3 e5       	ldi	r30, 0x53	; 83
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	8b 7f       	andi	r24, 0xFB	; 251
     522:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     524:	a3 e5       	ldi	r26, 0x53	; 83
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e3 e5       	ldi	r30, 0x53	; 83
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	8d 7f       	andi	r24, 0xFD	; 253
     530:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     532:	a3 e5       	ldi	r26, 0x53	; 83
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	e3 e5       	ldi	r30, 0x53	; 83
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	8e 7f       	andi	r24, 0xFE	; 254
     53e:	8c 93       	st	X, r24
}
     540:	cf 91       	pop	r28
     542:	df 91       	pop	r29
     544:	08 95       	ret

00000546 <TIMER2_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER2_voidstop(void)
{
     546:	df 93       	push	r29
     548:	cf 93       	push	r28
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR2,u8_CS22_BIT) ;
     54e:	a5 e4       	ldi	r26, 0x45	; 69
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	e5 e4       	ldi	r30, 0x45	; 69
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	8b 7f       	andi	r24, 0xFB	; 251
     55a:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR2,u8_CS21_BIT) ;
     55c:	a5 e4       	ldi	r26, 0x45	; 69
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	e5 e4       	ldi	r30, 0x45	; 69
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	8d 7f       	andi	r24, 0xFD	; 253
     568:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR2,u8_CS20_BIT) ;
     56a:	a5 e4       	ldi	r26, 0x45	; 69
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	e5 e4       	ldi	r30, 0x45	; 69
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	8e 7f       	andi	r24, 0xFE	; 254
     576:	8c 93       	st	X, r24
}
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	08 95       	ret

0000057e <TIMERS_u8ClearIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8ClearIntFlag(uint8_t u8_wantedIntClearFlag)
{
     57e:	df 93       	push	r29
     580:	cf 93       	push	r28
     582:	00 d0       	rcall	.+0      	; 0x584 <TIMERS_u8ClearIntFlag+0x6>
     584:	00 d0       	rcall	.+0      	; 0x586 <TIMERS_u8ClearIntFlag+0x8>
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t u8_ErrorFlag = u8_OK ; 
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	28 2f       	mov	r18, r24
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	3c 83       	std	Y+4, r19	; 0x04
     598:	2b 83       	std	Y+3, r18	; 0x03
     59a:	8b 81       	ldd	r24, Y+3	; 0x03
     59c:	9c 81       	ldd	r25, Y+4	; 0x04
     59e:	89 31       	cpi	r24, 0x19	; 25
     5a0:	91 05       	cpc	r25, r1
     5a2:	f1 f0       	breq	.+60     	; 0x5e0 <TIMERS_u8ClearIntFlag+0x62>
     5a4:	2b 81       	ldd	r18, Y+3	; 0x03
     5a6:	3c 81       	ldd	r19, Y+4	; 0x04
     5a8:	2a 31       	cpi	r18, 0x1A	; 26
     5aa:	31 05       	cpc	r19, r1
     5ac:	34 f4       	brge	.+12     	; 0x5ba <TIMERS_u8ClearIntFlag+0x3c>
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	9c 81       	ldd	r25, Y+4	; 0x04
     5b2:	88 31       	cpi	r24, 0x18	; 24
     5b4:	91 05       	cpc	r25, r1
     5b6:	61 f0       	breq	.+24     	; 0x5d0 <TIMERS_u8ClearIntFlag+0x52>
     5b8:	2b c0       	rjmp	.+86     	; 0x610 <TIMERS_u8ClearIntFlag+0x92>
     5ba:	2b 81       	ldd	r18, Y+3	; 0x03
     5bc:	3c 81       	ldd	r19, Y+4	; 0x04
     5be:	2f 31       	cpi	r18, 0x1F	; 31
     5c0:	31 05       	cpc	r19, r1
     5c2:	b1 f0       	breq	.+44     	; 0x5f0 <TIMERS_u8ClearIntFlag+0x72>
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	80 32       	cpi	r24, 0x20	; 32
     5ca:	91 05       	cpc	r25, r1
     5cc:	c9 f0       	breq	.+50     	; 0x600 <TIMERS_u8ClearIntFlag+0x82>
     5ce:	20 c0       	rjmp	.+64     	; 0x610 <TIMERS_u8ClearIntFlag+0x92>
	{
		case u8_TIMER0_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     5d0:	a8 e5       	ldi	r26, 0x58	; 88
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	e8 e5       	ldi	r30, 0x58	; 88
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	81 60       	ori	r24, 0x01	; 1
     5dc:	8c 93       	st	X, r24
     5de:	19 c0       	rjmp	.+50     	; 0x612 <TIMERS_u8ClearIntFlag+0x94>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     5e0:	a8 e5       	ldi	r26, 0x58	; 88
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e8 e5       	ldi	r30, 0x58	; 88
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	82 60       	ori	r24, 0x02	; 2
     5ec:	8c 93       	st	X, r24
     5ee:	11 c0       	rjmp	.+34     	; 0x612 <TIMERS_u8ClearIntFlag+0x94>
											  break ;
		case u8_TIMER2_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV2_BIT) ;
     5f0:	a8 e5       	ldi	r26, 0x58	; 88
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	e8 e5       	ldi	r30, 0x58	; 88
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	80 64       	ori	r24, 0x40	; 64
     5fc:	8c 93       	st	X, r24
     5fe:	09 c0       	rjmp	.+18     	; 0x612 <TIMERS_u8ClearIntFlag+0x94>
											  break ;
		case u8_TIMER2_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF2_BIT) ;
     600:	a8 e5       	ldi	r26, 0x58	; 88
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e8 e5       	ldi	r30, 0x58	; 88
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	8c 93       	st	X, r24
     60e:	01 c0       	rjmp	.+2      	; 0x612 <TIMERS_u8ClearIntFlag+0x94>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     610:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     612:	89 81       	ldd	r24, Y+1	; 0x01
}
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <TIMERS_u8GetIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8GetIntFlag(uint8_t u8_wantedIntClearFlag,uint8_t* pu8_retturnIntFlag)
{
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	00 d0       	rcall	.+0      	; 0x628 <TIMERS_u8GetIntFlag+0x6>
     628:	00 d0       	rcall	.+0      	; 0x62a <TIMERS_u8GetIntFlag+0x8>
     62a:	00 d0       	rcall	.+0      	; 0x62c <TIMERS_u8GetIntFlag+0xa>
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	8a 83       	std	Y+2, r24	; 0x02
     632:	7c 83       	std	Y+4, r23	; 0x04
     634:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorFlag = u8_OK ; 
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	3e 83       	std	Y+6, r19	; 0x06
     642:	2d 83       	std	Y+5, r18	; 0x05
     644:	8d 81       	ldd	r24, Y+5	; 0x05
     646:	9e 81       	ldd	r25, Y+6	; 0x06
     648:	89 31       	cpi	r24, 0x19	; 25
     64a:	91 05       	cpc	r25, r1
     64c:	f1 f0       	breq	.+60     	; 0x68a <TIMERS_u8GetIntFlag+0x68>
     64e:	2d 81       	ldd	r18, Y+5	; 0x05
     650:	3e 81       	ldd	r19, Y+6	; 0x06
     652:	2a 31       	cpi	r18, 0x1A	; 26
     654:	31 05       	cpc	r19, r1
     656:	34 f4       	brge	.+12     	; 0x664 <TIMERS_u8GetIntFlag+0x42>
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	9e 81       	ldd	r25, Y+6	; 0x06
     65c:	88 31       	cpi	r24, 0x18	; 24
     65e:	91 05       	cpc	r25, r1
     660:	61 f0       	breq	.+24     	; 0x67a <TIMERS_u8GetIntFlag+0x58>
     662:	32 c0       	rjmp	.+100    	; 0x6c8 <TIMERS_u8GetIntFlag+0xa6>
     664:	2d 81       	ldd	r18, Y+5	; 0x05
     666:	3e 81       	ldd	r19, Y+6	; 0x06
     668:	2f 31       	cpi	r18, 0x1F	; 31
     66a:	31 05       	cpc	r19, r1
     66c:	b9 f0       	breq	.+46     	; 0x69c <TIMERS_u8GetIntFlag+0x7a>
     66e:	8d 81       	ldd	r24, Y+5	; 0x05
     670:	9e 81       	ldd	r25, Y+6	; 0x06
     672:	80 32       	cpi	r24, 0x20	; 32
     674:	91 05       	cpc	r25, r1
     676:	f1 f0       	breq	.+60     	; 0x6b4 <TIMERS_u8GetIntFlag+0x92>
     678:	27 c0       	rjmp	.+78     	; 0x6c8 <TIMERS_u8GetIntFlag+0xa6>
	{
		case u8_TIMER0_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     67a:	e8 e5       	ldi	r30, 0x58	; 88
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	81 70       	andi	r24, 0x01	; 1
     682:	eb 81       	ldd	r30, Y+3	; 0x03
     684:	fc 81       	ldd	r31, Y+4	; 0x04
     686:	80 83       	st	Z, r24
     688:	20 c0       	rjmp	.+64     	; 0x6ca <TIMERS_u8GetIntFlag+0xa8>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     68a:	e8 e5       	ldi	r30, 0x58	; 88
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	86 95       	lsr	r24
     692:	81 70       	andi	r24, 0x01	; 1
     694:	eb 81       	ldd	r30, Y+3	; 0x03
     696:	fc 81       	ldd	r31, Y+4	; 0x04
     698:	80 83       	st	Z, r24
     69a:	17 c0       	rjmp	.+46     	; 0x6ca <TIMERS_u8GetIntFlag+0xa8>
											  break ;
		case u8_TIMER2_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV2_BIT) ;
     69c:	e8 e5       	ldi	r30, 0x58	; 88
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	82 95       	swap	r24
     6a4:	86 95       	lsr	r24
     6a6:	86 95       	lsr	r24
     6a8:	83 70       	andi	r24, 0x03	; 3
     6aa:	81 70       	andi	r24, 0x01	; 1
     6ac:	eb 81       	ldd	r30, Y+3	; 0x03
     6ae:	fc 81       	ldd	r31, Y+4	; 0x04
     6b0:	80 83       	st	Z, r24
     6b2:	0b c0       	rjmp	.+22     	; 0x6ca <TIMERS_u8GetIntFlag+0xa8>
											  break ;
		case u8_TIMER2_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF2_BIT) ;
     6b4:	e8 e5       	ldi	r30, 0x58	; 88
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	88 1f       	adc	r24, r24
     6bc:	88 27       	eor	r24, r24
     6be:	88 1f       	adc	r24, r24
     6c0:	eb 81       	ldd	r30, Y+3	; 0x03
     6c2:	fc 81       	ldd	r31, Y+4	; 0x04
     6c4:	80 83       	st	Z, r24
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <TIMERS_u8GetIntFlag+0xa8>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     6c8:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
}
     6cc:	26 96       	adiw	r28, 0x06	; 6
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	08 95       	ret

000006de <TIMERS_u8IntModesEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesEn(uint8_t u8_wantedIntModeEn)
{
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <TIMERS_u8IntModesEn+0x6>
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <TIMERS_u8IntModesEn+0x8>
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeEn)
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	28 2f       	mov	r18, r24
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	3c 83       	std	Y+4, r19	; 0x04
     6f8:	2b 83       	std	Y+3, r18	; 0x03
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	9c 81       	ldd	r25, Y+4	; 0x04
     6fe:	89 31       	cpi	r24, 0x19	; 25
     700:	91 05       	cpc	r25, r1
     702:	29 f1       	breq	.+74     	; 0x74e <TIMERS_u8IntModesEn+0x70>
     704:	2b 81       	ldd	r18, Y+3	; 0x03
     706:	3c 81       	ldd	r19, Y+4	; 0x04
     708:	2a 31       	cpi	r18, 0x1A	; 26
     70a:	31 05       	cpc	r19, r1
     70c:	34 f4       	brge	.+12     	; 0x71a <TIMERS_u8IntModesEn+0x3c>
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	9c 81       	ldd	r25, Y+4	; 0x04
     712:	88 31       	cpi	r24, 0x18	; 24
     714:	91 05       	cpc	r25, r1
     716:	61 f0       	breq	.+24     	; 0x730 <TIMERS_u8IntModesEn+0x52>
     718:	47 c0       	rjmp	.+142    	; 0x7a8 <TIMERS_u8IntModesEn+0xca>
     71a:	2b 81       	ldd	r18, Y+3	; 0x03
     71c:	3c 81       	ldd	r19, Y+4	; 0x04
     71e:	2f 31       	cpi	r18, 0x1F	; 31
     720:	31 05       	cpc	r19, r1
     722:	21 f1       	breq	.+72     	; 0x76c <TIMERS_u8IntModesEn+0x8e>
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	9c 81       	ldd	r25, Y+4	; 0x04
     728:	80 32       	cpi	r24, 0x20	; 32
     72a:	91 05       	cpc	r25, r1
     72c:	71 f1       	breq	.+92     	; 0x78a <TIMERS_u8IntModesEn+0xac>
     72e:	3c c0       	rjmp	.+120    	; 0x7a8 <TIMERS_u8IntModesEn+0xca>
	{
		case u8_TIMER0_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     730:	a8 e5       	ldi	r26, 0x58	; 88
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	e8 e5       	ldi	r30, 0x58	; 88
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	81 60       	ori	r24, 0x01	; 1
     73c:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     73e:	a9 e5       	ldi	r26, 0x59	; 89
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	e9 e5       	ldi	r30, 0x59	; 89
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	81 60       	ori	r24, 0x01	; 1
     74a:	8c 93       	st	X, r24
     74c:	2e c0       	rjmp	.+92     	; 0x7aa <TIMERS_u8IntModesEn+0xcc>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     74e:	a8 e5       	ldi	r26, 0x58	; 88
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	e8 e5       	ldi	r30, 0x58	; 88
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     75c:	a9 e5       	ldi	r26, 0x59	; 89
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	e9 e5       	ldi	r30, 0x59	; 89
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	82 60       	ori	r24, 0x02	; 2
     768:	8c 93       	st	X, r24
     76a:	1f c0       	rjmp	.+62     	; 0x7aa <TIMERS_u8IntModesEn+0xcc>
											   break ;
		case u8_TIMER2_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV2_BIT) ;
     76c:	a8 e5       	ldi	r26, 0x58	; 88
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	e8 e5       	ldi	r30, 0x58	; 88
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	80 64       	ori	r24, 0x40	; 64
     778:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE2_BIT);
     77a:	a9 e5       	ldi	r26, 0x59	; 89
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e9 e5       	ldi	r30, 0x59	; 89
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	80 64       	ori	r24, 0x40	; 64
     786:	8c 93       	st	X, r24
     788:	10 c0       	rjmp	.+32     	; 0x7aa <TIMERS_u8IntModesEn+0xcc>
											   break ;
		case u8_TIMER2_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF2_BIT) ;
     78a:	a8 e5       	ldi	r26, 0x58	; 88
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e8 e5       	ldi	r30, 0x58	; 88
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	80 68       	ori	r24, 0x80	; 128
     796:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE2_BIT);
     798:	a9 e5       	ldi	r26, 0x59	; 89
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	e9 e5       	ldi	r30, 0x59	; 89
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	80 68       	ori	r24, 0x80	; 128
     7a4:	8c 93       	st	X, r24
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <TIMERS_u8IntModesEn+0xcc>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     7a8:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	cf 91       	pop	r28
     7b6:	df 91       	pop	r29
     7b8:	08 95       	ret

000007ba <TIMERS_u8IntModesDis>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesDis(uint8_t u8_wantedIntModeDis)
{
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <TIMERS_u8IntModesDis+0x6>
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <TIMERS_u8IntModesDis+0x8>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeDis)
     7cc:	8a 81       	ldd	r24, Y+2	; 0x02
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	3c 83       	std	Y+4, r19	; 0x04
     7d4:	2b 83       	std	Y+3, r18	; 0x03
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	89 31       	cpi	r24, 0x19	; 25
     7dc:	91 05       	cpc	r25, r1
     7de:	f1 f0       	breq	.+60     	; 0x81c <TIMERS_u8IntModesDis+0x62>
     7e0:	2b 81       	ldd	r18, Y+3	; 0x03
     7e2:	3c 81       	ldd	r19, Y+4	; 0x04
     7e4:	2a 31       	cpi	r18, 0x1A	; 26
     7e6:	31 05       	cpc	r19, r1
     7e8:	34 f4       	brge	.+12     	; 0x7f6 <TIMERS_u8IntModesDis+0x3c>
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	9c 81       	ldd	r25, Y+4	; 0x04
     7ee:	88 31       	cpi	r24, 0x18	; 24
     7f0:	91 05       	cpc	r25, r1
     7f2:	61 f0       	breq	.+24     	; 0x80c <TIMERS_u8IntModesDis+0x52>
     7f4:	2b c0       	rjmp	.+86     	; 0x84c <TIMERS_u8IntModesDis+0x92>
     7f6:	2b 81       	ldd	r18, Y+3	; 0x03
     7f8:	3c 81       	ldd	r19, Y+4	; 0x04
     7fa:	2f 31       	cpi	r18, 0x1F	; 31
     7fc:	31 05       	cpc	r19, r1
     7fe:	b1 f0       	breq	.+44     	; 0x82c <TIMERS_u8IntModesDis+0x72>
     800:	8b 81       	ldd	r24, Y+3	; 0x03
     802:	9c 81       	ldd	r25, Y+4	; 0x04
     804:	80 32       	cpi	r24, 0x20	; 32
     806:	91 05       	cpc	r25, r1
     808:	c9 f0       	breq	.+50     	; 0x83c <TIMERS_u8IntModesDis+0x82>
     80a:	20 c0       	rjmp	.+64     	; 0x84c <TIMERS_u8IntModesDis+0x92>
	{
		case u8_TIMER0_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     80c:	a9 e5       	ldi	r26, 0x59	; 89
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	e9 e5       	ldi	r30, 0x59	; 89
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	8e 7f       	andi	r24, 0xFE	; 254
     818:	8c 93       	st	X, r24
     81a:	19 c0       	rjmp	.+50     	; 0x84e <TIMERS_u8IntModesDis+0x94>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     81c:	a9 e5       	ldi	r26, 0x59	; 89
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	e9 e5       	ldi	r30, 0x59	; 89
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	8d 7f       	andi	r24, 0xFD	; 253
     828:	8c 93       	st	X, r24
     82a:	11 c0       	rjmp	.+34     	; 0x84e <TIMERS_u8IntModesDis+0x94>
											   break ;
		case u8_TIMER2_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE2_BIT);
     82c:	a9 e5       	ldi	r26, 0x59	; 89
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	e9 e5       	ldi	r30, 0x59	; 89
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	8f 7b       	andi	r24, 0xBF	; 191
     838:	8c 93       	st	X, r24
     83a:	09 c0       	rjmp	.+18     	; 0x84e <TIMERS_u8IntModesDis+0x94>
											   break ;
		case u8_TIMER2_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE2_BIT);
     83c:	a9 e5       	ldi	r26, 0x59	; 89
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	e9 e5       	ldi	r30, 0x59	; 89
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	8f 77       	andi	r24, 0x7F	; 127
     848:	8c 93       	st	X, r24
     84a:	01 c0       	rjmp	.+2      	; 0x84e <TIMERS_u8IntModesDis+0x94>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     84c:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     84e:	89 81       	ldd	r24, Y+1	; 0x01
}
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	cf 91       	pop	r28
     85a:	df 91       	pop	r29
     85c:	08 95       	ret

0000085e <Timer0_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
     85e:	df 93       	push	r29
     860:	cf 93       	push	r28
     862:	00 d0       	rcall	.+0      	; 0x864 <__stack+0x5>
     864:	0f 92       	push	r0
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer0CounterReg ; 
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer0CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ; 
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	80 95       	com	r24
     874:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT0=u8_SetTimer0CounterReg ;
     876:	e2 e5       	ldi	r30, 0x52	; 82
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     87e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	cf 91       	pop	r28
     888:	df 91       	pop	r29
     88a:	08 95       	ret

0000088c <Timer2_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer2_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
     88c:	df 93       	push	r29
     88e:	cf 93       	push	r28
     890:	00 d0       	rcall	.+0      	; 0x892 <Timer2_u8setOverFlowRegTicksBeforeOV+0x6>
     892:	0f 92       	push	r0
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer2CounterReg ;
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer2CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ;
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	80 95       	com	r24
     8a2:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT2=u8_SetTimer2CounterReg ;
     8a4:	e4 e4       	ldi	r30, 0x44	; 68
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	80 83       	st	Z, r24
	}
	else
	{
		u8_ErrorFlag = u8_NOK ;
	}
	return u8_ErrorFlag ;
     8ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	cf 91       	pop	r28
     8b6:	df 91       	pop	r29
     8b8:	08 95       	ret

000008ba <Timer0_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
     8ba:	df 93       	push	r29
     8bc:	cf 93       	push	r28
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <Timer0_u8setCompareRegTicksBeforeOV+0x6>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR0 = u8_wantedTicksToCompare ;
     8ca:	ec e5       	ldi	r30, 0x5C	; 92
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
     8d0:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
}
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	cf 91       	pop	r28
     8da:	df 91       	pop	r29
     8dc:	08 95       	ret

000008de <Timer2_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer2_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <Timer2_u8setCompareRegTicksBeforeOV+0x6>
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR2 = u8_wantedTicksToCompare ;
     8ee:	e3 e4       	ldi	r30, 0x43	; 67
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	80 83       	st	Z, r24
	}
	else
	{
		u8_ErrorFlag = u8_NOK ;
	}
	return u8_ErrorFlag ;
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	cf 91       	pop	r28
     8fe:	df 91       	pop	r29
     900:	08 95       	ret

00000902 <TIMER0_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t TIMER0_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void))
{
     902:	df 93       	push	r29
     904:	cf 93       	push	r28
     906:	00 d0       	rcall	.+0      	; 0x908 <TIMER0_u8setCallBack+0x6>
     908:	00 d0       	rcall	.+0      	; 0x90a <TIMER0_u8setCallBack+0x8>
     90a:	00 d0       	rcall	.+0      	; 0x90c <TIMER0_u8setCallBack+0xa>
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	8a 83       	std	Y+2, r24	; 0x02
     912:	7c 83       	std	Y+4, r23	; 0x04
     914:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	9c 81       	ldd	r25, Y+4	; 0x04
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	01 f1       	breq	.+64     	; 0x962 <TIMER0_u8setCallBack+0x60>
	{
		switch(u8_wantedISRModeToSet)
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	28 2f       	mov	r18, r24
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	3e 83       	std	Y+6, r19	; 0x06
     92a:	2d 83       	std	Y+5, r18	; 0x05
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	9e 81       	ldd	r25, Y+6	; 0x06
     930:	88 31       	cpi	r24, 0x18	; 24
     932:	91 05       	cpc	r25, r1
     934:	31 f0       	breq	.+12     	; 0x942 <TIMER0_u8setCallBack+0x40>
     936:	2d 81       	ldd	r18, Y+5	; 0x05
     938:	3e 81       	ldd	r19, Y+6	; 0x06
     93a:	29 31       	cpi	r18, 0x19	; 25
     93c:	31 05       	cpc	r19, r1
     93e:	41 f0       	breq	.+16     	; 0x950 <TIMER0_u8setCallBack+0x4e>
     940:	0e c0       	rjmp	.+28     	; 0x95e <TIMER0_u8setCallBack+0x5c>
		{
			case u8_TIMER0_OVER_FLOW			:  Timer0OverFlowSetCallBackISR = ISRFuncToSet ; 
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	90 93 69 00 	sts	0x0069, r25
     94a:	80 93 68 00 	sts	0x0068, r24
     94e:	0a c0       	rjmp	.+20     	; 0x964 <TIMER0_u8setCallBack+0x62>
												   break ; 
			case u8_TIMER0_COMPARE_ON_MATCH		:  Timer0CompareMatchSetCallBackISR = ISRFuncToSet ; 
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	9c 81       	ldd	r25, Y+4	; 0x04
     954:	90 93 67 00 	sts	0x0067, r25
     958:	80 93 66 00 	sts	0x0066, r24
     95c:	03 c0       	rjmp	.+6      	; 0x964 <TIMER0_u8setCallBack+0x62>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ; 
     95e:	19 82       	std	Y+1, r1	; 0x01
     960:	01 c0       	rjmp	.+2      	; 0x964 <TIMER0_u8setCallBack+0x62>
											       break ; 
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
     962:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ; 
     964:	89 81       	ldd	r24, Y+1	; 0x01
}
     966:	26 96       	adiw	r28, 0x06	; 6
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	cf 91       	pop	r28
     974:	df 91       	pop	r29
     976:	08 95       	ret

00000978 <TIMER2_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t TIMER2_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void))
{
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	00 d0       	rcall	.+0      	; 0x97e <TIMER2_u8setCallBack+0x6>
     97e:	00 d0       	rcall	.+0      	; 0x980 <TIMER2_u8setCallBack+0x8>
     980:	00 d0       	rcall	.+0      	; 0x982 <TIMER2_u8setCallBack+0xa>
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	8a 83       	std	Y+2, r24	; 0x02
     988:	7c 83       	std	Y+4, r23	; 0x04
     98a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	01 f1       	breq	.+64     	; 0x9d8 <TIMER2_u8setCallBack+0x60>
	{
		switch(u8_wantedISRModeToSet)
     998:	8a 81       	ldd	r24, Y+2	; 0x02
     99a:	28 2f       	mov	r18, r24
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	3e 83       	std	Y+6, r19	; 0x06
     9a0:	2d 83       	std	Y+5, r18	; 0x05
     9a2:	8d 81       	ldd	r24, Y+5	; 0x05
     9a4:	9e 81       	ldd	r25, Y+6	; 0x06
     9a6:	8f 31       	cpi	r24, 0x1F	; 31
     9a8:	91 05       	cpc	r25, r1
     9aa:	31 f0       	breq	.+12     	; 0x9b8 <TIMER2_u8setCallBack+0x40>
     9ac:	2d 81       	ldd	r18, Y+5	; 0x05
     9ae:	3e 81       	ldd	r19, Y+6	; 0x06
     9b0:	20 32       	cpi	r18, 0x20	; 32
     9b2:	31 05       	cpc	r19, r1
     9b4:	41 f0       	breq	.+16     	; 0x9c6 <TIMER2_u8setCallBack+0x4e>
     9b6:	0e c0       	rjmp	.+28     	; 0x9d4 <TIMER2_u8setCallBack+0x5c>
		{
			case u8_TIMER2_OVER_FLOW			:  Timer2OverFlowSetCallBackISR = ISRFuncToSet ;
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	9c 81       	ldd	r25, Y+4	; 0x04
     9bc:	90 93 6d 00 	sts	0x006D, r25
     9c0:	80 93 6c 00 	sts	0x006C, r24
     9c4:	0a c0       	rjmp	.+20     	; 0x9da <TIMER2_u8setCallBack+0x62>
												   break ;
			case u8_TIMER2_COMPARE_ON_MATCH		:  Timer2CompareMatchSetCallBackISR = ISRFuncToSet ;
     9c6:	8b 81       	ldd	r24, Y+3	; 0x03
     9c8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ca:	90 93 6b 00 	sts	0x006B, r25
     9ce:	80 93 6a 00 	sts	0x006A, r24
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <TIMER2_u8setCallBack+0x62>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ;
     9d4:	19 82       	std	Y+1, r1	; 0x01
     9d6:	01 c0       	rjmp	.+2      	; 0x9da <TIMER2_u8setCallBack+0x62>
											       break ;
		}
	}
	else
	{
		u8_ErrorFlag = u8_NOK ;
     9d8:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ;
     9da:	89 81       	ldd	r24, Y+1	; 0x01
}
     9dc:	26 96       	adiw	r28, 0x06	; 6
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <__vector_10>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_10 (void)      __attribute__((signal));
void __vector_10 (void)
{
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	4f 93       	push	r20
     9fe:	5f 93       	push	r21
     a00:	6f 93       	push	r22
     a02:	7f 93       	push	r23
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	af 93       	push	r26
     a0a:	bf 93       	push	r27
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
     a10:	df 93       	push	r29
     a12:	cf 93       	push	r28
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
	if(Timer0CompareMatchSetCallBackISR!=NULL_POINTER)
     a18:	80 91 66 00 	lds	r24, 0x0066
     a1c:	90 91 67 00 	lds	r25, 0x0067
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	29 f0       	breq	.+10     	; 0xa2e <__vector_10+0x40>
	{
		Timer0CompareMatchSetCallBackISR();
     a24:	e0 91 66 00 	lds	r30, 0x0066
     a28:	f0 91 67 00 	lds	r31, 0x0067
     a2c:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	bf 91       	pop	r27
     a38:	af 91       	pop	r26
     a3a:	9f 91       	pop	r25
     a3c:	8f 91       	pop	r24
     a3e:	7f 91       	pop	r23
     a40:	6f 91       	pop	r22
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <__vector_11>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_11 (void)      __attribute__((signal));
void __vector_11 (void)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0OverFlowSetCallBackISR!=NULL_POINTER)
     a7e:	80 91 68 00 	lds	r24, 0x0068
     a82:	90 91 69 00 	lds	r25, 0x0069
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	29 f0       	breq	.+10     	; 0xa94 <__vector_11+0x40>
	{
		Timer0OverFlowSetCallBackISR() ;
     a8a:	e0 91 68 00 	lds	r30, 0x0068
     a8e:	f0 91 69 00 	lds	r31, 0x0069
     a92:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	ff 91       	pop	r31
     a9a:	ef 91       	pop	r30
     a9c:	bf 91       	pop	r27
     a9e:	af 91       	pop	r26
     aa0:	9f 91       	pop	r25
     aa2:	8f 91       	pop	r24
     aa4:	7f 91       	pop	r23
     aa6:	6f 91       	pop	r22
     aa8:	5f 91       	pop	r21
     aaa:	4f 91       	pop	r20
     aac:	3f 91       	pop	r19
     aae:	2f 91       	pop	r18
     ab0:	0f 90       	pop	r0
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	0f 90       	pop	r0
     ab6:	1f 90       	pop	r1
     ab8:	18 95       	reti

00000aba <__vector_4>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_4 (void)      __attribute__((signal));
void __vector_4 (void)
{
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	df 93       	push	r29
     ade:	cf 93       	push	r28
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
	if(Timer2CompareMatchSetCallBackISR!=NULL_POINTER)
     ae4:	80 91 6a 00 	lds	r24, 0x006A
     ae8:	90 91 6b 00 	lds	r25, 0x006B
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	29 f0       	breq	.+10     	; 0xafa <__vector_4+0x40>
	{
		Timer2CompareMatchSetCallBackISR();
     af0:	e0 91 6a 00 	lds	r30, 0x006A
     af4:	f0 91 6b 00 	lds	r31, 0x006B
     af8:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	18 95       	reti

00000b20 <__vector_5>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_5 (void)      __attribute__((signal));
void __vector_5 (void)
{
     b20:	1f 92       	push	r1
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
	if(Timer2OverFlowSetCallBackISR!=NULL_POINTER)
     b4a:	80 91 6c 00 	lds	r24, 0x006C
     b4e:	90 91 6d 00 	lds	r25, 0x006D
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	29 f0       	breq	.+10     	; 0xb60 <__vector_5+0x40>
	{
		Timer2OverFlowSetCallBackISR() ;
     b56:	e0 91 6c 00 	lds	r30, 0x006C
     b5a:	f0 91 6d 00 	lds	r31, 0x006D
     b5e:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	ff 91       	pop	r31
     b66:	ef 91       	pop	r30
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	7f 91       	pop	r23
     b72:	6f 91       	pop	r22
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <TIMER0_u8BusyWaitMS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitMS(uint32_t u32_BusyTimeInMilliSec)
{
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	c9 54       	subi	r28, 0x49	; 73
     b94:	d0 40       	sbci	r29, 0x00	; 0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	6b 87       	std	Y+11, r22	; 0x0b
     ba2:	7c 87       	std	Y+12, r23	; 0x0c
     ba4:	8d 87       	std	Y+13, r24	; 0x0d
     ba6:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     ba8:	8a e1       	ldi	r24, 0x1A	; 26
     baa:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_timer0FlagIfUsed== u8_TIMER0_FLAG_NOT_USED)
     bac:	80 91 61 00 	lds	r24, 0x0061
     bb0:	8a 31       	cpi	r24, 0x1A	; 26
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <TIMER0_u8BusyWaitMS+0x30>
     bb4:	c4 c1       	rjmp	.+904    	; 0xf3e <TIMER0_u8BusyWaitMS+0x3b8>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
     bb6:	1a 82       	std	Y+2, r1	; 0x02
     bb8:	1b 82       	std	Y+3, r1	; 0x03
     bba:	1c 82       	std	Y+4, r1	; 0x04
     bbc:	1d 82       	std	Y+5, r1	; 0x05
     bbe:	1e 82       	std	Y+6, r1	; 0x06
     bc0:	1f 82       	std	Y+7, r1	; 0x07
     bc2:	18 86       	std	Y+8, r1	; 0x08
     bc4:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
     bc6:	88 e1       	ldi	r24, 0x18	; 24
     bc8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     bcc:	89 e1       	ldi	r24, 0x19	; 25
     bce:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     bd2:	8a e0       	ldi	r24, 0x0A	; 10
     bd4:	0e 94 c7 00 	call	0x18e	; 0x18e <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     bd8:	89 e1       	ldi	r24, 0x19	; 25
     bda:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     bde:	8a ef       	ldi	r24, 0xFA	; 250
     be0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	0e 94 2f 04 	call	0x85e	; 0x85e <Timer0_u8setOverFlowRegTicksBeforeOV>
     bea:	3a c1       	rjmp	.+628    	; 0xe60 <TIMER0_u8BusyWaitMS+0x2da>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(uint8_t*)(&u8_CheckCompareFlag)) ;
     bec:	9e 01       	movw	r18, r28
     bee:	26 5f       	subi	r18, 0xF6	; 246
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	89 e1       	ldi	r24, 0x19	; 25
     bf4:	b9 01       	movw	r22, r18
     bf6:	0e 94 11 03 	call	0x622	; 0x622 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
     bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <TIMER0_u8BusyWaitMS+0x7c>
     c00:	2f c1       	rjmp	.+606    	; 0xe60 <TIMER0_u8BusyWaitMS+0x2da>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     c02:	89 e1       	ldi	r24, 0x19	; 25
     c04:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
     c08:	0a 81       	ldd	r16, Y+2	; 0x02
     c0a:	0f 8f       	std	Y+31, r16	; 0x1f
     c0c:	1b 81       	ldd	r17, Y+3	; 0x03
     c0e:	18 a3       	std	Y+32, r17	; 0x20
     c10:	2c 81       	ldd	r18, Y+4	; 0x04
     c12:	29 a3       	std	Y+33, r18	; 0x21
     c14:	3d 81       	ldd	r19, Y+5	; 0x05
     c16:	3a a3       	std	Y+34, r19	; 0x22
     c18:	4e 81       	ldd	r20, Y+6	; 0x06
     c1a:	4b a3       	std	Y+35, r20	; 0x23
     c1c:	5f 81       	ldd	r21, Y+7	; 0x07
     c1e:	5c a3       	std	Y+36, r21	; 0x24
     c20:	68 85       	ldd	r22, Y+8	; 0x08
     c22:	6d a3       	std	Y+37, r22	; 0x25
     c24:	79 85       	ldd	r23, Y+9	; 0x09
     c26:	7e a3       	std	Y+38, r23	; 0x26
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	8f a3       	std	Y+39, r24	; 0x27
     c2c:	18 a6       	std	Y+40, r1	; 0x28
     c2e:	19 a6       	std	Y+41, r1	; 0x29
     c30:	1a a6       	std	Y+42, r1	; 0x2a
     c32:	1b a6       	std	Y+43, r1	; 0x2b
     c34:	1c a6       	std	Y+44, r1	; 0x2c
     c36:	1d a6       	std	Y+45, r1	; 0x2d
     c38:	1e a6       	std	Y+46, r1	; 0x2e
     c3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c3c:	0f a1       	ldd	r16, Y+39	; 0x27
     c3e:	90 0f       	add	r25, r16
     c40:	9f a7       	std	Y+47, r25	; 0x2f
     c42:	11 e0       	ldi	r17, 0x01	; 1
     c44:	1f ab       	std	Y+55, r17	; 0x37
     c46:	2f a5       	ldd	r18, Y+47	; 0x2f
     c48:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c4a:	23 17       	cp	r18, r19
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <TIMER0_u8BusyWaitMS+0xca>
     c4e:	1f aa       	std	Y+55, r1	; 0x37
     c50:	48 a1       	ldd	r20, Y+32	; 0x20
     c52:	58 a5       	ldd	r21, Y+40	; 0x28
     c54:	45 0f       	add	r20, r21
     c56:	48 ab       	std	Y+48, r20	; 0x30
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	68 af       	std	Y+56, r22	; 0x38
     c5c:	78 a9       	ldd	r23, Y+48	; 0x30
     c5e:	88 a1       	ldd	r24, Y+32	; 0x20
     c60:	78 17       	cp	r23, r24
     c62:	08 f0       	brcs	.+2      	; 0xc66 <TIMER0_u8BusyWaitMS+0xe0>
     c64:	18 ae       	std	Y+56, r1	; 0x38
     c66:	9f a9       	ldd	r25, Y+55	; 0x37
     c68:	08 a9       	ldd	r16, Y+48	; 0x30
     c6a:	90 0f       	add	r25, r16
     c6c:	99 af       	std	Y+57, r25	; 0x39
     c6e:	11 e0       	ldi	r17, 0x01	; 1
     c70:	1a af       	std	Y+58, r17	; 0x3a
     c72:	29 ad       	ldd	r18, Y+57	; 0x39
     c74:	38 a9       	ldd	r19, Y+48	; 0x30
     c76:	23 17       	cp	r18, r19
     c78:	08 f0       	brcs	.+2      	; 0xc7c <TIMER0_u8BusyWaitMS+0xf6>
     c7a:	1a ae       	std	Y+58, r1	; 0x3a
     c7c:	48 ad       	ldd	r20, Y+56	; 0x38
     c7e:	5a ad       	ldd	r21, Y+58	; 0x3a
     c80:	45 2b       	or	r20, r21
     c82:	48 af       	std	Y+56, r20	; 0x38
     c84:	69 ad       	ldd	r22, Y+57	; 0x39
     c86:	68 ab       	std	Y+48, r22	; 0x30
     c88:	79 a1       	ldd	r23, Y+33	; 0x21
     c8a:	89 a5       	ldd	r24, Y+41	; 0x29
     c8c:	78 0f       	add	r23, r24
     c8e:	79 ab       	std	Y+49, r23	; 0x31
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	9b af       	std	Y+59, r25	; 0x3b
     c94:	09 a9       	ldd	r16, Y+49	; 0x31
     c96:	19 a1       	ldd	r17, Y+33	; 0x21
     c98:	01 17       	cp	r16, r17
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <TIMER0_u8BusyWaitMS+0x118>
     c9c:	1b ae       	std	Y+59, r1	; 0x3b
     c9e:	28 ad       	ldd	r18, Y+56	; 0x38
     ca0:	39 a9       	ldd	r19, Y+49	; 0x31
     ca2:	23 0f       	add	r18, r19
     ca4:	2c af       	std	Y+60, r18	; 0x3c
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	4d af       	std	Y+61, r20	; 0x3d
     caa:	5c ad       	ldd	r21, Y+60	; 0x3c
     cac:	69 a9       	ldd	r22, Y+49	; 0x31
     cae:	56 17       	cp	r21, r22
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <TIMER0_u8BusyWaitMS+0x12e>
     cb2:	1d ae       	std	Y+61, r1	; 0x3d
     cb4:	7b ad       	ldd	r23, Y+59	; 0x3b
     cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
     cb8:	78 2b       	or	r23, r24
     cba:	7b af       	std	Y+59, r23	; 0x3b
     cbc:	9c ad       	ldd	r25, Y+60	; 0x3c
     cbe:	99 ab       	std	Y+49, r25	; 0x31
     cc0:	0a a1       	ldd	r16, Y+34	; 0x22
     cc2:	1a a5       	ldd	r17, Y+42	; 0x2a
     cc4:	01 0f       	add	r16, r17
     cc6:	0a ab       	std	Y+50, r16	; 0x32
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	2e af       	std	Y+62, r18	; 0x3e
     ccc:	3a a9       	ldd	r19, Y+50	; 0x32
     cce:	4a a1       	ldd	r20, Y+34	; 0x22
     cd0:	34 17       	cp	r19, r20
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <TIMER0_u8BusyWaitMS+0x150>
     cd4:	1e ae       	std	Y+62, r1	; 0x3e
     cd6:	5b ad       	ldd	r21, Y+59	; 0x3b
     cd8:	6a a9       	ldd	r22, Y+50	; 0x32
     cda:	56 0f       	add	r21, r22
     cdc:	5f af       	std	Y+63, r21	; 0x3f
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	21 96       	adiw	r28, 0x01	; 1
     ce2:	7f af       	std	Y+63, r23	; 0x3f
     ce4:	21 97       	sbiw	r28, 0x01	; 1
     ce6:	8f ad       	ldd	r24, Y+63	; 0x3f
     ce8:	9a a9       	ldd	r25, Y+50	; 0x32
     cea:	89 17       	cp	r24, r25
     cec:	18 f0       	brcs	.+6      	; 0xcf4 <TIMER0_u8BusyWaitMS+0x16e>
     cee:	21 96       	adiw	r28, 0x01	; 1
     cf0:	1f ae       	std	Y+63, r1	; 0x3f
     cf2:	21 97       	sbiw	r28, 0x01	; 1
     cf4:	0e ad       	ldd	r16, Y+62	; 0x3e
     cf6:	21 96       	adiw	r28, 0x01	; 1
     cf8:	1f ad       	ldd	r17, Y+63	; 0x3f
     cfa:	21 97       	sbiw	r28, 0x01	; 1
     cfc:	01 2b       	or	r16, r17
     cfe:	0e af       	std	Y+62, r16	; 0x3e
     d00:	2f ad       	ldd	r18, Y+63	; 0x3f
     d02:	2a ab       	std	Y+50, r18	; 0x32
     d04:	3b a1       	ldd	r19, Y+35	; 0x23
     d06:	4b a5       	ldd	r20, Y+43	; 0x2b
     d08:	34 0f       	add	r19, r20
     d0a:	3b ab       	std	Y+51, r19	; 0x33
     d0c:	51 e0       	ldi	r21, 0x01	; 1
     d0e:	22 96       	adiw	r28, 0x02	; 2
     d10:	5f af       	std	Y+63, r21	; 0x3f
     d12:	22 97       	sbiw	r28, 0x02	; 2
     d14:	6b a9       	ldd	r22, Y+51	; 0x33
     d16:	7b a1       	ldd	r23, Y+35	; 0x23
     d18:	67 17       	cp	r22, r23
     d1a:	18 f0       	brcs	.+6      	; 0xd22 <TIMER0_u8BusyWaitMS+0x19c>
     d1c:	22 96       	adiw	r28, 0x02	; 2
     d1e:	1f ae       	std	Y+63, r1	; 0x3f
     d20:	22 97       	sbiw	r28, 0x02	; 2
     d22:	8e ad       	ldd	r24, Y+62	; 0x3e
     d24:	9b a9       	ldd	r25, Y+51	; 0x33
     d26:	89 0f       	add	r24, r25
     d28:	23 96       	adiw	r28, 0x03	; 3
     d2a:	8f af       	std	Y+63, r24	; 0x3f
     d2c:	23 97       	sbiw	r28, 0x03	; 3
     d2e:	01 e0       	ldi	r16, 0x01	; 1
     d30:	24 96       	adiw	r28, 0x04	; 4
     d32:	0f af       	std	Y+63, r16	; 0x3f
     d34:	24 97       	sbiw	r28, 0x04	; 4
     d36:	23 96       	adiw	r28, 0x03	; 3
     d38:	1f ad       	ldd	r17, Y+63	; 0x3f
     d3a:	23 97       	sbiw	r28, 0x03	; 3
     d3c:	2b a9       	ldd	r18, Y+51	; 0x33
     d3e:	12 17       	cp	r17, r18
     d40:	18 f0       	brcs	.+6      	; 0xd48 <TIMER0_u8BusyWaitMS+0x1c2>
     d42:	24 96       	adiw	r28, 0x04	; 4
     d44:	1f ae       	std	Y+63, r1	; 0x3f
     d46:	24 97       	sbiw	r28, 0x04	; 4
     d48:	22 96       	adiw	r28, 0x02	; 2
     d4a:	3f ad       	ldd	r19, Y+63	; 0x3f
     d4c:	22 97       	sbiw	r28, 0x02	; 2
     d4e:	24 96       	adiw	r28, 0x04	; 4
     d50:	4f ad       	ldd	r20, Y+63	; 0x3f
     d52:	24 97       	sbiw	r28, 0x04	; 4
     d54:	34 2b       	or	r19, r20
     d56:	22 96       	adiw	r28, 0x02	; 2
     d58:	3f af       	std	Y+63, r19	; 0x3f
     d5a:	22 97       	sbiw	r28, 0x02	; 2
     d5c:	23 96       	adiw	r28, 0x03	; 3
     d5e:	5f ad       	ldd	r21, Y+63	; 0x3f
     d60:	23 97       	sbiw	r28, 0x03	; 3
     d62:	5b ab       	std	Y+51, r21	; 0x33
     d64:	6c a1       	ldd	r22, Y+36	; 0x24
     d66:	7c a5       	ldd	r23, Y+44	; 0x2c
     d68:	67 0f       	add	r22, r23
     d6a:	6c ab       	std	Y+52, r22	; 0x34
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	25 96       	adiw	r28, 0x05	; 5
     d70:	8f af       	std	Y+63, r24	; 0x3f
     d72:	25 97       	sbiw	r28, 0x05	; 5
     d74:	9c a9       	ldd	r25, Y+52	; 0x34
     d76:	0c a1       	ldd	r16, Y+36	; 0x24
     d78:	90 17       	cp	r25, r16
     d7a:	18 f0       	brcs	.+6      	; 0xd82 <TIMER0_u8BusyWaitMS+0x1fc>
     d7c:	25 96       	adiw	r28, 0x05	; 5
     d7e:	1f ae       	std	Y+63, r1	; 0x3f
     d80:	25 97       	sbiw	r28, 0x05	; 5
     d82:	22 96       	adiw	r28, 0x02	; 2
     d84:	1f ad       	ldd	r17, Y+63	; 0x3f
     d86:	22 97       	sbiw	r28, 0x02	; 2
     d88:	2c a9       	ldd	r18, Y+52	; 0x34
     d8a:	12 0f       	add	r17, r18
     d8c:	26 96       	adiw	r28, 0x06	; 6
     d8e:	1f af       	std	Y+63, r17	; 0x3f
     d90:	26 97       	sbiw	r28, 0x06	; 6
     d92:	31 e0       	ldi	r19, 0x01	; 1
     d94:	27 96       	adiw	r28, 0x07	; 7
     d96:	3f af       	std	Y+63, r19	; 0x3f
     d98:	27 97       	sbiw	r28, 0x07	; 7
     d9a:	26 96       	adiw	r28, 0x06	; 6
     d9c:	4f ad       	ldd	r20, Y+63	; 0x3f
     d9e:	26 97       	sbiw	r28, 0x06	; 6
     da0:	5c a9       	ldd	r21, Y+52	; 0x34
     da2:	45 17       	cp	r20, r21
     da4:	18 f0       	brcs	.+6      	; 0xdac <TIMER0_u8BusyWaitMS+0x226>
     da6:	27 96       	adiw	r28, 0x07	; 7
     da8:	1f ae       	std	Y+63, r1	; 0x3f
     daa:	27 97       	sbiw	r28, 0x07	; 7
     dac:	25 96       	adiw	r28, 0x05	; 5
     dae:	6f ad       	ldd	r22, Y+63	; 0x3f
     db0:	25 97       	sbiw	r28, 0x05	; 5
     db2:	27 96       	adiw	r28, 0x07	; 7
     db4:	7f ad       	ldd	r23, Y+63	; 0x3f
     db6:	27 97       	sbiw	r28, 0x07	; 7
     db8:	67 2b       	or	r22, r23
     dba:	25 96       	adiw	r28, 0x05	; 5
     dbc:	6f af       	std	Y+63, r22	; 0x3f
     dbe:	25 97       	sbiw	r28, 0x05	; 5
     dc0:	26 96       	adiw	r28, 0x06	; 6
     dc2:	8f ad       	ldd	r24, Y+63	; 0x3f
     dc4:	26 97       	sbiw	r28, 0x06	; 6
     dc6:	8c ab       	std	Y+52, r24	; 0x34
     dc8:	9d a1       	ldd	r25, Y+37	; 0x25
     dca:	0d a5       	ldd	r16, Y+45	; 0x2d
     dcc:	90 0f       	add	r25, r16
     dce:	9d ab       	std	Y+53, r25	; 0x35
     dd0:	11 e0       	ldi	r17, 0x01	; 1
     dd2:	28 96       	adiw	r28, 0x08	; 8
     dd4:	1f af       	std	Y+63, r17	; 0x3f
     dd6:	28 97       	sbiw	r28, 0x08	; 8
     dd8:	2d a9       	ldd	r18, Y+53	; 0x35
     dda:	3d a1       	ldd	r19, Y+37	; 0x25
     ddc:	23 17       	cp	r18, r19
     dde:	18 f0       	brcs	.+6      	; 0xde6 <TIMER0_u8BusyWaitMS+0x260>
     de0:	28 96       	adiw	r28, 0x08	; 8
     de2:	1f ae       	std	Y+63, r1	; 0x3f
     de4:	28 97       	sbiw	r28, 0x08	; 8
     de6:	25 96       	adiw	r28, 0x05	; 5
     de8:	4f ad       	ldd	r20, Y+63	; 0x3f
     dea:	25 97       	sbiw	r28, 0x05	; 5
     dec:	5d a9       	ldd	r21, Y+53	; 0x35
     dee:	45 0f       	add	r20, r21
     df0:	29 96       	adiw	r28, 0x09	; 9
     df2:	4f af       	std	Y+63, r20	; 0x3f
     df4:	29 97       	sbiw	r28, 0x09	; 9
     df6:	61 e0       	ldi	r22, 0x01	; 1
     df8:	2a 96       	adiw	r28, 0x0a	; 10
     dfa:	6f af       	std	Y+63, r22	; 0x3f
     dfc:	2a 97       	sbiw	r28, 0x0a	; 10
     dfe:	29 96       	adiw	r28, 0x09	; 9
     e00:	7f ad       	ldd	r23, Y+63	; 0x3f
     e02:	29 97       	sbiw	r28, 0x09	; 9
     e04:	8d a9       	ldd	r24, Y+53	; 0x35
     e06:	78 17       	cp	r23, r24
     e08:	18 f0       	brcs	.+6      	; 0xe10 <TIMER0_u8BusyWaitMS+0x28a>
     e0a:	2a 96       	adiw	r28, 0x0a	; 10
     e0c:	1f ae       	std	Y+63, r1	; 0x3f
     e0e:	2a 97       	sbiw	r28, 0x0a	; 10
     e10:	28 96       	adiw	r28, 0x08	; 8
     e12:	9f ad       	ldd	r25, Y+63	; 0x3f
     e14:	28 97       	sbiw	r28, 0x08	; 8
     e16:	2a 96       	adiw	r28, 0x0a	; 10
     e18:	0f ad       	ldd	r16, Y+63	; 0x3f
     e1a:	2a 97       	sbiw	r28, 0x0a	; 10
     e1c:	90 2b       	or	r25, r16
     e1e:	28 96       	adiw	r28, 0x08	; 8
     e20:	9f af       	std	Y+63, r25	; 0x3f
     e22:	28 97       	sbiw	r28, 0x08	; 8
     e24:	29 96       	adiw	r28, 0x09	; 9
     e26:	1f ad       	ldd	r17, Y+63	; 0x3f
     e28:	29 97       	sbiw	r28, 0x09	; 9
     e2a:	1d ab       	std	Y+53, r17	; 0x35
     e2c:	2e a1       	ldd	r18, Y+38	; 0x26
     e2e:	3e a5       	ldd	r19, Y+46	; 0x2e
     e30:	23 0f       	add	r18, r19
     e32:	2e ab       	std	Y+54, r18	; 0x36
     e34:	28 96       	adiw	r28, 0x08	; 8
     e36:	8f ad       	ldd	r24, Y+63	; 0x3f
     e38:	28 97       	sbiw	r28, 0x08	; 8
     e3a:	4e a9       	ldd	r20, Y+54	; 0x36
     e3c:	84 0f       	add	r24, r20
     e3e:	8e ab       	std	Y+54, r24	; 0x36
     e40:	2f a5       	ldd	r18, Y+47	; 0x2f
     e42:	38 a9       	ldd	r19, Y+48	; 0x30
     e44:	49 a9       	ldd	r20, Y+49	; 0x31
     e46:	5a a9       	ldd	r21, Y+50	; 0x32
     e48:	6b a9       	ldd	r22, Y+51	; 0x33
     e4a:	7c a9       	ldd	r23, Y+52	; 0x34
     e4c:	8d a9       	ldd	r24, Y+53	; 0x35
     e4e:	9e a9       	ldd	r25, Y+54	; 0x36
     e50:	2a 83       	std	Y+2, r18	; 0x02
     e52:	3b 83       	std	Y+3, r19	; 0x03
     e54:	4c 83       	std	Y+4, r20	; 0x04
     e56:	5d 83       	std	Y+5, r21	; 0x05
     e58:	6e 83       	std	Y+6, r22	; 0x06
     e5a:	7f 83       	std	Y+7, r23	; 0x07
     e5c:	88 87       	std	Y+8, r24	; 0x08
     e5e:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
     e60:	8b 85       	ldd	r24, Y+11	; 0x0b
     e62:	9c 85       	ldd	r25, Y+12	; 0x0c
     e64:	ad 85       	ldd	r26, Y+13	; 0x0d
     e66:	be 85       	ldd	r27, Y+14	; 0x0e
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	aa 1f       	adc	r26, r26
     e6e:	bb 1f       	adc	r27, r27
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	aa 1f       	adc	r26, r26
     e76:	bb 1f       	adc	r27, r27
     e78:	8c 01       	movw	r16, r24
     e7a:	9d 01       	movw	r18, r26
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0f 8b       	std	Y+23, r16	; 0x17
     e86:	18 8f       	std	Y+24, r17	; 0x18
     e88:	29 8f       	std	Y+25, r18	; 0x19
     e8a:	3a 8f       	std	Y+26, r19	; 0x1a
     e8c:	4b 8f       	std	Y+27, r20	; 0x1b
     e8e:	5c 8f       	std	Y+28, r21	; 0x1c
     e90:	6d 8f       	std	Y+29, r22	; 0x1d
     e92:	7e 8f       	std	Y+30, r23	; 0x1e
     e94:	1a 81       	ldd	r17, Y+2	; 0x02
     e96:	1f 87       	std	Y+15, r17	; 0x0f
     e98:	2b 81       	ldd	r18, Y+3	; 0x03
     e9a:	28 8b       	std	Y+16, r18	; 0x10
     e9c:	3c 81       	ldd	r19, Y+4	; 0x04
     e9e:	39 8b       	std	Y+17, r19	; 0x11
     ea0:	4d 81       	ldd	r20, Y+5	; 0x05
     ea2:	4a 8b       	std	Y+18, r20	; 0x12
     ea4:	5e 81       	ldd	r21, Y+6	; 0x06
     ea6:	5b 8b       	std	Y+19, r21	; 0x13
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	6c 8b       	std	Y+20, r22	; 0x14
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	7d 8b       	std	Y+21, r23	; 0x15
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	8e 8b       	std	Y+22, r24	; 0x16
     eb4:	9e 89       	ldd	r25, Y+22	; 0x16
     eb6:	0e 8d       	ldd	r16, Y+30	; 0x1e
     eb8:	09 17       	cp	r16, r25
     eba:	08 f4       	brcc	.+2      	; 0xebe <TIMER0_u8BusyWaitMS+0x338>
     ebc:	42 c0       	rjmp	.+132    	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     ebe:	1e 89       	ldd	r17, Y+22	; 0x16
     ec0:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ec2:	12 17       	cp	r17, r18
     ec4:	09 f0       	breq	.+2      	; 0xec8 <TIMER0_u8BusyWaitMS+0x342>
     ec6:	92 ce       	rjmp	.-732    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
     ec8:	3d 89       	ldd	r19, Y+21	; 0x15
     eca:	4d 8d       	ldd	r20, Y+29	; 0x1d
     ecc:	43 17       	cp	r20, r19
     ece:	c8 f1       	brcs	.+114    	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     ed0:	5d 89       	ldd	r21, Y+21	; 0x15
     ed2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ed4:	56 17       	cp	r21, r22
     ed6:	09 f0       	breq	.+2      	; 0xeda <TIMER0_u8BusyWaitMS+0x354>
     ed8:	89 ce       	rjmp	.-750    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
     eda:	7c 89       	ldd	r23, Y+20	; 0x14
     edc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ede:	87 17       	cp	r24, r23
     ee0:	80 f1       	brcs	.+96     	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     ee2:	9c 89       	ldd	r25, Y+20	; 0x14
     ee4:	0c 8d       	ldd	r16, Y+28	; 0x1c
     ee6:	90 17       	cp	r25, r16
     ee8:	09 f0       	breq	.+2      	; 0xeec <TIMER0_u8BusyWaitMS+0x366>
     eea:	80 ce       	rjmp	.-768    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
     eec:	1b 89       	ldd	r17, Y+19	; 0x13
     eee:	2b 8d       	ldd	r18, Y+27	; 0x1b
     ef0:	21 17       	cp	r18, r17
     ef2:	38 f1       	brcs	.+78     	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     ef4:	3b 89       	ldd	r19, Y+19	; 0x13
     ef6:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ef8:	34 17       	cp	r19, r20
     efa:	09 f0       	breq	.+2      	; 0xefe <TIMER0_u8BusyWaitMS+0x378>
     efc:	77 ce       	rjmp	.-786    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
     efe:	5a 89       	ldd	r21, Y+18	; 0x12
     f00:	6a 8d       	ldd	r22, Y+26	; 0x1a
     f02:	65 17       	cp	r22, r21
     f04:	f0 f0       	brcs	.+60     	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     f06:	7a 89       	ldd	r23, Y+18	; 0x12
     f08:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f0a:	78 17       	cp	r23, r24
     f0c:	09 f0       	breq	.+2      	; 0xf10 <TIMER0_u8BusyWaitMS+0x38a>
     f0e:	6e ce       	rjmp	.-804    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
     f10:	99 89       	ldd	r25, Y+17	; 0x11
     f12:	09 8d       	ldd	r16, Y+25	; 0x19
     f14:	09 17       	cp	r16, r25
     f16:	a8 f0       	brcs	.+42     	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     f18:	19 89       	ldd	r17, Y+17	; 0x11
     f1a:	29 8d       	ldd	r18, Y+25	; 0x19
     f1c:	12 17       	cp	r17, r18
     f1e:	09 f0       	breq	.+2      	; 0xf22 <TIMER0_u8BusyWaitMS+0x39c>
     f20:	65 ce       	rjmp	.-822    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
     f22:	38 89       	ldd	r19, Y+16	; 0x10
     f24:	48 8d       	ldd	r20, Y+24	; 0x18
     f26:	43 17       	cp	r20, r19
     f28:	60 f0       	brcs	.+24     	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     f2a:	58 89       	ldd	r21, Y+16	; 0x10
     f2c:	68 8d       	ldd	r22, Y+24	; 0x18
     f2e:	56 17       	cp	r21, r22
     f30:	09 f0       	breq	.+2      	; 0xf34 <TIMER0_u8BusyWaitMS+0x3ae>
     f32:	5c ce       	rjmp	.-840    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
     f34:	7f 85       	ldd	r23, Y+15	; 0x0f
     f36:	8f 89       	ldd	r24, Y+23	; 0x17
     f38:	87 17       	cp	r24, r23
     f3a:	18 f0       	brcs	.+6      	; 0xf42 <TIMER0_u8BusyWaitMS+0x3bc>
     f3c:	57 ce       	rjmp	.-850    	; 0xbec <TIMER0_u8BusyWaitMS+0x66>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     f3e:	8b e1       	ldi	r24, 0x1B	; 27
     f40:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     f44:	c7 5b       	subi	r28, 0xB7	; 183
     f46:	df 4f       	sbci	r29, 0xFF	; 255
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <TIMER0_u8BusyWaitUS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitUS(uint32_t u32_BusyTimeInMicroSec)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	2a 97       	sbiw	r28, 0x0a	; 10
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	6f 83       	std	Y+7, r22	; 0x07
     f72:	78 87       	std	Y+8, r23	; 0x08
     f74:	89 87       	std	Y+9, r24	; 0x09
     f76:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     f78:	8a e1       	ldi	r24, 0x1A	; 26
     f7a:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_timer0FlagIfUsed== u8_TIMER0_FLAG_NOT_USED)
     f7c:	80 91 61 00 	lds	r24, 0x0061
     f80:	8a 31       	cpi	r24, 0x1A	; 26
     f82:	e9 f5       	brne	.+122    	; 0xffe <TIMER0_u8BusyWaitUS+0xa2>
	{
		volatile uint32_t u32_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
     f84:	1a 82       	std	Y+2, r1	; 0x02
     f86:	1b 82       	std	Y+3, r1	; 0x03
     f88:	1c 82       	std	Y+4, r1	; 0x04
     f8a:	1d 82       	std	Y+5, r1	; 0x05
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
     f8c:	88 e1       	ldi	r24, 0x18	; 24
     f8e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     f92:	89 e1       	ldi	r24, 0x19	; 25
     f94:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     f98:	8a e0       	ldi	r24, 0x0A	; 10
     f9a:	0e 94 c7 00 	call	0x18e	; 0x18e <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     f9e:	89 e1       	ldi	r24, 0x19	; 25
     fa0:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     fa4:	8a ef       	ldi	r24, 0xFA	; 250
     fa6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	0e 94 2f 04 	call	0x85e	; 0x85e <Timer0_u8setOverFlowRegTicksBeforeOV>
     fb0:	18 c0       	rjmp	.+48     	; 0xfe2 <TIMER0_u8BusyWaitUS+0x86>
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(uint8_t*)(&u8_CheckCompareFlag)) ;
     fb2:	9e 01       	movw	r18, r28
     fb4:	2a 5f       	subi	r18, 0xFA	; 250
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	89 e1       	ldi	r24, 0x19	; 25
     fba:	b9 01       	movw	r22, r18
     fbc:	0e 94 11 03 	call	0x622	; 0x622 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
     fc0:	8e 81       	ldd	r24, Y+6	; 0x06
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	71 f4       	brne	.+28     	; 0xfe2 <TIMER0_u8BusyWaitUS+0x86>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     fc6:	89 e1       	ldi	r24, 0x19	; 25
     fc8:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
				u32_BusyWaitcounter++ ;
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	9b 81       	ldd	r25, Y+3	; 0x03
     fd0:	ac 81       	ldd	r26, Y+4	; 0x04
     fd2:	bd 81       	ldd	r27, Y+5	; 0x05
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	a1 1d       	adc	r26, r1
     fd8:	b1 1d       	adc	r27, r1
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	9b 83       	std	Y+3, r25	; 0x03
     fde:	ac 83       	std	Y+4, r26	; 0x04
     fe0:	bd 83       	std	Y+5, r27	; 0x05
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
     fe2:	2a 81       	ldd	r18, Y+2	; 0x02
     fe4:	3b 81       	ldd	r19, Y+3	; 0x03
     fe6:	4c 81       	ldd	r20, Y+4	; 0x04
     fe8:	5d 81       	ldd	r21, Y+5	; 0x05
     fea:	8f 81       	ldd	r24, Y+7	; 0x07
     fec:	98 85       	ldd	r25, Y+8	; 0x08
     fee:	a9 85       	ldd	r26, Y+9	; 0x09
     ff0:	ba 85       	ldd	r27, Y+10	; 0x0a
     ff2:	82 17       	cp	r24, r18
     ff4:	93 07       	cpc	r25, r19
     ff6:	a4 07       	cpc	r26, r20
     ff8:	b5 07       	cpc	r27, r21
     ffa:	d8 f6       	brcc	.-74     	; 0xfb2 <TIMER0_u8BusyWaitUS+0x56>
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <TIMER0_u8BusyWaitUS+0xa6>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
     ffe:	8b e1       	ldi	r24, 0x1B	; 27
    1000:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1004:	2a 96       	adiw	r28, 0x0a	; 10
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <TIMER0_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <TIMER0_u8InterruptWait+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <TIMER0_u8InterruptWait+0x8>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	6a 83       	std	Y+2, r22	; 0x02
    1026:	7b 83       	std	Y+3, r23	; 0x03
    1028:	8c 83       	std	Y+4, r24	; 0x04
    102a:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    102c:	8a e1       	ldi	r24, 0x1A	; 26
    102e:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_timer0FlagIfUsed==u8_TIMER0_FLAG_NOT_USED &&gu8_timer0FinishIntWaitFlag != u8_BEGIN_INTERRUPT_WAITING )
    1030:	80 91 61 00 	lds	r24, 0x0061
    1034:	8a 31       	cpi	r24, 0x1A	; 26
    1036:	09 f0       	breq	.+2      	; 0x103a <TIMER0_u8InterruptWait+0x24>
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <TIMER0_u8InterruptWait+0xa2>
    103a:	80 91 60 00 	lds	r24, 0x0060
    103e:	8e 31       	cpi	r24, 0x1E	; 30
    1040:	d9 f1       	breq	.+118    	; 0x10b8 <TIMER0_u8InterruptWait+0xa2>
	{
		gu64_timer0IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	ac 81       	ldd	r26, Y+4	; 0x04
    1048:	bd 81       	ldd	r27, Y+5	; 0x05
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	aa 1f       	adc	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	aa 1f       	adc	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	9c 01       	movw	r18, r24
    105c:	ad 01       	movw	r20, r26
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	20 93 6e 00 	sts	0x006E, r18
    106a:	30 93 6f 00 	sts	0x006F, r19
    106e:	40 93 70 00 	sts	0x0070, r20
    1072:	50 93 71 00 	sts	0x0071, r21
    1076:	60 93 72 00 	sts	0x0072, r22
    107a:	70 93 73 00 	sts	0x0073, r23
    107e:	80 93 74 00 	sts	0x0074, r24
    1082:	90 93 75 00 	sts	0x0075, r25
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    1086:	8a ef       	ldi	r24, 0xFA	; 250
    1088:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	0e 94 2f 04 	call	0x85e	; 0x85e <Timer0_u8setOverFlowRegTicksBeforeOV>
		gu8_timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    1092:	8b e1       	ldi	r24, 0x1B	; 27
    1094:	80 93 61 00 	sts	0x0061, r24
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH);
    1098:	89 e1       	ldi	r24, 0x19	; 25
    109a:	0e 94 6f 03 	call	0x6de	; 0x6de <TIMERS_u8IntModesEn>
		TIMER0_u8setCallBack(u8_TIMER0_COMPARE_ON_MATCH,TIMER0_voidIntWaitControlFlagCount) ;
    109e:	20 e7       	ldi	r18, 0x70	; 112
    10a0:	38 e0       	ldi	r19, 0x08	; 8
    10a2:	89 e1       	ldi	r24, 0x19	; 25
    10a4:	b9 01       	movw	r22, r18
    10a6:	0e 94 81 04 	call	0x902	; 0x902 <TIMER0_u8setCallBack>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    10aa:	8a e0       	ldi	r24, 0x0A	; 10
    10ac:	0e 94 c7 00 	call	0x18e	; 0x18e <TIMER0_u8StartWithclockAndPrescalerSelect>
		gu8_timer0FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    10b0:	8e e1       	ldi	r24, 0x1E	; 30
    10b2:	80 93 60 00 	sts	0x0060, r24
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <TIMER0_u8InterruptWait+0xa6>

	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    10b8:	8b e1       	ldi	r24, 0x1B	; 27
    10ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <TIMER0_u8GetIntWaitStatus>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t TIMER0_u8GetIntWaitStatus(void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	return gu8_timer0FinishIntWaitFlag  ;
    10d6:	80 91 60 00 	lds	r24, 0x0060
}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TIMER0_voidIntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

static void TIMER0_voidIntWaitControlFlagCount(void)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	ab 97       	sbiw	r28, 0x2b	; 43
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61

	if(gu8_timer0FlagIfUsed==u8_TIMER0_FLAG_USED&&gu64_timer0IntWaitcounter > u8_INTIAL_COUNTER_VAL)
    10f4:	80 91 61 00 	lds	r24, 0x0061
    10f8:	8b 31       	cpi	r24, 0x1B	; 27
    10fa:	09 f0       	breq	.+2      	; 0x10fe <TIMER0_voidIntWaitControlFlagCount+0x1e>
    10fc:	17 c1       	rjmp	.+558    	; 0x132c <TIMER0_voidIntWaitControlFlagCount+0x24c>
    10fe:	20 91 6e 00 	lds	r18, 0x006E
    1102:	30 91 6f 00 	lds	r19, 0x006F
    1106:	40 91 70 00 	lds	r20, 0x0070
    110a:	50 91 71 00 	lds	r21, 0x0071
    110e:	60 91 72 00 	lds	r22, 0x0072
    1112:	70 91 73 00 	lds	r23, 0x0073
    1116:	80 91 74 00 	lds	r24, 0x0074
    111a:	90 91 75 00 	lds	r25, 0x0075
    111e:	e2 2f       	mov	r30, r18
    1120:	e3 2b       	or	r30, r19
    1122:	e4 2b       	or	r30, r20
    1124:	e5 2b       	or	r30, r21
    1126:	e6 2b       	or	r30, r22
    1128:	e7 2b       	or	r30, r23
    112a:	e8 2b       	or	r30, r24
    112c:	e9 2b       	or	r30, r25
    112e:	ee 23       	and	r30, r30
    1130:	09 f4       	brne	.+2      	; 0x1134 <TIMER0_voidIntWaitControlFlagCount+0x54>
    1132:	fc c0       	rjmp	.+504    	; 0x132c <TIMER0_voidIntWaitControlFlagCount+0x24c>
	{
		gu64_timer0IntWaitcounter-- ;
    1134:	80 91 6e 00 	lds	r24, 0x006E
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	90 91 6f 00 	lds	r25, 0x006F
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	80 91 70 00 	lds	r24, 0x0070
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	90 91 71 00 	lds	r25, 0x0071
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	80 91 72 00 	lds	r24, 0x0072
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	90 91 73 00 	lds	r25, 0x0073
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	80 91 74 00 	lds	r24, 0x0074
    115c:	8f 83       	std	Y+7, r24	; 0x07
    115e:	90 91 75 00 	lds	r25, 0x0075
    1162:	98 87       	std	Y+8, r25	; 0x08
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	89 87       	std	Y+9, r24	; 0x09
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	9a 87       	std	Y+10, r25	; 0x0a
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	8b 87       	std	Y+11, r24	; 0x0b
    1170:	9f ef       	ldi	r25, 0xFF	; 255
    1172:	9c 87       	std	Y+12, r25	; 0x0c
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	8d 87       	std	Y+13, r24	; 0x0d
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	9e 87       	std	Y+14, r25	; 0x0e
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	8f 87       	std	Y+15, r24	; 0x0f
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	98 8b       	std	Y+16, r25	; 0x10
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	99 85       	ldd	r25, Y+9	; 0x09
    1188:	89 0f       	add	r24, r25
    118a:	89 8b       	std	Y+17, r24	; 0x11
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 8f       	std	Y+25, r24	; 0x19
    1190:	99 89       	ldd	r25, Y+17	; 0x11
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	98 17       	cp	r25, r24
    1196:	08 f0       	brcs	.+2      	; 0x119a <TIMER0_voidIntWaitControlFlagCount+0xba>
    1198:	19 8e       	std	Y+25, r1	; 0x19
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	8a 85       	ldd	r24, Y+10	; 0x0a
    119e:	98 0f       	add	r25, r24
    11a0:	9a 8b       	std	Y+18, r25	; 0x12
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	9a 8f       	std	Y+26, r25	; 0x1a
    11a6:	8a 89       	ldd	r24, Y+18	; 0x12
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	89 17       	cp	r24, r25
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <TIMER0_voidIntWaitControlFlagCount+0xd0>
    11ae:	1a 8e       	std	Y+26, r1	; 0x1a
    11b0:	89 8d       	ldd	r24, Y+25	; 0x19
    11b2:	9a 89       	ldd	r25, Y+18	; 0x12
    11b4:	89 0f       	add	r24, r25
    11b6:	8b 8f       	std	Y+27, r24	; 0x1b
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	8c 8f       	std	Y+28, r24	; 0x1c
    11bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11be:	8a 89       	ldd	r24, Y+18	; 0x12
    11c0:	98 17       	cp	r25, r24
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <TIMER0_voidIntWaitControlFlagCount+0xe6>
    11c4:	1c 8e       	std	Y+28, r1	; 0x1c
    11c6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11ca:	98 2b       	or	r25, r24
    11cc:	9a 8f       	std	Y+26, r25	; 0x1a
    11ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11d0:	9a 8b       	std	Y+18, r25	; 0x12
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d6:	89 0f       	add	r24, r25
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	8d 8f       	std	Y+29, r24	; 0x1d
    11de:	9b 89       	ldd	r25, Y+19	; 0x13
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	98 17       	cp	r25, r24
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <TIMER0_voidIntWaitControlFlagCount+0x108>
    11e6:	1d 8e       	std	Y+29, r1	; 0x1d
    11e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11ea:	8b 89       	ldd	r24, Y+19	; 0x13
    11ec:	98 0f       	add	r25, r24
    11ee:	9e 8f       	std	Y+30, r25	; 0x1e
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	9f 8f       	std	Y+31, r25	; 0x1f
    11f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11f6:	9b 89       	ldd	r25, Y+19	; 0x13
    11f8:	89 17       	cp	r24, r25
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <TIMER0_voidIntWaitControlFlagCount+0x11e>
    11fc:	1f 8e       	std	Y+31, r1	; 0x1f
    11fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1200:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1202:	89 2b       	or	r24, r25
    1204:	8d 8f       	std	Y+29, r24	; 0x1d
    1206:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1208:	8b 8b       	std	Y+19, r24	; 0x13
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	8c 85       	ldd	r24, Y+12	; 0x0c
    120e:	98 0f       	add	r25, r24
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	98 a3       	std	Y+32, r25	; 0x20
    1216:	8c 89       	ldd	r24, Y+20	; 0x14
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	89 17       	cp	r24, r25
    121c:	08 f0       	brcs	.+2      	; 0x1220 <TIMER0_voidIntWaitControlFlagCount+0x140>
    121e:	18 a2       	std	Y+32, r1	; 0x20
    1220:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	89 0f       	add	r24, r25
    1226:	89 a3       	std	Y+33, r24	; 0x21
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	8a a3       	std	Y+34, r24	; 0x22
    122c:	99 a1       	ldd	r25, Y+33	; 0x21
    122e:	8c 89       	ldd	r24, Y+20	; 0x14
    1230:	98 17       	cp	r25, r24
    1232:	08 f0       	brcs	.+2      	; 0x1236 <TIMER0_voidIntWaitControlFlagCount+0x156>
    1234:	1a a2       	std	Y+34, r1	; 0x22
    1236:	98 a1       	ldd	r25, Y+32	; 0x20
    1238:	8a a1       	ldd	r24, Y+34	; 0x22
    123a:	98 2b       	or	r25, r24
    123c:	98 a3       	std	Y+32, r25	; 0x20
    123e:	99 a1       	ldd	r25, Y+33	; 0x21
    1240:	9c 8b       	std	Y+20, r25	; 0x14
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9d 85       	ldd	r25, Y+13	; 0x0d
    1246:	89 0f       	add	r24, r25
    1248:	8d 8b       	std	Y+21, r24	; 0x15
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	8b a3       	std	Y+35, r24	; 0x23
    124e:	9d 89       	ldd	r25, Y+21	; 0x15
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	98 17       	cp	r25, r24
    1254:	08 f0       	brcs	.+2      	; 0x1258 <TIMER0_voidIntWaitControlFlagCount+0x178>
    1256:	1b a2       	std	Y+35, r1	; 0x23
    1258:	98 a1       	ldd	r25, Y+32	; 0x20
    125a:	8d 89       	ldd	r24, Y+21	; 0x15
    125c:	98 0f       	add	r25, r24
    125e:	9c a3       	std	Y+36, r25	; 0x24
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	9d a3       	std	Y+37, r25	; 0x25
    1264:	8c a1       	ldd	r24, Y+36	; 0x24
    1266:	9d 89       	ldd	r25, Y+21	; 0x15
    1268:	89 17       	cp	r24, r25
    126a:	08 f0       	brcs	.+2      	; 0x126e <TIMER0_voidIntWaitControlFlagCount+0x18e>
    126c:	1d a2       	std	Y+37, r1	; 0x25
    126e:	8b a1       	ldd	r24, Y+35	; 0x23
    1270:	9d a1       	ldd	r25, Y+37	; 0x25
    1272:	89 2b       	or	r24, r25
    1274:	8b a3       	std	Y+35, r24	; 0x23
    1276:	8c a1       	ldd	r24, Y+36	; 0x24
    1278:	8d 8b       	std	Y+21, r24	; 0x15
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	8e 85       	ldd	r24, Y+14	; 0x0e
    127e:	98 0f       	add	r25, r24
    1280:	9e 8b       	std	Y+22, r25	; 0x16
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	9e a3       	std	Y+38, r25	; 0x26
    1286:	8e 89       	ldd	r24, Y+22	; 0x16
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	89 17       	cp	r24, r25
    128c:	08 f0       	brcs	.+2      	; 0x1290 <TIMER0_voidIntWaitControlFlagCount+0x1b0>
    128e:	1e a2       	std	Y+38, r1	; 0x26
    1290:	8b a1       	ldd	r24, Y+35	; 0x23
    1292:	9e 89       	ldd	r25, Y+22	; 0x16
    1294:	89 0f       	add	r24, r25
    1296:	8f a3       	std	Y+39, r24	; 0x27
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	88 a7       	std	Y+40, r24	; 0x28
    129c:	9f a1       	ldd	r25, Y+39	; 0x27
    129e:	8e 89       	ldd	r24, Y+22	; 0x16
    12a0:	98 17       	cp	r25, r24
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <TIMER0_voidIntWaitControlFlagCount+0x1c6>
    12a4:	18 a6       	std	Y+40, r1	; 0x28
    12a6:	9e a1       	ldd	r25, Y+38	; 0x26
    12a8:	88 a5       	ldd	r24, Y+40	; 0x28
    12aa:	98 2b       	or	r25, r24
    12ac:	9e a3       	std	Y+38, r25	; 0x26
    12ae:	9f a1       	ldd	r25, Y+39	; 0x27
    12b0:	9e 8b       	std	Y+22, r25	; 0x16
    12b2:	8f 81       	ldd	r24, Y+7	; 0x07
    12b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12b6:	89 0f       	add	r24, r25
    12b8:	8f 8b       	std	Y+23, r24	; 0x17
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	89 a7       	std	Y+41, r24	; 0x29
    12be:	9f 89       	ldd	r25, Y+23	; 0x17
    12c0:	8f 81       	ldd	r24, Y+7	; 0x07
    12c2:	98 17       	cp	r25, r24
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <TIMER0_voidIntWaitControlFlagCount+0x1e8>
    12c6:	19 a6       	std	Y+41, r1	; 0x29
    12c8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ca:	8f 89       	ldd	r24, Y+23	; 0x17
    12cc:	98 0f       	add	r25, r24
    12ce:	9a a7       	std	Y+42, r25	; 0x2a
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	9b a7       	std	Y+43, r25	; 0x2b
    12d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    12d6:	9f 89       	ldd	r25, Y+23	; 0x17
    12d8:	89 17       	cp	r24, r25
    12da:	08 f0       	brcs	.+2      	; 0x12de <TIMER0_voidIntWaitControlFlagCount+0x1fe>
    12dc:	1b a6       	std	Y+43, r1	; 0x2b
    12de:	89 a5       	ldd	r24, Y+41	; 0x29
    12e0:	9b a5       	ldd	r25, Y+43	; 0x2b
    12e2:	89 2b       	or	r24, r25
    12e4:	89 a7       	std	Y+41, r24	; 0x29
    12e6:	8a a5       	ldd	r24, Y+42	; 0x2a
    12e8:	8f 8b       	std	Y+23, r24	; 0x17
    12ea:	98 85       	ldd	r25, Y+8	; 0x08
    12ec:	88 89       	ldd	r24, Y+16	; 0x10
    12ee:	98 0f       	add	r25, r24
    12f0:	98 8f       	std	Y+24, r25	; 0x18
    12f2:	89 a5       	ldd	r24, Y+41	; 0x29
    12f4:	98 8d       	ldd	r25, Y+24	; 0x18
    12f6:	89 0f       	add	r24, r25
    12f8:	88 8f       	std	Y+24, r24	; 0x18
    12fa:	29 89       	ldd	r18, Y+17	; 0x11
    12fc:	3a 89       	ldd	r19, Y+18	; 0x12
    12fe:	4b 89       	ldd	r20, Y+19	; 0x13
    1300:	5c 89       	ldd	r21, Y+20	; 0x14
    1302:	6d 89       	ldd	r22, Y+21	; 0x15
    1304:	7e 89       	ldd	r23, Y+22	; 0x16
    1306:	8f 89       	ldd	r24, Y+23	; 0x17
    1308:	98 8d       	ldd	r25, Y+24	; 0x18
    130a:	20 93 6e 00 	sts	0x006E, r18
    130e:	30 93 6f 00 	sts	0x006F, r19
    1312:	40 93 70 00 	sts	0x0070, r20
    1316:	50 93 71 00 	sts	0x0071, r21
    131a:	60 93 72 00 	sts	0x0072, r22
    131e:	70 93 73 00 	sts	0x0073, r23
    1322:	80 93 74 00 	sts	0x0074, r24
    1326:	90 93 75 00 	sts	0x0075, r25
    132a:	06 c0       	rjmp	.+12     	; 0x1338 <TIMER0_voidIntWaitControlFlagCount+0x258>
	}
	else
	{
		gu8_timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    132c:	8a e1       	ldi	r24, 0x1A	; 26
    132e:	80 93 61 00 	sts	0x0061, r24
		gu8_timer0FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    1332:	8d e1       	ldi	r24, 0x1D	; 29
    1334:	80 93 60 00 	sts	0x0060, r24
	}
}
    1338:	ab 96       	adiw	r28, 0x2b	; 43
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <TIMER2_u8BusyWaitMS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER2_u8BusyWaitMS(uint32_t u32_BusyTimeInMilliSec)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	c9 54       	subi	r28, 0x49	; 73
    1358:	d0 40       	sbci	r29, 0x00	; 0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	6b 87       	std	Y+11, r22	; 0x0b
    1366:	7c 87       	std	Y+12, r23	; 0x0c
    1368:	8d 87       	std	Y+13, r24	; 0x0d
    136a:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_NOT_USED ;
    136c:	81 e2       	ldi	r24, 0x21	; 33
    136e:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_timer2FlagIfUsed== u8_TIMER2_FLAG_NOT_USED)
    1370:	80 91 63 00 	lds	r24, 0x0063
    1374:	81 32       	cpi	r24, 0x21	; 33
    1376:	09 f0       	breq	.+2      	; 0x137a <TIMER2_u8BusyWaitMS+0x30>
    1378:	c4 c1       	rjmp	.+904    	; 0x1702 <TIMER2_u8BusyWaitMS+0x3b8>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
    137a:	1a 82       	std	Y+2, r1	; 0x02
    137c:	1b 82       	std	Y+3, r1	; 0x03
    137e:	1c 82       	std	Y+4, r1	; 0x04
    1380:	1d 82       	std	Y+5, r1	; 0x05
    1382:	1e 82       	std	Y+6, r1	; 0x06
    1384:	1f 82       	std	Y+7, r1	; 0x07
    1386:	18 86       	std	Y+8, r1	; 0x08
    1388:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER2_OVER_FLOW) ;
    138a:	8f e1       	ldi	r24, 0x1F	; 31
    138c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ;
    1390:	80 e2       	ldi	r24, 0x20	; 32
    1392:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMER2_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    1396:	8a e0       	ldi	r24, 0x0A	; 10
    1398:	0e 94 a7 01 	call	0x34e	; 0x34e <TIMER2_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER2_COMPARE_ON_MATCH) ;
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
		Timer2_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    13a2:	8a ef       	ldi	r24, 0xFA	; 250
    13a4:	0e 94 6f 04 	call	0x8de	; 0x8de <Timer2_u8setCompareRegTicksBeforeOV>
		Timer2_u8setOverFlowRegTicksBeforeOV(u8_INTIALIZING_TIMER2_COUNTER) ;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0e 94 46 04 	call	0x88c	; 0x88c <Timer2_u8setOverFlowRegTicksBeforeOV>
    13ae:	3a c1       	rjmp	.+628    	; 0x1624 <TIMER2_u8BusyWaitMS+0x2da>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER2_COMPARE_ON_MATCH,(uint8_t*)(&u8_CheckCompareFlag)) ;
    13b0:	9e 01       	movw	r18, r28
    13b2:	26 5f       	subi	r18, 0xF6	; 246
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	80 e2       	ldi	r24, 0x20	; 32
    13b8:	b9 01       	movw	r22, r18
    13ba:	0e 94 11 03 	call	0x622	; 0x622 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
    13be:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <TIMER2_u8BusyWaitMS+0x7c>
    13c4:	2f c1       	rjmp	.+606    	; 0x1624 <TIMER2_u8BusyWaitMS+0x2da>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER2_COMPARE_ON_MATCH) ;
    13c6:	80 e2       	ldi	r24, 0x20	; 32
    13c8:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
    13cc:	0a 81       	ldd	r16, Y+2	; 0x02
    13ce:	0f 8f       	std	Y+31, r16	; 0x1f
    13d0:	1b 81       	ldd	r17, Y+3	; 0x03
    13d2:	18 a3       	std	Y+32, r17	; 0x20
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	29 a3       	std	Y+33, r18	; 0x21
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	3a a3       	std	Y+34, r19	; 0x22
    13dc:	4e 81       	ldd	r20, Y+6	; 0x06
    13de:	4b a3       	std	Y+35, r20	; 0x23
    13e0:	5f 81       	ldd	r21, Y+7	; 0x07
    13e2:	5c a3       	std	Y+36, r21	; 0x24
    13e4:	68 85       	ldd	r22, Y+8	; 0x08
    13e6:	6d a3       	std	Y+37, r22	; 0x25
    13e8:	79 85       	ldd	r23, Y+9	; 0x09
    13ea:	7e a3       	std	Y+38, r23	; 0x26
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	8f a3       	std	Y+39, r24	; 0x27
    13f0:	18 a6       	std	Y+40, r1	; 0x28
    13f2:	19 a6       	std	Y+41, r1	; 0x29
    13f4:	1a a6       	std	Y+42, r1	; 0x2a
    13f6:	1b a6       	std	Y+43, r1	; 0x2b
    13f8:	1c a6       	std	Y+44, r1	; 0x2c
    13fa:	1d a6       	std	Y+45, r1	; 0x2d
    13fc:	1e a6       	std	Y+46, r1	; 0x2e
    13fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1400:	0f a1       	ldd	r16, Y+39	; 0x27
    1402:	90 0f       	add	r25, r16
    1404:	9f a7       	std	Y+47, r25	; 0x2f
    1406:	11 e0       	ldi	r17, 0x01	; 1
    1408:	1f ab       	std	Y+55, r17	; 0x37
    140a:	2f a5       	ldd	r18, Y+47	; 0x2f
    140c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    140e:	23 17       	cp	r18, r19
    1410:	08 f0       	brcs	.+2      	; 0x1414 <TIMER2_u8BusyWaitMS+0xca>
    1412:	1f aa       	std	Y+55, r1	; 0x37
    1414:	48 a1       	ldd	r20, Y+32	; 0x20
    1416:	58 a5       	ldd	r21, Y+40	; 0x28
    1418:	45 0f       	add	r20, r21
    141a:	48 ab       	std	Y+48, r20	; 0x30
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	68 af       	std	Y+56, r22	; 0x38
    1420:	78 a9       	ldd	r23, Y+48	; 0x30
    1422:	88 a1       	ldd	r24, Y+32	; 0x20
    1424:	78 17       	cp	r23, r24
    1426:	08 f0       	brcs	.+2      	; 0x142a <TIMER2_u8BusyWaitMS+0xe0>
    1428:	18 ae       	std	Y+56, r1	; 0x38
    142a:	9f a9       	ldd	r25, Y+55	; 0x37
    142c:	08 a9       	ldd	r16, Y+48	; 0x30
    142e:	90 0f       	add	r25, r16
    1430:	99 af       	std	Y+57, r25	; 0x39
    1432:	11 e0       	ldi	r17, 0x01	; 1
    1434:	1a af       	std	Y+58, r17	; 0x3a
    1436:	29 ad       	ldd	r18, Y+57	; 0x39
    1438:	38 a9       	ldd	r19, Y+48	; 0x30
    143a:	23 17       	cp	r18, r19
    143c:	08 f0       	brcs	.+2      	; 0x1440 <TIMER2_u8BusyWaitMS+0xf6>
    143e:	1a ae       	std	Y+58, r1	; 0x3a
    1440:	48 ad       	ldd	r20, Y+56	; 0x38
    1442:	5a ad       	ldd	r21, Y+58	; 0x3a
    1444:	45 2b       	or	r20, r21
    1446:	48 af       	std	Y+56, r20	; 0x38
    1448:	69 ad       	ldd	r22, Y+57	; 0x39
    144a:	68 ab       	std	Y+48, r22	; 0x30
    144c:	79 a1       	ldd	r23, Y+33	; 0x21
    144e:	89 a5       	ldd	r24, Y+41	; 0x29
    1450:	78 0f       	add	r23, r24
    1452:	79 ab       	std	Y+49, r23	; 0x31
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	9b af       	std	Y+59, r25	; 0x3b
    1458:	09 a9       	ldd	r16, Y+49	; 0x31
    145a:	19 a1       	ldd	r17, Y+33	; 0x21
    145c:	01 17       	cp	r16, r17
    145e:	08 f0       	brcs	.+2      	; 0x1462 <TIMER2_u8BusyWaitMS+0x118>
    1460:	1b ae       	std	Y+59, r1	; 0x3b
    1462:	28 ad       	ldd	r18, Y+56	; 0x38
    1464:	39 a9       	ldd	r19, Y+49	; 0x31
    1466:	23 0f       	add	r18, r19
    1468:	2c af       	std	Y+60, r18	; 0x3c
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	4d af       	std	Y+61, r20	; 0x3d
    146e:	5c ad       	ldd	r21, Y+60	; 0x3c
    1470:	69 a9       	ldd	r22, Y+49	; 0x31
    1472:	56 17       	cp	r21, r22
    1474:	08 f0       	brcs	.+2      	; 0x1478 <TIMER2_u8BusyWaitMS+0x12e>
    1476:	1d ae       	std	Y+61, r1	; 0x3d
    1478:	7b ad       	ldd	r23, Y+59	; 0x3b
    147a:	8d ad       	ldd	r24, Y+61	; 0x3d
    147c:	78 2b       	or	r23, r24
    147e:	7b af       	std	Y+59, r23	; 0x3b
    1480:	9c ad       	ldd	r25, Y+60	; 0x3c
    1482:	99 ab       	std	Y+49, r25	; 0x31
    1484:	0a a1       	ldd	r16, Y+34	; 0x22
    1486:	1a a5       	ldd	r17, Y+42	; 0x2a
    1488:	01 0f       	add	r16, r17
    148a:	0a ab       	std	Y+50, r16	; 0x32
    148c:	21 e0       	ldi	r18, 0x01	; 1
    148e:	2e af       	std	Y+62, r18	; 0x3e
    1490:	3a a9       	ldd	r19, Y+50	; 0x32
    1492:	4a a1       	ldd	r20, Y+34	; 0x22
    1494:	34 17       	cp	r19, r20
    1496:	08 f0       	brcs	.+2      	; 0x149a <TIMER2_u8BusyWaitMS+0x150>
    1498:	1e ae       	std	Y+62, r1	; 0x3e
    149a:	5b ad       	ldd	r21, Y+59	; 0x3b
    149c:	6a a9       	ldd	r22, Y+50	; 0x32
    149e:	56 0f       	add	r21, r22
    14a0:	5f af       	std	Y+63, r21	; 0x3f
    14a2:	71 e0       	ldi	r23, 0x01	; 1
    14a4:	21 96       	adiw	r28, 0x01	; 1
    14a6:	7f af       	std	Y+63, r23	; 0x3f
    14a8:	21 97       	sbiw	r28, 0x01	; 1
    14aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    14ac:	9a a9       	ldd	r25, Y+50	; 0x32
    14ae:	89 17       	cp	r24, r25
    14b0:	18 f0       	brcs	.+6      	; 0x14b8 <TIMER2_u8BusyWaitMS+0x16e>
    14b2:	21 96       	adiw	r28, 0x01	; 1
    14b4:	1f ae       	std	Y+63, r1	; 0x3f
    14b6:	21 97       	sbiw	r28, 0x01	; 1
    14b8:	0e ad       	ldd	r16, Y+62	; 0x3e
    14ba:	21 96       	adiw	r28, 0x01	; 1
    14bc:	1f ad       	ldd	r17, Y+63	; 0x3f
    14be:	21 97       	sbiw	r28, 0x01	; 1
    14c0:	01 2b       	or	r16, r17
    14c2:	0e af       	std	Y+62, r16	; 0x3e
    14c4:	2f ad       	ldd	r18, Y+63	; 0x3f
    14c6:	2a ab       	std	Y+50, r18	; 0x32
    14c8:	3b a1       	ldd	r19, Y+35	; 0x23
    14ca:	4b a5       	ldd	r20, Y+43	; 0x2b
    14cc:	34 0f       	add	r19, r20
    14ce:	3b ab       	std	Y+51, r19	; 0x33
    14d0:	51 e0       	ldi	r21, 0x01	; 1
    14d2:	22 96       	adiw	r28, 0x02	; 2
    14d4:	5f af       	std	Y+63, r21	; 0x3f
    14d6:	22 97       	sbiw	r28, 0x02	; 2
    14d8:	6b a9       	ldd	r22, Y+51	; 0x33
    14da:	7b a1       	ldd	r23, Y+35	; 0x23
    14dc:	67 17       	cp	r22, r23
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <TIMER2_u8BusyWaitMS+0x19c>
    14e0:	22 96       	adiw	r28, 0x02	; 2
    14e2:	1f ae       	std	Y+63, r1	; 0x3f
    14e4:	22 97       	sbiw	r28, 0x02	; 2
    14e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    14e8:	9b a9       	ldd	r25, Y+51	; 0x33
    14ea:	89 0f       	add	r24, r25
    14ec:	23 96       	adiw	r28, 0x03	; 3
    14ee:	8f af       	std	Y+63, r24	; 0x3f
    14f0:	23 97       	sbiw	r28, 0x03	; 3
    14f2:	01 e0       	ldi	r16, 0x01	; 1
    14f4:	24 96       	adiw	r28, 0x04	; 4
    14f6:	0f af       	std	Y+63, r16	; 0x3f
    14f8:	24 97       	sbiw	r28, 0x04	; 4
    14fa:	23 96       	adiw	r28, 0x03	; 3
    14fc:	1f ad       	ldd	r17, Y+63	; 0x3f
    14fe:	23 97       	sbiw	r28, 0x03	; 3
    1500:	2b a9       	ldd	r18, Y+51	; 0x33
    1502:	12 17       	cp	r17, r18
    1504:	18 f0       	brcs	.+6      	; 0x150c <TIMER2_u8BusyWaitMS+0x1c2>
    1506:	24 96       	adiw	r28, 0x04	; 4
    1508:	1f ae       	std	Y+63, r1	; 0x3f
    150a:	24 97       	sbiw	r28, 0x04	; 4
    150c:	22 96       	adiw	r28, 0x02	; 2
    150e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1510:	22 97       	sbiw	r28, 0x02	; 2
    1512:	24 96       	adiw	r28, 0x04	; 4
    1514:	4f ad       	ldd	r20, Y+63	; 0x3f
    1516:	24 97       	sbiw	r28, 0x04	; 4
    1518:	34 2b       	or	r19, r20
    151a:	22 96       	adiw	r28, 0x02	; 2
    151c:	3f af       	std	Y+63, r19	; 0x3f
    151e:	22 97       	sbiw	r28, 0x02	; 2
    1520:	23 96       	adiw	r28, 0x03	; 3
    1522:	5f ad       	ldd	r21, Y+63	; 0x3f
    1524:	23 97       	sbiw	r28, 0x03	; 3
    1526:	5b ab       	std	Y+51, r21	; 0x33
    1528:	6c a1       	ldd	r22, Y+36	; 0x24
    152a:	7c a5       	ldd	r23, Y+44	; 0x2c
    152c:	67 0f       	add	r22, r23
    152e:	6c ab       	std	Y+52, r22	; 0x34
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	25 96       	adiw	r28, 0x05	; 5
    1534:	8f af       	std	Y+63, r24	; 0x3f
    1536:	25 97       	sbiw	r28, 0x05	; 5
    1538:	9c a9       	ldd	r25, Y+52	; 0x34
    153a:	0c a1       	ldd	r16, Y+36	; 0x24
    153c:	90 17       	cp	r25, r16
    153e:	18 f0       	brcs	.+6      	; 0x1546 <TIMER2_u8BusyWaitMS+0x1fc>
    1540:	25 96       	adiw	r28, 0x05	; 5
    1542:	1f ae       	std	Y+63, r1	; 0x3f
    1544:	25 97       	sbiw	r28, 0x05	; 5
    1546:	22 96       	adiw	r28, 0x02	; 2
    1548:	1f ad       	ldd	r17, Y+63	; 0x3f
    154a:	22 97       	sbiw	r28, 0x02	; 2
    154c:	2c a9       	ldd	r18, Y+52	; 0x34
    154e:	12 0f       	add	r17, r18
    1550:	26 96       	adiw	r28, 0x06	; 6
    1552:	1f af       	std	Y+63, r17	; 0x3f
    1554:	26 97       	sbiw	r28, 0x06	; 6
    1556:	31 e0       	ldi	r19, 0x01	; 1
    1558:	27 96       	adiw	r28, 0x07	; 7
    155a:	3f af       	std	Y+63, r19	; 0x3f
    155c:	27 97       	sbiw	r28, 0x07	; 7
    155e:	26 96       	adiw	r28, 0x06	; 6
    1560:	4f ad       	ldd	r20, Y+63	; 0x3f
    1562:	26 97       	sbiw	r28, 0x06	; 6
    1564:	5c a9       	ldd	r21, Y+52	; 0x34
    1566:	45 17       	cp	r20, r21
    1568:	18 f0       	brcs	.+6      	; 0x1570 <TIMER2_u8BusyWaitMS+0x226>
    156a:	27 96       	adiw	r28, 0x07	; 7
    156c:	1f ae       	std	Y+63, r1	; 0x3f
    156e:	27 97       	sbiw	r28, 0x07	; 7
    1570:	25 96       	adiw	r28, 0x05	; 5
    1572:	6f ad       	ldd	r22, Y+63	; 0x3f
    1574:	25 97       	sbiw	r28, 0x05	; 5
    1576:	27 96       	adiw	r28, 0x07	; 7
    1578:	7f ad       	ldd	r23, Y+63	; 0x3f
    157a:	27 97       	sbiw	r28, 0x07	; 7
    157c:	67 2b       	or	r22, r23
    157e:	25 96       	adiw	r28, 0x05	; 5
    1580:	6f af       	std	Y+63, r22	; 0x3f
    1582:	25 97       	sbiw	r28, 0x05	; 5
    1584:	26 96       	adiw	r28, 0x06	; 6
    1586:	8f ad       	ldd	r24, Y+63	; 0x3f
    1588:	26 97       	sbiw	r28, 0x06	; 6
    158a:	8c ab       	std	Y+52, r24	; 0x34
    158c:	9d a1       	ldd	r25, Y+37	; 0x25
    158e:	0d a5       	ldd	r16, Y+45	; 0x2d
    1590:	90 0f       	add	r25, r16
    1592:	9d ab       	std	Y+53, r25	; 0x35
    1594:	11 e0       	ldi	r17, 0x01	; 1
    1596:	28 96       	adiw	r28, 0x08	; 8
    1598:	1f af       	std	Y+63, r17	; 0x3f
    159a:	28 97       	sbiw	r28, 0x08	; 8
    159c:	2d a9       	ldd	r18, Y+53	; 0x35
    159e:	3d a1       	ldd	r19, Y+37	; 0x25
    15a0:	23 17       	cp	r18, r19
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <TIMER2_u8BusyWaitMS+0x260>
    15a4:	28 96       	adiw	r28, 0x08	; 8
    15a6:	1f ae       	std	Y+63, r1	; 0x3f
    15a8:	28 97       	sbiw	r28, 0x08	; 8
    15aa:	25 96       	adiw	r28, 0x05	; 5
    15ac:	4f ad       	ldd	r20, Y+63	; 0x3f
    15ae:	25 97       	sbiw	r28, 0x05	; 5
    15b0:	5d a9       	ldd	r21, Y+53	; 0x35
    15b2:	45 0f       	add	r20, r21
    15b4:	29 96       	adiw	r28, 0x09	; 9
    15b6:	4f af       	std	Y+63, r20	; 0x3f
    15b8:	29 97       	sbiw	r28, 0x09	; 9
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	2a 96       	adiw	r28, 0x0a	; 10
    15be:	6f af       	std	Y+63, r22	; 0x3f
    15c0:	2a 97       	sbiw	r28, 0x0a	; 10
    15c2:	29 96       	adiw	r28, 0x09	; 9
    15c4:	7f ad       	ldd	r23, Y+63	; 0x3f
    15c6:	29 97       	sbiw	r28, 0x09	; 9
    15c8:	8d a9       	ldd	r24, Y+53	; 0x35
    15ca:	78 17       	cp	r23, r24
    15cc:	18 f0       	brcs	.+6      	; 0x15d4 <TIMER2_u8BusyWaitMS+0x28a>
    15ce:	2a 96       	adiw	r28, 0x0a	; 10
    15d0:	1f ae       	std	Y+63, r1	; 0x3f
    15d2:	2a 97       	sbiw	r28, 0x0a	; 10
    15d4:	28 96       	adiw	r28, 0x08	; 8
    15d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    15d8:	28 97       	sbiw	r28, 0x08	; 8
    15da:	2a 96       	adiw	r28, 0x0a	; 10
    15dc:	0f ad       	ldd	r16, Y+63	; 0x3f
    15de:	2a 97       	sbiw	r28, 0x0a	; 10
    15e0:	90 2b       	or	r25, r16
    15e2:	28 96       	adiw	r28, 0x08	; 8
    15e4:	9f af       	std	Y+63, r25	; 0x3f
    15e6:	28 97       	sbiw	r28, 0x08	; 8
    15e8:	29 96       	adiw	r28, 0x09	; 9
    15ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    15ec:	29 97       	sbiw	r28, 0x09	; 9
    15ee:	1d ab       	std	Y+53, r17	; 0x35
    15f0:	2e a1       	ldd	r18, Y+38	; 0x26
    15f2:	3e a5       	ldd	r19, Y+46	; 0x2e
    15f4:	23 0f       	add	r18, r19
    15f6:	2e ab       	std	Y+54, r18	; 0x36
    15f8:	28 96       	adiw	r28, 0x08	; 8
    15fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    15fc:	28 97       	sbiw	r28, 0x08	; 8
    15fe:	4e a9       	ldd	r20, Y+54	; 0x36
    1600:	84 0f       	add	r24, r20
    1602:	8e ab       	std	Y+54, r24	; 0x36
    1604:	2f a5       	ldd	r18, Y+47	; 0x2f
    1606:	38 a9       	ldd	r19, Y+48	; 0x30
    1608:	49 a9       	ldd	r20, Y+49	; 0x31
    160a:	5a a9       	ldd	r21, Y+50	; 0x32
    160c:	6b a9       	ldd	r22, Y+51	; 0x33
    160e:	7c a9       	ldd	r23, Y+52	; 0x34
    1610:	8d a9       	ldd	r24, Y+53	; 0x35
    1612:	9e a9       	ldd	r25, Y+54	; 0x36
    1614:	2a 83       	std	Y+2, r18	; 0x02
    1616:	3b 83       	std	Y+3, r19	; 0x03
    1618:	4c 83       	std	Y+4, r20	; 0x04
    161a:	5d 83       	std	Y+5, r21	; 0x05
    161c:	6e 83       	std	Y+6, r22	; 0x06
    161e:	7f 83       	std	Y+7, r23	; 0x07
    1620:	88 87       	std	Y+8, r24	; 0x08
    1622:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ;
		TIMER2_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER2_COMPARE_ON_MATCH) ;
		Timer2_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer2_u8setOverFlowRegTicksBeforeOV(u8_INTIALIZING_TIMER2_COUNTER) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
    1624:	8b 85       	ldd	r24, Y+11	; 0x0b
    1626:	9c 85       	ldd	r25, Y+12	; 0x0c
    1628:	ad 85       	ldd	r26, Y+13	; 0x0d
    162a:	be 85       	ldd	r27, Y+14	; 0x0e
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	aa 1f       	adc	r26, r26
    1632:	bb 1f       	adc	r27, r27
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	aa 1f       	adc	r26, r26
    163a:	bb 1f       	adc	r27, r27
    163c:	8c 01       	movw	r16, r24
    163e:	9d 01       	movw	r18, r26
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	0f 8b       	std	Y+23, r16	; 0x17
    164a:	18 8f       	std	Y+24, r17	; 0x18
    164c:	29 8f       	std	Y+25, r18	; 0x19
    164e:	3a 8f       	std	Y+26, r19	; 0x1a
    1650:	4b 8f       	std	Y+27, r20	; 0x1b
    1652:	5c 8f       	std	Y+28, r21	; 0x1c
    1654:	6d 8f       	std	Y+29, r22	; 0x1d
    1656:	7e 8f       	std	Y+30, r23	; 0x1e
    1658:	1a 81       	ldd	r17, Y+2	; 0x02
    165a:	1f 87       	std	Y+15, r17	; 0x0f
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	28 8b       	std	Y+16, r18	; 0x10
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	39 8b       	std	Y+17, r19	; 0x11
    1664:	4d 81       	ldd	r20, Y+5	; 0x05
    1666:	4a 8b       	std	Y+18, r20	; 0x12
    1668:	5e 81       	ldd	r21, Y+6	; 0x06
    166a:	5b 8b       	std	Y+19, r21	; 0x13
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	6c 8b       	std	Y+20, r22	; 0x14
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	7d 8b       	std	Y+21, r23	; 0x15
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	8e 8b       	std	Y+22, r24	; 0x16
    1678:	9e 89       	ldd	r25, Y+22	; 0x16
    167a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    167c:	09 17       	cp	r16, r25
    167e:	08 f4       	brcc	.+2      	; 0x1682 <TIMER2_u8BusyWaitMS+0x338>
    1680:	42 c0       	rjmp	.+132    	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    1682:	1e 89       	ldd	r17, Y+22	; 0x16
    1684:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1686:	12 17       	cp	r17, r18
    1688:	09 f0       	breq	.+2      	; 0x168c <TIMER2_u8BusyWaitMS+0x342>
    168a:	92 ce       	rjmp	.-732    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
    168c:	3d 89       	ldd	r19, Y+21	; 0x15
    168e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1690:	43 17       	cp	r20, r19
    1692:	c8 f1       	brcs	.+114    	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    1694:	5d 89       	ldd	r21, Y+21	; 0x15
    1696:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1698:	56 17       	cp	r21, r22
    169a:	09 f0       	breq	.+2      	; 0x169e <TIMER2_u8BusyWaitMS+0x354>
    169c:	89 ce       	rjmp	.-750    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
    169e:	7c 89       	ldd	r23, Y+20	; 0x14
    16a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16a2:	87 17       	cp	r24, r23
    16a4:	80 f1       	brcs	.+96     	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    16a6:	9c 89       	ldd	r25, Y+20	; 0x14
    16a8:	0c 8d       	ldd	r16, Y+28	; 0x1c
    16aa:	90 17       	cp	r25, r16
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <TIMER2_u8BusyWaitMS+0x366>
    16ae:	80 ce       	rjmp	.-768    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
    16b0:	1b 89       	ldd	r17, Y+19	; 0x13
    16b2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    16b4:	21 17       	cp	r18, r17
    16b6:	38 f1       	brcs	.+78     	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    16b8:	3b 89       	ldd	r19, Y+19	; 0x13
    16ba:	4b 8d       	ldd	r20, Y+27	; 0x1b
    16bc:	34 17       	cp	r19, r20
    16be:	09 f0       	breq	.+2      	; 0x16c2 <TIMER2_u8BusyWaitMS+0x378>
    16c0:	77 ce       	rjmp	.-786    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
    16c2:	5a 89       	ldd	r21, Y+18	; 0x12
    16c4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16c6:	65 17       	cp	r22, r21
    16c8:	f0 f0       	brcs	.+60     	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    16ca:	7a 89       	ldd	r23, Y+18	; 0x12
    16cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ce:	78 17       	cp	r23, r24
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <TIMER2_u8BusyWaitMS+0x38a>
    16d2:	6e ce       	rjmp	.-804    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
    16d4:	99 89       	ldd	r25, Y+17	; 0x11
    16d6:	09 8d       	ldd	r16, Y+25	; 0x19
    16d8:	09 17       	cp	r16, r25
    16da:	a8 f0       	brcs	.+42     	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    16dc:	19 89       	ldd	r17, Y+17	; 0x11
    16de:	29 8d       	ldd	r18, Y+25	; 0x19
    16e0:	12 17       	cp	r17, r18
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <TIMER2_u8BusyWaitMS+0x39c>
    16e4:	65 ce       	rjmp	.-822    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
    16e6:	38 89       	ldd	r19, Y+16	; 0x10
    16e8:	48 8d       	ldd	r20, Y+24	; 0x18
    16ea:	43 17       	cp	r20, r19
    16ec:	60 f0       	brcs	.+24     	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    16ee:	58 89       	ldd	r21, Y+16	; 0x10
    16f0:	68 8d       	ldd	r22, Y+24	; 0x18
    16f2:	56 17       	cp	r21, r22
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <TIMER2_u8BusyWaitMS+0x3ae>
    16f6:	5c ce       	rjmp	.-840    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
    16f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    16fa:	8f 89       	ldd	r24, Y+23	; 0x17
    16fc:	87 17       	cp	r24, r23
    16fe:	18 f0       	brcs	.+6      	; 0x1706 <TIMER2_u8BusyWaitMS+0x3bc>
    1700:	57 ce       	rjmp	.-850    	; 0x13b0 <TIMER2_u8BusyWaitMS+0x66>
			}
		}
	}
	else
	{
		u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
    1702:	82 e2       	ldi	r24, 0x22	; 34
    1704:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer2FlagIfUsed ;
    1706:	89 81       	ldd	r24, Y+1	; 0x01

}
    1708:	c7 5b       	subi	r28, 0xB7	; 183
    170a:	df 4f       	sbci	r29, 0xFF	; 255
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <TIMER2_u8BusyWaitUS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER2_u8BusyWaitUS(uint32_t u32_BusyTimeInMicroSec)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	2a 97       	sbiw	r28, 0x0a	; 10
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	6f 83       	std	Y+7, r22	; 0x07
    1736:	78 87       	std	Y+8, r23	; 0x08
    1738:	89 87       	std	Y+9, r24	; 0x09
    173a:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_NOT_USED ;
    173c:	81 e2       	ldi	r24, 0x21	; 33
    173e:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_timer2FlagIfUsed== u8_TIMER2_FLAG_NOT_USED)
    1740:	80 91 63 00 	lds	r24, 0x0063
    1744:	81 32       	cpi	r24, 0x21	; 33
    1746:	e9 f5       	brne	.+122    	; 0x17c2 <TIMER2_u8BusyWaitUS+0xa2>
	{
		volatile uint32_t u32_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
    1748:	1a 82       	std	Y+2, r1	; 0x02
    174a:	1b 82       	std	Y+3, r1	; 0x03
    174c:	1c 82       	std	Y+4, r1	; 0x04
    174e:	1d 82       	std	Y+5, r1	; 0x05
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER2_OVER_FLOW) ;
    1750:	8f e1       	ldi	r24, 0x1F	; 31
    1752:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ;
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
		TIMER2_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    175c:	8a e0       	ldi	r24, 0x0A	; 10
    175e:	0e 94 a7 01 	call	0x34e	; 0x34e <TIMER2_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER2_COMPARE_ON_MATCH) ;
    1762:	80 e2       	ldi	r24, 0x20	; 32
    1764:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
		Timer2_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    1768:	8a ef       	ldi	r24, 0xFA	; 250
    176a:	0e 94 6f 04 	call	0x8de	; 0x8de <Timer2_u8setCompareRegTicksBeforeOV>
		Timer2_u8setOverFlowRegTicksBeforeOV(u8_INTIALIZING_TIMER2_COUNTER) ;
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	0e 94 46 04 	call	0x88c	; 0x88c <Timer2_u8setOverFlowRegTicksBeforeOV>
    1774:	18 c0       	rjmp	.+48     	; 0x17a6 <TIMER2_u8BusyWaitUS+0x86>
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
		{
			TIMERS_u8GetIntFlag(u8_TIMER2_COMPARE_ON_MATCH,(uint8_t*)(&u8_CheckCompareFlag)) ;
    1776:	9e 01       	movw	r18, r28
    1778:	2a 5f       	subi	r18, 0xFA	; 250
    177a:	3f 4f       	sbci	r19, 0xFF	; 255
    177c:	80 e2       	ldi	r24, 0x20	; 32
    177e:	b9 01       	movw	r22, r18
    1780:	0e 94 11 03 	call	0x622	; 0x622 <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
    1784:	8e 81       	ldd	r24, Y+6	; 0x06
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	71 f4       	brne	.+28     	; 0x17a6 <TIMER2_u8BusyWaitUS+0x86>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER2_COMPARE_ON_MATCH) ;
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	0e 94 bf 02 	call	0x57e	; 0x57e <TIMERS_u8ClearIntFlag>
				u32_BusyWaitcounter++ ;
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	ac 81       	ldd	r26, Y+4	; 0x04
    1796:	bd 81       	ldd	r27, Y+5	; 0x05
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	a1 1d       	adc	r26, r1
    179c:	b1 1d       	adc	r27, r1
    179e:	8a 83       	std	Y+2, r24	; 0x02
    17a0:	9b 83       	std	Y+3, r25	; 0x03
    17a2:	ac 83       	std	Y+4, r26	; 0x04
    17a4:	bd 83       	std	Y+5, r27	; 0x05
		TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ;
		TIMER2_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER2_COMPARE_ON_MATCH) ;
		Timer2_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer2_u8setOverFlowRegTicksBeforeOV(u8_INTIALIZING_TIMER2_COUNTER) ;
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
    17a6:	2a 81       	ldd	r18, Y+2	; 0x02
    17a8:	3b 81       	ldd	r19, Y+3	; 0x03
    17aa:	4c 81       	ldd	r20, Y+4	; 0x04
    17ac:	5d 81       	ldd	r21, Y+5	; 0x05
    17ae:	8f 81       	ldd	r24, Y+7	; 0x07
    17b0:	98 85       	ldd	r25, Y+8	; 0x08
    17b2:	a9 85       	ldd	r26, Y+9	; 0x09
    17b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    17b6:	82 17       	cp	r24, r18
    17b8:	93 07       	cpc	r25, r19
    17ba:	a4 07       	cpc	r26, r20
    17bc:	b5 07       	cpc	r27, r21
    17be:	d8 f6       	brcc	.-74     	; 0x1776 <TIMER2_u8BusyWaitUS+0x56>
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <TIMER2_u8BusyWaitUS+0xa6>
			}
		}
	}
	else
	{
		u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
    17c2:	82 e2       	ldi	r24, 0x22	; 34
    17c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer2FlagIfUsed ;
    17c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    17c8:	2a 96       	adiw	r28, 0x0a	; 10
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <TIMER2_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER2_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <TIMER2_u8InterruptWait+0x6>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <TIMER2_u8InterruptWait+0x8>
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	6a 83       	std	Y+2, r22	; 0x02
    17ea:	7b 83       	std	Y+3, r23	; 0x03
    17ec:	8c 83       	std	Y+4, r24	; 0x04
    17ee:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_NOT_USED ;
    17f0:	81 e2       	ldi	r24, 0x21	; 33
    17f2:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_timer2FlagIfUsed==u8_TIMER2_FLAG_NOT_USED &&gu8_timer2FinishIntWaitFlag != u8_BEGIN_INTERRUPT_WAITING )
    17f4:	80 91 63 00 	lds	r24, 0x0063
    17f8:	81 32       	cpi	r24, 0x21	; 33
    17fa:	09 f0       	breq	.+2      	; 0x17fe <TIMER2_u8InterruptWait+0x24>
    17fc:	3f c0       	rjmp	.+126    	; 0x187c <TIMER2_u8InterruptWait+0xa2>
    17fe:	80 91 62 00 	lds	r24, 0x0062
    1802:	8e 31       	cpi	r24, 0x1E	; 30
    1804:	d9 f1       	breq	.+118    	; 0x187c <TIMER2_u8InterruptWait+0xa2>
	{
		gu64_timer2IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	ac 81       	ldd	r26, Y+4	; 0x04
    180c:	bd 81       	ldd	r27, Y+5	; 0x05
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	aa 1f       	adc	r26, r26
    1814:	bb 1f       	adc	r27, r27
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	aa 1f       	adc	r26, r26
    181c:	bb 1f       	adc	r27, r27
    181e:	9c 01       	movw	r18, r24
    1820:	ad 01       	movw	r20, r26
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	20 93 76 00 	sts	0x0076, r18
    182e:	30 93 77 00 	sts	0x0077, r19
    1832:	40 93 78 00 	sts	0x0078, r20
    1836:	50 93 79 00 	sts	0x0079, r21
    183a:	60 93 7a 00 	sts	0x007A, r22
    183e:	70 93 7b 00 	sts	0x007B, r23
    1842:	80 93 7c 00 	sts	0x007C, r24
    1846:	90 93 7d 00 	sts	0x007D, r25
		Timer2_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    184a:	8a ef       	ldi	r24, 0xFA	; 250
    184c:	0e 94 6f 04 	call	0x8de	; 0x8de <Timer2_u8setCompareRegTicksBeforeOV>
		Timer2_u8setOverFlowRegTicksBeforeOV(u8_INTIALIZING_TIMER2_COUNTER) ;
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	0e 94 46 04 	call	0x88c	; 0x88c <Timer2_u8setOverFlowRegTicksBeforeOV>
		gu8_timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
    1856:	82 e2       	ldi	r24, 0x22	; 34
    1858:	80 93 63 00 	sts	0x0063, r24
		TIMERS_u8IntModesEn(u8_TIMER2_COMPARE_ON_MATCH);
    185c:	80 e2       	ldi	r24, 0x20	; 32
    185e:	0e 94 6f 03 	call	0x6de	; 0x6de <TIMERS_u8IntModesEn>
		TIMER2_u8setCallBack(u8_TIMER2_COMPARE_ON_MATCH,TIMER2_voidIntWaitControlFlagCount) ;
    1862:	22 e5       	ldi	r18, 0x52	; 82
    1864:	3c e0       	ldi	r19, 0x0C	; 12
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	b9 01       	movw	r22, r18
    186a:	0e 94 bc 04 	call	0x978	; 0x978 <TIMER2_u8setCallBack>
		TIMER2_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    186e:	8a e0       	ldi	r24, 0x0A	; 10
    1870:	0e 94 a7 01 	call	0x34e	; 0x34e <TIMER2_u8StartWithclockAndPrescalerSelect>
		gu8_timer2FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    1874:	8e e1       	ldi	r24, 0x1E	; 30
    1876:	80 93 62 00 	sts	0x0062, r24
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <TIMER2_u8InterruptWait+0xa6>

	}
	else
	{
		u8_Timer2FlagIfUsed = u8_TIMER2_FLAG_USED ;
    187c:	82 e2       	ldi	r24, 0x22	; 34
    187e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer2FlagIfUsed ;
    1880:	89 81       	ldd	r24, Y+1	; 0x01
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <TIMER2_u8GetIntWaitStatus>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t TIMER2_u8GetIntWaitStatus(void)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	return gu8_timer2FinishIntWaitFlag  ;
    189a:	80 91 62 00 	lds	r24, 0x0062
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <TIMER2_voidIntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

static void TIMER2_voidIntWaitControlFlagCount(void)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	ab 97       	sbiw	r28, 0x2b	; 43
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61

	if(gu8_timer2FlagIfUsed==u8_TIMER2_FLAG_USED&&gu64_timer2IntWaitcounter > u8_INTIAL_COUNTER_VAL)
    18b8:	80 91 63 00 	lds	r24, 0x0063
    18bc:	82 32       	cpi	r24, 0x22	; 34
    18be:	09 f0       	breq	.+2      	; 0x18c2 <TIMER2_voidIntWaitControlFlagCount+0x1e>
    18c0:	17 c1       	rjmp	.+558    	; 0x1af0 <TIMER2_voidIntWaitControlFlagCount+0x24c>
    18c2:	20 91 76 00 	lds	r18, 0x0076
    18c6:	30 91 77 00 	lds	r19, 0x0077
    18ca:	40 91 78 00 	lds	r20, 0x0078
    18ce:	50 91 79 00 	lds	r21, 0x0079
    18d2:	60 91 7a 00 	lds	r22, 0x007A
    18d6:	70 91 7b 00 	lds	r23, 0x007B
    18da:	80 91 7c 00 	lds	r24, 0x007C
    18de:	90 91 7d 00 	lds	r25, 0x007D
    18e2:	e2 2f       	mov	r30, r18
    18e4:	e3 2b       	or	r30, r19
    18e6:	e4 2b       	or	r30, r20
    18e8:	e5 2b       	or	r30, r21
    18ea:	e6 2b       	or	r30, r22
    18ec:	e7 2b       	or	r30, r23
    18ee:	e8 2b       	or	r30, r24
    18f0:	e9 2b       	or	r30, r25
    18f2:	ee 23       	and	r30, r30
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <TIMER2_voidIntWaitControlFlagCount+0x54>
    18f6:	fc c0       	rjmp	.+504    	; 0x1af0 <TIMER2_voidIntWaitControlFlagCount+0x24c>
	{
		gu64_timer2IntWaitcounter-- ;
    18f8:	80 91 76 00 	lds	r24, 0x0076
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	90 91 77 00 	lds	r25, 0x0077
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	80 91 78 00 	lds	r24, 0x0078
    1908:	8b 83       	std	Y+3, r24	; 0x03
    190a:	90 91 79 00 	lds	r25, 0x0079
    190e:	9c 83       	std	Y+4, r25	; 0x04
    1910:	80 91 7a 00 	lds	r24, 0x007A
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	90 91 7b 00 	lds	r25, 0x007B
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	80 91 7c 00 	lds	r24, 0x007C
    1920:	8f 83       	std	Y+7, r24	; 0x07
    1922:	90 91 7d 00 	lds	r25, 0x007D
    1926:	98 87       	std	Y+8, r25	; 0x08
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	89 87       	std	Y+9, r24	; 0x09
    192c:	9f ef       	ldi	r25, 0xFF	; 255
    192e:	9a 87       	std	Y+10, r25	; 0x0a
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	8b 87       	std	Y+11, r24	; 0x0b
    1934:	9f ef       	ldi	r25, 0xFF	; 255
    1936:	9c 87       	std	Y+12, r25	; 0x0c
    1938:	8f ef       	ldi	r24, 0xFF	; 255
    193a:	8d 87       	std	Y+13, r24	; 0x0d
    193c:	9f ef       	ldi	r25, 0xFF	; 255
    193e:	9e 87       	std	Y+14, r25	; 0x0e
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	8f 87       	std	Y+15, r24	; 0x0f
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	98 8b       	std	Y+16, r25	; 0x10
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	99 85       	ldd	r25, Y+9	; 0x09
    194c:	89 0f       	add	r24, r25
    194e:	89 8b       	std	Y+17, r24	; 0x11
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	89 8f       	std	Y+25, r24	; 0x19
    1954:	99 89       	ldd	r25, Y+17	; 0x11
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	98 17       	cp	r25, r24
    195a:	08 f0       	brcs	.+2      	; 0x195e <TIMER2_voidIntWaitControlFlagCount+0xba>
    195c:	19 8e       	std	Y+25, r1	; 0x19
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	8a 85       	ldd	r24, Y+10	; 0x0a
    1962:	98 0f       	add	r25, r24
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	9a 8f       	std	Y+26, r25	; 0x1a
    196a:	8a 89       	ldd	r24, Y+18	; 0x12
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	89 17       	cp	r24, r25
    1970:	08 f0       	brcs	.+2      	; 0x1974 <TIMER2_voidIntWaitControlFlagCount+0xd0>
    1972:	1a 8e       	std	Y+26, r1	; 0x1a
    1974:	89 8d       	ldd	r24, Y+25	; 0x19
    1976:	9a 89       	ldd	r25, Y+18	; 0x12
    1978:	89 0f       	add	r24, r25
    197a:	8b 8f       	std	Y+27, r24	; 0x1b
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8c 8f       	std	Y+28, r24	; 0x1c
    1980:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1982:	8a 89       	ldd	r24, Y+18	; 0x12
    1984:	98 17       	cp	r25, r24
    1986:	08 f0       	brcs	.+2      	; 0x198a <TIMER2_voidIntWaitControlFlagCount+0xe6>
    1988:	1c 8e       	std	Y+28, r1	; 0x1c
    198a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    198c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    198e:	98 2b       	or	r25, r24
    1990:	9a 8f       	std	Y+26, r25	; 0x1a
    1992:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1994:	9a 8b       	std	Y+18, r25	; 0x12
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9b 85       	ldd	r25, Y+11	; 0x0b
    199a:	89 0f       	add	r24, r25
    199c:	8b 8b       	std	Y+19, r24	; 0x13
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	8d 8f       	std	Y+29, r24	; 0x1d
    19a2:	9b 89       	ldd	r25, Y+19	; 0x13
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	98 17       	cp	r25, r24
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <TIMER2_voidIntWaitControlFlagCount+0x108>
    19aa:	1d 8e       	std	Y+29, r1	; 0x1d
    19ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	98 0f       	add	r25, r24
    19b2:	9e 8f       	std	Y+30, r25	; 0x1e
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	9f 8f       	std	Y+31, r25	; 0x1f
    19b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ba:	9b 89       	ldd	r25, Y+19	; 0x13
    19bc:	89 17       	cp	r24, r25
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <TIMER2_voidIntWaitControlFlagCount+0x11e>
    19c0:	1f 8e       	std	Y+31, r1	; 0x1f
    19c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19c6:	89 2b       	or	r24, r25
    19c8:	8d 8f       	std	Y+29, r24	; 0x1d
    19ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19d2:	98 0f       	add	r25, r24
    19d4:	9c 8b       	std	Y+20, r25	; 0x14
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	98 a3       	std	Y+32, r25	; 0x20
    19da:	8c 89       	ldd	r24, Y+20	; 0x14
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	89 17       	cp	r24, r25
    19e0:	08 f0       	brcs	.+2      	; 0x19e4 <TIMER2_voidIntWaitControlFlagCount+0x140>
    19e2:	18 a2       	std	Y+32, r1	; 0x20
    19e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e6:	9c 89       	ldd	r25, Y+20	; 0x14
    19e8:	89 0f       	add	r24, r25
    19ea:	89 a3       	std	Y+33, r24	; 0x21
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	8a a3       	std	Y+34, r24	; 0x22
    19f0:	99 a1       	ldd	r25, Y+33	; 0x21
    19f2:	8c 89       	ldd	r24, Y+20	; 0x14
    19f4:	98 17       	cp	r25, r24
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <TIMER2_voidIntWaitControlFlagCount+0x156>
    19f8:	1a a2       	std	Y+34, r1	; 0x22
    19fa:	98 a1       	ldd	r25, Y+32	; 0x20
    19fc:	8a a1       	ldd	r24, Y+34	; 0x22
    19fe:	98 2b       	or	r25, r24
    1a00:	98 a3       	std	Y+32, r25	; 0x20
    1a02:	99 a1       	ldd	r25, Y+33	; 0x21
    1a04:	9c 8b       	std	Y+20, r25	; 0x14
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a0a:	89 0f       	add	r24, r25
    1a0c:	8d 8b       	std	Y+21, r24	; 0x15
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	8b a3       	std	Y+35, r24	; 0x23
    1a12:	9d 89       	ldd	r25, Y+21	; 0x15
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	98 17       	cp	r25, r24
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <TIMER2_voidIntWaitControlFlagCount+0x178>
    1a1a:	1b a2       	std	Y+35, r1	; 0x23
    1a1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a1e:	8d 89       	ldd	r24, Y+21	; 0x15
    1a20:	98 0f       	add	r25, r24
    1a22:	9c a3       	std	Y+36, r25	; 0x24
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	9d a3       	std	Y+37, r25	; 0x25
    1a28:	8c a1       	ldd	r24, Y+36	; 0x24
    1a2a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a2c:	89 17       	cp	r24, r25
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <TIMER2_voidIntWaitControlFlagCount+0x18e>
    1a30:	1d a2       	std	Y+37, r1	; 0x25
    1a32:	8b a1       	ldd	r24, Y+35	; 0x23
    1a34:	9d a1       	ldd	r25, Y+37	; 0x25
    1a36:	89 2b       	or	r24, r25
    1a38:	8b a3       	std	Y+35, r24	; 0x23
    1a3a:	8c a1       	ldd	r24, Y+36	; 0x24
    1a3c:	8d 8b       	std	Y+21, r24	; 0x15
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a42:	98 0f       	add	r25, r24
    1a44:	9e 8b       	std	Y+22, r25	; 0x16
    1a46:	91 e0       	ldi	r25, 0x01	; 1
    1a48:	9e a3       	std	Y+38, r25	; 0x26
    1a4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4e:	89 17       	cp	r24, r25
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <TIMER2_voidIntWaitControlFlagCount+0x1b0>
    1a52:	1e a2       	std	Y+38, r1	; 0x26
    1a54:	8b a1       	ldd	r24, Y+35	; 0x23
    1a56:	9e 89       	ldd	r25, Y+22	; 0x16
    1a58:	89 0f       	add	r24, r25
    1a5a:	8f a3       	std	Y+39, r24	; 0x27
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	88 a7       	std	Y+40, r24	; 0x28
    1a60:	9f a1       	ldd	r25, Y+39	; 0x27
    1a62:	8e 89       	ldd	r24, Y+22	; 0x16
    1a64:	98 17       	cp	r25, r24
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <TIMER2_voidIntWaitControlFlagCount+0x1c6>
    1a68:	18 a6       	std	Y+40, r1	; 0x28
    1a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6c:	88 a5       	ldd	r24, Y+40	; 0x28
    1a6e:	98 2b       	or	r25, r24
    1a70:	9e a3       	std	Y+38, r25	; 0x26
    1a72:	9f a1       	ldd	r25, Y+39	; 0x27
    1a74:	9e 8b       	std	Y+22, r25	; 0x16
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a7a:	89 0f       	add	r24, r25
    1a7c:	8f 8b       	std	Y+23, r24	; 0x17
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	89 a7       	std	Y+41, r24	; 0x29
    1a82:	9f 89       	ldd	r25, Y+23	; 0x17
    1a84:	8f 81       	ldd	r24, Y+7	; 0x07
    1a86:	98 17       	cp	r25, r24
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <TIMER2_voidIntWaitControlFlagCount+0x1e8>
    1a8a:	19 a6       	std	Y+41, r1	; 0x29
    1a8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a90:	98 0f       	add	r25, r24
    1a92:	9a a7       	std	Y+42, r25	; 0x2a
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	9b a7       	std	Y+43, r25	; 0x2b
    1a98:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a9a:	9f 89       	ldd	r25, Y+23	; 0x17
    1a9c:	89 17       	cp	r24, r25
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <TIMER2_voidIntWaitControlFlagCount+0x1fe>
    1aa0:	1b a6       	std	Y+43, r1	; 0x2b
    1aa2:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa4:	9b a5       	ldd	r25, Y+43	; 0x2b
    1aa6:	89 2b       	or	r24, r25
    1aa8:	89 a7       	std	Y+41, r24	; 0x29
    1aaa:	8a a5       	ldd	r24, Y+42	; 0x2a
    1aac:	8f 8b       	std	Y+23, r24	; 0x17
    1aae:	98 85       	ldd	r25, Y+8	; 0x08
    1ab0:	88 89       	ldd	r24, Y+16	; 0x10
    1ab2:	98 0f       	add	r25, r24
    1ab4:	98 8f       	std	Y+24, r25	; 0x18
    1ab6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aba:	89 0f       	add	r24, r25
    1abc:	88 8f       	std	Y+24, r24	; 0x18
    1abe:	29 89       	ldd	r18, Y+17	; 0x11
    1ac0:	3a 89       	ldd	r19, Y+18	; 0x12
    1ac2:	4b 89       	ldd	r20, Y+19	; 0x13
    1ac4:	5c 89       	ldd	r21, Y+20	; 0x14
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	20 93 76 00 	sts	0x0076, r18
    1ad2:	30 93 77 00 	sts	0x0077, r19
    1ad6:	40 93 78 00 	sts	0x0078, r20
    1ada:	50 93 79 00 	sts	0x0079, r21
    1ade:	60 93 7a 00 	sts	0x007A, r22
    1ae2:	70 93 7b 00 	sts	0x007B, r23
    1ae6:	80 93 7c 00 	sts	0x007C, r24
    1aea:	90 93 7d 00 	sts	0x007D, r25
    1aee:	06 c0       	rjmp	.+12     	; 0x1afc <TIMER2_voidIntWaitControlFlagCount+0x258>
	}
	else
	{
		gu8_timer2FlagIfUsed = u8_TIMER2_FLAG_NOT_USED ;
    1af0:	81 e2       	ldi	r24, 0x21	; 33
    1af2:	80 93 63 00 	sts	0x0063, r24
		gu8_timer2FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    1af6:	8d e1       	ldi	r24, 0x1D	; 29
    1af8:	80 93 62 00 	sts	0x0062, r24
	}
}
    1afc:	ab 96       	adiw	r28, 0x2b	; 43
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <DIO_u8SetPinVal+0x6>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <DIO_u8SetPinVal+0x8>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <DIO_u8SetPinVal+0xa>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	8a 83       	std	Y+2, r24	; 0x02
    1b1e:	6b 83       	std	Y+3, r22	; 0x03
    1b20:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	88 30       	cpi	r24, 0x08	; 8
    1b2a:	08 f0       	brcs	.+2      	; 0x1b2e <DIO_u8SetPinVal+0x20>
    1b2c:	ee c0       	rjmp	.+476    	; 0x1d0a <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	3e 83       	std	Y+6, r19	; 0x06
    1b36:	2d 83       	std	Y+5, r18	; 0x05
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	89 30       	cpi	r24, 0x09	; 9
    1b3e:	91 05       	cpc	r25, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <DIO_u8SetPinVal+0x36>
    1b42:	4a c0       	rjmp	.+148    	; 0x1bd8 <DIO_u8SetPinVal+0xca>
    1b44:	2d 81       	ldd	r18, Y+5	; 0x05
    1b46:	3e 81       	ldd	r19, Y+6	; 0x06
    1b48:	2a 30       	cpi	r18, 0x0A	; 10
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	34 f4       	brge	.+12     	; 0x1b5a <DIO_u8SetPinVal+0x4c>
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	88 30       	cpi	r24, 0x08	; 8
    1b54:	91 05       	cpc	r25, r1
    1b56:	71 f0       	breq	.+28     	; 0x1b74 <DIO_u8SetPinVal+0x66>
    1b58:	d5 c0       	rjmp	.+426    	; 0x1d04 <DIO_u8SetPinVal+0x1f6>
    1b5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5e:	2a 30       	cpi	r18, 0x0A	; 10
    1b60:	31 05       	cpc	r19, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <DIO_u8SetPinVal+0x58>
    1b64:	6b c0       	rjmp	.+214    	; 0x1c3c <DIO_u8SetPinVal+0x12e>
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	8b 30       	cpi	r24, 0x0B	; 11
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <DIO_u8SetPinVal+0x64>
    1b70:	97 c0       	rjmp	.+302    	; 0x1ca0 <DIO_u8SetPinVal+0x192>
    1b72:	c8 c0       	rjmp	.+400    	; 0x1d04 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	88 23       	and	r24, r24
    1b78:	a9 f4       	brne	.+42     	; 0x1ba4 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
    1b7a:	ab e3       	ldi	r26, 0x3B	; 59
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	eb e3       	ldi	r30, 0x3B	; 59
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_u8SetPinVal+0x8a>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_u8SetPinVal+0x86>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	b5 c0       	rjmp	.+362    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	a1 f4       	brne	.+40     	; 0x1bd2 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
    1baa:	ab e3       	ldi	r26, 0x3B	; 59
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e3       	ldi	r30, 0x3B	; 59
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_u8SetPinVal+0xba>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_u8SetPinVal+0xb6>
    1bcc:	84 2b       	or	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	9e c0       	rjmp	.+316    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	9b c0       	rjmp	.+310    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	88 23       	and	r24, r24
    1bdc:	a9 f4       	brne	.+42     	; 0x1c08 <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
    1bde:	a8 e3       	ldi	r26, 0x38	; 56
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e8 e3       	ldi	r30, 0x38	; 56
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_u8SetPinVal+0xee>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_u8SetPinVal+0xea>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	83 c0       	rjmp	.+262    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	a1 f4       	brne	.+40     	; 0x1c36 <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
    1c0e:	a8 e3       	ldi	r26, 0x38	; 56
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e8 e3       	ldi	r30, 0x38	; 56
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_u8SetPinVal+0x11e>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_u8SetPinVal+0x11a>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	6c c0       	rjmp	.+216    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	69 c0       	rjmp	.+210    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	88 23       	and	r24, r24
    1c40:	a9 f4       	brne	.+42     	; 0x1c6c <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
    1c42:	a5 e3       	ldi	r26, 0x35	; 53
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e5 e3       	ldi	r30, 0x35	; 53
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_u8SetPinVal+0x152>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_u8SetPinVal+0x14e>
    1c64:	80 95       	com	r24
    1c66:	84 23       	and	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	51 c0       	rjmp	.+162    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	a1 f4       	brne	.+40     	; 0x1c9a <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
    1c72:	a5 e3       	ldi	r26, 0x35	; 53
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e5 e3       	ldi	r30, 0x35	; 53
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	02 2e       	mov	r0, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <DIO_u8SetPinVal+0x182>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <DIO_u8SetPinVal+0x17e>
    1c94:	84 2b       	or	r24, r20
    1c96:	8c 93       	st	X, r24
    1c98:	3a c0       	rjmp	.+116    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	37 c0       	rjmp	.+110    	; 0x1d0e <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	88 23       	and	r24, r24
    1ca4:	a9 f4       	brne	.+42     	; 0x1cd0 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
    1ca6:	a2 e3       	ldi	r26, 0x32	; 50
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e2 e3       	ldi	r30, 0x32	; 50
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_u8SetPinVal+0x1b6>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_u8SetPinVal+0x1b2>
    1cc8:	80 95       	com	r24
    1cca:	84 23       	and	r24, r20
    1ccc:	8c 93       	st	X, r24
    1cce:	1f c0       	rjmp	.+62     	; 0x1d0e <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
    1cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	a1 f4       	brne	.+40     	; 0x1cfe <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
    1cd6:	a2 e3       	ldi	r26, 0x32	; 50
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e2 e3       	ldi	r30, 0x32	; 50
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 2e       	mov	r0, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <DIO_u8SetPinVal+0x1e6>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <DIO_u8SetPinVal+0x1e2>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	08 c0       	rjmp	.+16     	; 0x1d0e <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	26 96       	adiw	r28, 0x06	; 6
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <DIO_u8SetPinDir+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <DIO_u8SetPinDir+0x8>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <DIO_u8SetPinDir+0xa>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	6b 83       	std	Y+3, r22	; 0x03
    1d34:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	88 30       	cpi	r24, 0x08	; 8
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <DIO_u8SetPinDir+0x20>
    1d40:	ee c0       	rjmp	.+476    	; 0x1f1e <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	3e 83       	std	Y+6, r19	; 0x06
    1d4a:	2d 83       	std	Y+5, r18	; 0x05
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	89 30       	cpi	r24, 0x09	; 9
    1d52:	91 05       	cpc	r25, r1
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <DIO_u8SetPinDir+0x36>
    1d56:	4a c0       	rjmp	.+148    	; 0x1dec <DIO_u8SetPinDir+0xca>
    1d58:	2d 81       	ldd	r18, Y+5	; 0x05
    1d5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5c:	2a 30       	cpi	r18, 0x0A	; 10
    1d5e:	31 05       	cpc	r19, r1
    1d60:	34 f4       	brge	.+12     	; 0x1d6e <DIO_u8SetPinDir+0x4c>
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	88 30       	cpi	r24, 0x08	; 8
    1d68:	91 05       	cpc	r25, r1
    1d6a:	71 f0       	breq	.+28     	; 0x1d88 <DIO_u8SetPinDir+0x66>
    1d6c:	d5 c0       	rjmp	.+426    	; 0x1f18 <DIO_u8SetPinDir+0x1f6>
    1d6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d70:	3e 81       	ldd	r19, Y+6	; 0x06
    1d72:	2a 30       	cpi	r18, 0x0A	; 10
    1d74:	31 05       	cpc	r19, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <DIO_u8SetPinDir+0x58>
    1d78:	6b c0       	rjmp	.+214    	; 0x1e50 <DIO_u8SetPinDir+0x12e>
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	8b 30       	cpi	r24, 0x0B	; 11
    1d80:	91 05       	cpc	r25, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <DIO_u8SetPinDir+0x64>
    1d84:	97 c0       	rjmp	.+302    	; 0x1eb4 <DIO_u8SetPinDir+0x192>
    1d86:	c8 c0       	rjmp	.+400    	; 0x1f18 <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	a1 f4       	brne	.+40     	; 0x1db6 <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
    1d8e:	aa e3       	ldi	r26, 0x3A	; 58
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ea e3       	ldi	r30, 0x3A	; 58
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <DIO_u8SetPinDir+0x8a>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <DIO_u8SetPinDir+0x86>
    1db0:	84 2b       	or	r24, r20
    1db2:	8c 93       	st	X, r24
    1db4:	b6 c0       	rjmp	.+364    	; 0x1f22 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	88 23       	and	r24, r24
    1dba:	a9 f4       	brne	.+42     	; 0x1de6 <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
    1dbc:	aa e3       	ldi	r26, 0x3A	; 58
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	ea e3       	ldi	r30, 0x3A	; 58
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	48 2f       	mov	r20, r24
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	02 2e       	mov	r0, r18
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <DIO_u8SetPinDir+0xb8>
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	0a 94       	dec	r0
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <DIO_u8SetPinDir+0xb4>
    1dde:	80 95       	com	r24
    1de0:	84 23       	and	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	9e c0       	rjmp	.+316    	; 0x1f22 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	9b c0       	rjmp	.+310    	; 0x1f22 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	a1 f4       	brne	.+40     	; 0x1e1a <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
    1df2:	a7 e3       	ldi	r26, 0x37	; 55
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e7 e3       	ldi	r30, 0x37	; 55
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_u8SetPinDir+0xee>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_u8SetPinDir+0xea>
    1e14:	84 2b       	or	r24, r20
    1e16:	8c 93       	st	X, r24
    1e18:	84 c0       	rjmp	.+264    	; 0x1f22 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	88 23       	and	r24, r24
    1e1e:	a9 f4       	brne	.+42     	; 0x1e4a <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
    1e20:	a7 e3       	ldi	r26, 0x37	; 55
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e7 e3       	ldi	r30, 0x37	; 55
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	48 2f       	mov	r20, r24
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	02 2e       	mov	r0, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <DIO_u8SetPinDir+0x11c>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	0a 94       	dec	r0
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <DIO_u8SetPinDir+0x118>
    1e42:	80 95       	com	r24
    1e44:	84 23       	and	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	6c c0       	rjmp	.+216    	; 0x1f22 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	69 c0       	rjmp	.+210    	; 0x1f22 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	a1 f4       	brne	.+40     	; 0x1e7e <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
    1e56:	a4 e3       	ldi	r26, 0x34	; 52
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e4 e3       	ldi	r30, 0x34	; 52
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <DIO_u8SetPinDir+0x152>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <DIO_u8SetPinDir+0x14e>
    1e78:	84 2b       	or	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	52 c0       	rjmp	.+164    	; 0x1f22 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	88 23       	and	r24, r24
    1e82:	a9 f4       	brne	.+42     	; 0x1eae <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
    1e84:	a4 e3       	ldi	r26, 0x34	; 52
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e4 e3       	ldi	r30, 0x34	; 52
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_u8SetPinDir+0x180>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_u8SetPinDir+0x17c>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	3a c0       	rjmp	.+116    	; 0x1f22 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	37 c0       	rjmp	.+110    	; 0x1f22 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	a1 f4       	brne	.+40     	; 0x1ee2 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
    1eba:	a1 e3       	ldi	r26, 0x31	; 49
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e1 e3       	ldi	r30, 0x31	; 49
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <DIO_u8SetPinDir+0x1b6>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <DIO_u8SetPinDir+0x1b2>
    1edc:	84 2b       	or	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	20 c0       	rjmp	.+64     	; 0x1f22 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	88 23       	and	r24, r24
    1ee6:	a9 f4       	brne	.+42     	; 0x1f12 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
    1ee8:	a1 e3       	ldi	r26, 0x31	; 49
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e1 e3       	ldi	r30, 0x31	; 49
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_u8SetPinDir+0x1e4>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_u8SetPinDir+0x1e0>
    1f0a:	80 95       	com	r24
    1f0c:	84 23       	and	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	08 c0       	rjmp	.+16     	; 0x1f22 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
    1f12:	83 e0       	ldi	r24, 0x03	; 3
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
    1f1e:	83 e0       	ldi	r24, 0x03	; 3
    1f20:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f24:	26 96       	adiw	r28, 0x06	; 6
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <DIO_u8SetPortVal+0x6>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <DIO_u8SetPortVal+0x8>
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	8a 83       	std	Y+2, r24	; 0x02
    1f46:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	3d 83       	std	Y+5, r19	; 0x05
    1f54:	2c 83       	std	Y+4, r18	; 0x04
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5a:	89 30       	cpi	r24, 0x09	; 9
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	d9 f0       	breq	.+54     	; 0x1f96 <DIO_u8SetPortVal+0x60>
    1f60:	2c 81       	ldd	r18, Y+4	; 0x04
    1f62:	3d 81       	ldd	r19, Y+5	; 0x05
    1f64:	2a 30       	cpi	r18, 0x0A	; 10
    1f66:	31 05       	cpc	r19, r1
    1f68:	34 f4       	brge	.+12     	; 0x1f76 <DIO_u8SetPortVal+0x40>
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	88 30       	cpi	r24, 0x08	; 8
    1f70:	91 05       	cpc	r25, r1
    1f72:	61 f0       	breq	.+24     	; 0x1f8c <DIO_u8SetPortVal+0x56>
    1f74:	1f c0       	rjmp	.+62     	; 0x1fb4 <DIO_u8SetPortVal+0x7e>
    1f76:	2c 81       	ldd	r18, Y+4	; 0x04
    1f78:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7a:	2a 30       	cpi	r18, 0x0A	; 10
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	81 f0       	breq	.+32     	; 0x1fa0 <DIO_u8SetPortVal+0x6a>
    1f80:	8c 81       	ldd	r24, Y+4	; 0x04
    1f82:	9d 81       	ldd	r25, Y+5	; 0x05
    1f84:	8b 30       	cpi	r24, 0x0B	; 11
    1f86:	91 05       	cpc	r25, r1
    1f88:	81 f0       	breq	.+32     	; 0x1faa <DIO_u8SetPortVal+0x74>
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
    1f8c:	eb e3       	ldi	r30, 0x3B	; 59
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	80 83       	st	Z, r24
    1f94:	11 c0       	rjmp	.+34     	; 0x1fb8 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
    1f96:	e8 e3       	ldi	r30, 0x38	; 56
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	80 83       	st	Z, r24
    1f9e:	0c c0       	rjmp	.+24     	; 0x1fb8 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
    1fa0:	e5 e3       	ldi	r30, 0x35	; 53
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	80 83       	st	Z, r24
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
    1faa:	e2 e3       	ldi	r30, 0x32	; 50
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	80 83       	st	Z, r24
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <DIO_u8SetPortDir+0x6>
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <DIO_u8SetPortDir+0x8>
    1fd2:	0f 92       	push	r0
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
    1fda:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	3d 83       	std	Y+5, r19	; 0x05
    1fe8:	2c 83       	std	Y+4, r18	; 0x04
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	89 30       	cpi	r24, 0x09	; 9
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	d9 f0       	breq	.+54     	; 0x202a <DIO_u8SetPortDir+0x60>
    1ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff8:	2a 30       	cpi	r18, 0x0A	; 10
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	34 f4       	brge	.+12     	; 0x200a <DIO_u8SetPortDir+0x40>
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	9d 81       	ldd	r25, Y+5	; 0x05
    2002:	88 30       	cpi	r24, 0x08	; 8
    2004:	91 05       	cpc	r25, r1
    2006:	61 f0       	breq	.+24     	; 0x2020 <DIO_u8SetPortDir+0x56>
    2008:	1f c0       	rjmp	.+62     	; 0x2048 <DIO_u8SetPortDir+0x7e>
    200a:	2c 81       	ldd	r18, Y+4	; 0x04
    200c:	3d 81       	ldd	r19, Y+5	; 0x05
    200e:	2a 30       	cpi	r18, 0x0A	; 10
    2010:	31 05       	cpc	r19, r1
    2012:	81 f0       	breq	.+32     	; 0x2034 <DIO_u8SetPortDir+0x6a>
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	8b 30       	cpi	r24, 0x0B	; 11
    201a:	91 05       	cpc	r25, r1
    201c:	81 f0       	breq	.+32     	; 0x203e <DIO_u8SetPortDir+0x74>
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
    2020:	ea e3       	ldi	r30, 0x3A	; 58
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	80 83       	st	Z, r24
    2028:	11 c0       	rjmp	.+34     	; 0x204c <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
    202a:	e7 e3       	ldi	r30, 0x37	; 55
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	80 83       	st	Z, r24
    2032:	0c c0       	rjmp	.+24     	; 0x204c <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
    2034:	e4 e3       	ldi	r30, 0x34	; 52
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	80 83       	st	Z, r24
    203c:	07 c0       	rjmp	.+14     	; 0x204c <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
    203e:	e1 e3       	ldi	r30, 0x31	; 49
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	80 83       	st	Z, r24
    2046:	02 c0       	rjmp	.+4      	; 0x204c <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
    204c:	89 81       	ldd	r24, Y+1	; 0x01
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	27 97       	sbiw	r28, 0x07	; 7
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	8a 83       	std	Y+2, r24	; 0x02
    2074:	6b 83       	std	Y+3, r22	; 0x03
    2076:	5d 83       	std	Y+5, r21	; 0x05
    2078:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	88 30       	cpi	r24, 0x08	; 8
    2082:	08 f0       	brcs	.+2      	; 0x2086 <DIO_u8GetPinVal+0x28>
    2084:	74 c0       	rjmp	.+232    	; 0x216e <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	3f 83       	std	Y+7, r19	; 0x07
    208e:	2e 83       	std	Y+6, r18	; 0x06
    2090:	4e 81       	ldd	r20, Y+6	; 0x06
    2092:	5f 81       	ldd	r21, Y+7	; 0x07
    2094:	49 30       	cpi	r20, 0x09	; 9
    2096:	51 05       	cpc	r21, r1
    2098:	59 f1       	breq	.+86     	; 0x20f0 <DIO_u8GetPinVal+0x92>
    209a:	8e 81       	ldd	r24, Y+6	; 0x06
    209c:	9f 81       	ldd	r25, Y+7	; 0x07
    209e:	8a 30       	cpi	r24, 0x0A	; 10
    20a0:	91 05       	cpc	r25, r1
    20a2:	34 f4       	brge	.+12     	; 0x20b0 <DIO_u8GetPinVal+0x52>
    20a4:	2e 81       	ldd	r18, Y+6	; 0x06
    20a6:	3f 81       	ldd	r19, Y+7	; 0x07
    20a8:	28 30       	cpi	r18, 0x08	; 8
    20aa:	31 05       	cpc	r19, r1
    20ac:	69 f0       	breq	.+26     	; 0x20c8 <DIO_u8GetPinVal+0x6a>
    20ae:	5c c0       	rjmp	.+184    	; 0x2168 <DIO_u8GetPinVal+0x10a>
    20b0:	4e 81       	ldd	r20, Y+6	; 0x06
    20b2:	5f 81       	ldd	r21, Y+7	; 0x07
    20b4:	4a 30       	cpi	r20, 0x0A	; 10
    20b6:	51 05       	cpc	r21, r1
    20b8:	79 f1       	breq	.+94     	; 0x2118 <DIO_u8GetPinVal+0xba>
    20ba:	8e 81       	ldd	r24, Y+6	; 0x06
    20bc:	9f 81       	ldd	r25, Y+7	; 0x07
    20be:	8b 30       	cpi	r24, 0x0B	; 11
    20c0:	91 05       	cpc	r25, r1
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <DIO_u8GetPinVal+0x68>
    20c4:	3d c0       	rjmp	.+122    	; 0x2140 <DIO_u8GetPinVal+0xe2>
    20c6:	50 c0       	rjmp	.+160    	; 0x2168 <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
    20c8:	e9 e3       	ldi	r30, 0x39	; 57
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	88 2f       	mov	r24, r24
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a9 01       	movw	r20, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <DIO_u8GetPinVal+0x82>
    20dc:	55 95       	asr	r21
    20de:	47 95       	ror	r20
    20e0:	8a 95       	dec	r24
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <DIO_u8GetPinVal+0x7e>
    20e4:	ca 01       	movw	r24, r20
    20e6:	81 70       	andi	r24, 0x01	; 1
    20e8:	ec 81       	ldd	r30, Y+4	; 0x04
    20ea:	fd 81       	ldd	r31, Y+5	; 0x05
    20ec:	80 83       	st	Z, r24
    20ee:	41 c0       	rjmp	.+130    	; 0x2172 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
    20f0:	e6 e3       	ldi	r30, 0x36	; 54
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a9 01       	movw	r20, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_u8GetPinVal+0xaa>
    2104:	55 95       	asr	r21
    2106:	47 95       	ror	r20
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_u8GetPinVal+0xa6>
    210c:	ca 01       	movw	r24, r20
    210e:	81 70       	andi	r24, 0x01	; 1
    2110:	ec 81       	ldd	r30, Y+4	; 0x04
    2112:	fd 81       	ldd	r31, Y+5	; 0x05
    2114:	80 83       	st	Z, r24
    2116:	2d c0       	rjmp	.+90     	; 0x2172 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
    2118:	e3 e3       	ldi	r30, 0x33	; 51
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	a9 01       	movw	r20, r18
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <DIO_u8GetPinVal+0xd2>
    212c:	55 95       	asr	r21
    212e:	47 95       	ror	r20
    2130:	8a 95       	dec	r24
    2132:	e2 f7       	brpl	.-8      	; 0x212c <DIO_u8GetPinVal+0xce>
    2134:	ca 01       	movw	r24, r20
    2136:	81 70       	andi	r24, 0x01	; 1
    2138:	ec 81       	ldd	r30, Y+4	; 0x04
    213a:	fd 81       	ldd	r31, Y+5	; 0x05
    213c:	80 83       	st	Z, r24
    213e:	19 c0       	rjmp	.+50     	; 0x2172 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
    2140:	e0 e3       	ldi	r30, 0x30	; 48
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a9 01       	movw	r20, r18
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <DIO_u8GetPinVal+0xfa>
    2154:	55 95       	asr	r21
    2156:	47 95       	ror	r20
    2158:	8a 95       	dec	r24
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <DIO_u8GetPinVal+0xf6>
    215c:	ca 01       	movw	r24, r20
    215e:	81 70       	andi	r24, 0x01	; 1
    2160:	ec 81       	ldd	r30, Y+4	; 0x04
    2162:	fd 81       	ldd	r31, Y+5	; 0x05
    2164:	80 83       	st	Z, r24
    2166:	05 c0       	rjmp	.+10     	; 0x2172 <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
    2172:	89 81       	ldd	r24, Y+1	; 0x01
}
    2174:	27 96       	adiw	r28, 0x07	; 7
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <DIO_u8GetPortVal+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <DIO_u8GetPortVal+0x8>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DIO_u8GetPortVal+0xa>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	8a 83       	std	Y+2, r24	; 0x02
    2196:	7c 83       	std	Y+4, r23	; 0x04
    2198:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3e 83       	std	Y+6, r19	; 0x06
    21a6:	2d 83       	std	Y+5, r18	; 0x05
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	89 30       	cpi	r24, 0x09	; 9
    21ae:	91 05       	cpc	r25, r1
    21b0:	e9 f0       	breq	.+58     	; 0x21ec <DIO_u8GetPortVal+0x66>
    21b2:	2d 81       	ldd	r18, Y+5	; 0x05
    21b4:	3e 81       	ldd	r19, Y+6	; 0x06
    21b6:	2a 30       	cpi	r18, 0x0A	; 10
    21b8:	31 05       	cpc	r19, r1
    21ba:	34 f4       	brge	.+12     	; 0x21c8 <DIO_u8GetPortVal+0x42>
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	91 05       	cpc	r25, r1
    21c4:	61 f0       	breq	.+24     	; 0x21de <DIO_u8GetPortVal+0x58>
    21c6:	27 c0       	rjmp	.+78     	; 0x2216 <DIO_u8GetPortVal+0x90>
    21c8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ca:	3e 81       	ldd	r19, Y+6	; 0x06
    21cc:	2a 30       	cpi	r18, 0x0A	; 10
    21ce:	31 05       	cpc	r19, r1
    21d0:	a1 f0       	breq	.+40     	; 0x21fa <DIO_u8GetPortVal+0x74>
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	8b 30       	cpi	r24, 0x0B	; 11
    21d8:	91 05       	cpc	r25, r1
    21da:	b1 f0       	breq	.+44     	; 0x2208 <DIO_u8GetPortVal+0x82>
    21dc:	1c c0       	rjmp	.+56     	; 0x2216 <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
    21de:	e9 e3       	ldi	r30, 0x39	; 57
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	eb 81       	ldd	r30, Y+3	; 0x03
    21e6:	fc 81       	ldd	r31, Y+4	; 0x04
    21e8:	80 83       	st	Z, r24
    21ea:	17 c0       	rjmp	.+46     	; 0x221a <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
    21ec:	e6 e3       	ldi	r30, 0x36	; 54
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	eb 81       	ldd	r30, Y+3	; 0x03
    21f4:	fc 81       	ldd	r31, Y+4	; 0x04
    21f6:	80 83       	st	Z, r24
    21f8:	10 c0       	rjmp	.+32     	; 0x221a <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
    21fa:	e3 e3       	ldi	r30, 0x33	; 51
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	eb 81       	ldd	r30, Y+3	; 0x03
    2202:	fc 81       	ldd	r31, Y+4	; 0x04
    2204:	80 83       	st	Z, r24
    2206:	09 c0       	rjmp	.+18     	; 0x221a <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
    2208:	e0 e3       	ldi	r30, 0x30	; 48
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	eb 81       	ldd	r30, Y+3	; 0x03
    2210:	fc 81       	ldd	r31, Y+4	; 0x04
    2212:	80 83       	st	Z, r24
    2214:	02 c0       	rjmp	.+4      	; 0x221a <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
    221a:	89 81       	ldd	r24, Y+1	; 0x01
}
    221c:	26 96       	adiw	r28, 0x06	; 6
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <DIO_u8TogPinVal+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <DIO_u8TogPinVal+0x8>
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	8a 83       	std	Y+2, r24	; 0x02
    223e:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
    2240:	82 e0       	ldi	r24, 0x02	; 2
    2242:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	88 30       	cpi	r24, 0x08	; 8
    2248:	08 f0       	brcs	.+2      	; 0x224c <DIO_u8TogPinVal+0x1e>
    224a:	73 c0       	rjmp	.+230    	; 0x2332 <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	3d 83       	std	Y+5, r19	; 0x05
    2254:	2c 83       	std	Y+4, r18	; 0x04
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	9d 81       	ldd	r25, Y+5	; 0x05
    225a:	89 30       	cpi	r24, 0x09	; 9
    225c:	91 05       	cpc	r25, r1
    225e:	51 f1       	breq	.+84     	; 0x22b4 <DIO_u8TogPinVal+0x86>
    2260:	2c 81       	ldd	r18, Y+4	; 0x04
    2262:	3d 81       	ldd	r19, Y+5	; 0x05
    2264:	2a 30       	cpi	r18, 0x0A	; 10
    2266:	31 05       	cpc	r19, r1
    2268:	34 f4       	brge	.+12     	; 0x2276 <DIO_u8TogPinVal+0x48>
    226a:	8c 81       	ldd	r24, Y+4	; 0x04
    226c:	9d 81       	ldd	r25, Y+5	; 0x05
    226e:	88 30       	cpi	r24, 0x08	; 8
    2270:	91 05       	cpc	r25, r1
    2272:	61 f0       	breq	.+24     	; 0x228c <DIO_u8TogPinVal+0x5e>
    2274:	5b c0       	rjmp	.+182    	; 0x232c <DIO_u8TogPinVal+0xfe>
    2276:	2c 81       	ldd	r18, Y+4	; 0x04
    2278:	3d 81       	ldd	r19, Y+5	; 0x05
    227a:	2a 30       	cpi	r18, 0x0A	; 10
    227c:	31 05       	cpc	r19, r1
    227e:	71 f1       	breq	.+92     	; 0x22dc <DIO_u8TogPinVal+0xae>
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
    2284:	8b 30       	cpi	r24, 0x0B	; 11
    2286:	91 05       	cpc	r25, r1
    2288:	e9 f1       	breq	.+122    	; 0x2304 <DIO_u8TogPinVal+0xd6>
    228a:	50 c0       	rjmp	.+160    	; 0x232c <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
    228c:	ab e3       	ldi	r26, 0x3B	; 59
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	eb e3       	ldi	r30, 0x3B	; 59
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	48 2f       	mov	r20, r24
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	02 2e       	mov	r0, r18
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <DIO_u8TogPinVal+0x7c>
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	0a 94       	dec	r0
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <DIO_u8TogPinVal+0x78>
    22ae:	84 27       	eor	r24, r20
    22b0:	8c 93       	st	X, r24
    22b2:	41 c0       	rjmp	.+130    	; 0x2336 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
    22b4:	a8 e3       	ldi	r26, 0x38	; 56
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e8 e3       	ldi	r30, 0x38	; 56
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	48 2f       	mov	r20, r24
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 2e       	mov	r0, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <DIO_u8TogPinVal+0xa4>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <DIO_u8TogPinVal+0xa0>
    22d6:	84 27       	eor	r24, r20
    22d8:	8c 93       	st	X, r24
    22da:	2d c0       	rjmp	.+90     	; 0x2336 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
    22dc:	a5 e3       	ldi	r26, 0x35	; 53
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e5 e3       	ldi	r30, 0x35	; 53
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <DIO_u8TogPinVal+0xcc>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <DIO_u8TogPinVal+0xc8>
    22fe:	84 27       	eor	r24, r20
    2300:	8c 93       	st	X, r24
    2302:	19 c0       	rjmp	.+50     	; 0x2336 <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
    2304:	a2 e3       	ldi	r26, 0x32	; 50
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e2 e3       	ldi	r30, 0x32	; 50
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	48 2f       	mov	r20, r24
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_u8TogPinVal+0xf4>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_u8TogPinVal+0xf0>
    2326:	84 27       	eor	r24, r20
    2328:	8c 93       	st	X, r24
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
    232c:	83 e0       	ldi	r24, 0x03	; 3
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
    2332:	83 e0       	ldi	r24, 0x03	; 3
    2334:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
    2336:	89 81       	ldd	r24, Y+1	; 0x01
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
    2350:	a0 e5       	ldi	r26, 0x50	; 80
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e0 e5       	ldi	r30, 0x50	; 80
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	84 60       	ori	r24, 0x04	; 4
    235c:	8c 93       	st	X, r24
}
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
    236c:	a0 e5       	ldi	r26, 0x50	; 80
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e0 e5       	ldi	r30, 0x50	; 80
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	8b 7f       	andi	r24, 0xFB	; 251
    2378:	8c 93       	st	X, r24
}
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <LED_voidInit>:
#include "../../LIBRARY/primitive_data_types.h"
#include "../../MCAL/DIO/dio_interface.h"
#include "led_interface.h"

void LED_voidInit(void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED0,u8_DIO_OUTPUT_PIN)          ;
    2388:	89 e0       	ldi	r24, 0x09	; 9
    238a:	64 e0       	ldi	r22, 0x04	; 4
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED1,u8_DIO_OUTPUT_PIN)          ;
    2392:	89 e0       	ldi	r24, 0x09	; 9
    2394:	65 e0       	ldi	r22, 0x05	; 5
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED2,u8_DIO_OUTPUT_PIN)          ;
    239c:	89 e0       	ldi	r24, 0x09	; 9
    239e:	66 e0       	ldi	r22, 0x06	; 6
    23a0:	41 e0       	ldi	r20, 0x01	; 1
    23a2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_LED_PORT,u8_LED3,u8_DIO_OUTPUT_PIN)          ;
    23a6:	89 e0       	ldi	r24, 0x09	; 9
    23a8:	67 e0       	ldi	r22, 0x07	; 7
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED0,u8_DIO_PIN_LOW)          ;
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	64 e0       	ldi	r22, 0x04	; 4
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED1,u8_DIO_PIN_LOW)          ;
    23ba:	89 e0       	ldi	r24, 0x09	; 9
    23bc:	65 e0       	ldi	r22, 0x05	; 5
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED2,u8_DIO_PIN_LOW)          ;
    23c4:	89 e0       	ldi	r24, 0x09	; 9
    23c6:	66 e0       	ldi	r22, 0x06	; 6
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_LED_PORT,u8_LED3,u8_DIO_PIN_LOW)          ;
    23ce:	89 e0       	ldi	r24, 0x09	; 9
    23d0:	67 e0       	ldi	r22, 0x07	; 7
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>


}
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <LED_u8On>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8On(uint8_t u8_LedNum) 
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <LED_u8On+0x6>
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
    23ea:	84 e0       	ldi	r24, 0x04	; 4
    23ec:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	88 30       	cpi	r24, 0x08	; 8
    23f2:	48 f4       	brcc	.+18     	; 0x2406 <LED_u8On+0x28>
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	84 30       	cpi	r24, 0x04	; 4
    23f8:	30 f0       	brcs	.+12     	; 0x2406 <LED_u8On+0x28>
	{ 
		DIO_u8SetPinVal(u8_LED_PORT,u8_LedNum,u8_LED_ON)    ;  
    23fa:	89 e0       	ldi	r24, 0x09	; 9
    23fc:	6a 81       	ldd	r22, Y+2	; 0x02
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
    2404:	02 c0       	rjmp	.+4      	; 0x240a <LED_u8On+0x2c>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
    2406:	85 e0       	ldi	r24, 0x05	; 5
    2408:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
    240a:	89 81       	ldd	r24, Y+1	; 0x01

}
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LED_u8Off>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8Off(uint8_t u8_LedNum)  
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <LED_u8Off+0x6>
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
    2422:	84 e0       	ldi	r24, 0x04	; 4
    2424:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	88 30       	cpi	r24, 0x08	; 8
    242a:	48 f4       	brcc	.+18     	; 0x243e <LED_u8Off+0x28>
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	84 30       	cpi	r24, 0x04	; 4
    2430:	30 f0       	brcs	.+12     	; 0x243e <LED_u8Off+0x28>
	{ 
		DIO_u8SetPinVal(u8_LED_PORT,u8_LedNum,u8_LED_OFF)    ;  
    2432:	89 e0       	ldi	r24, 0x09	; 9
    2434:	6a 81       	ldd	r22, Y+2	; 0x02
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <LED_u8Off+0x2c>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
    243e:	85 e0       	ldi	r24, 0x05	; 5
    2440:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
    2442:	89 81       	ldd	r24, Y+1	; 0x01

}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <LED_u8Tog>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t LED_u8Tog(uint8_t u8_LedNum)  
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <LED_u8Tog+0x6>
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_FlagError = u8_LED_OK ;
    245a:	84 e0       	ldi	r24, 0x04	; 4
    245c:	89 83       	std	Y+1, r24	; 0x01
	if(u8_LedNum<=u8_LED3 && u8_LedNum >= u8_LED0)
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	88 30       	cpi	r24, 0x08	; 8
    2462:	40 f4       	brcc	.+16     	; 0x2474 <LED_u8Tog+0x26>
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	84 30       	cpi	r24, 0x04	; 4
    2468:	28 f0       	brcs	.+10     	; 0x2474 <LED_u8Tog+0x26>
	{ 
		DIO_u8TogPinVal(u8_LED_PORT,u8_LedNum)    ;  
    246a:	89 e0       	ldi	r24, 0x09	; 9
    246c:	6a 81       	ldd	r22, Y+2	; 0x02
    246e:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_u8TogPinVal>
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <LED_u8Tog+0x2a>
	}
	else 
	{
		u8_FlagError = u8_LED_NOK ;
    2474:	85 e0       	ldi	r24, 0x05	; 5
    2476:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return u8_FlagError ; 
    2478:	89 81       	ldd	r24, Y+1	; 0x01

}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <LCD_u8Init>:

LCD_INIT_STATE_t LCD_stateInit = LCD_timer_Init ; 
LCD_SEND_COMMAND_STATE_t LCD_stateCommand = LCD_command_state1 ; 
LCD_SEND_DATA_STATE_t LCD_stateData = LCD_data_ready_state ;
uint8_t LCD_u8Init(void)
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <LCD_u8Init+0x6>
    248a:	00 d0       	rcall	.+0      	; 0x248c <LCD_u8Init+0x8>
    248c:	0f 92       	push	r0
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62

	uint8_t u8_timerState, u8_returnState =u8_LCD_OK ;
    2492:	85 e1       	ldi	r24, 0x15	; 21
    2494:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_commState ;
	static uint8_t u8_commFinished = u8_LCD_TRUE ;
	if(LCD_stateInit != LCD_initializing_finished)
    2496:	80 91 7e 00 	lds	r24, 0x007E
    249a:	8b 30       	cpi	r24, 0x0B	; 11
    249c:	09 f4       	brne	.+2      	; 0x24a0 <LCD_u8Init+0x1c>
    249e:	d5 c1       	rjmp	.+938    	; 0x284a <LCD_u8Init+0x3c6>
	{
		u8_returnState =u8_LCD_NOK ;
    24a0:	84 e1       	ldi	r24, 0x14	; 20
    24a2:	8a 83       	std	Y+2, r24	; 0x02

		switch(LCD_stateInit)
    24a4:	80 91 7e 00 	lds	r24, 0x007E
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	3d 83       	std	Y+5, r19	; 0x05
    24ae:	2c 83       	std	Y+4, r18	; 0x04
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	9d 81       	ldd	r25, Y+5	; 0x05
    24b4:	85 30       	cpi	r24, 0x05	; 5
    24b6:	91 05       	cpc	r25, r1
    24b8:	09 f4       	brne	.+2      	; 0x24bc <LCD_u8Init+0x38>
    24ba:	0c c1       	rjmp	.+536    	; 0x26d4 <LCD_u8Init+0x250>
    24bc:	2c 81       	ldd	r18, Y+4	; 0x04
    24be:	3d 81       	ldd	r19, Y+5	; 0x05
    24c0:	26 30       	cpi	r18, 0x06	; 6
    24c2:	31 05       	cpc	r19, r1
    24c4:	1c f5       	brge	.+70     	; 0x250c <LCD_u8Init+0x88>
    24c6:	8c 81       	ldd	r24, Y+4	; 0x04
    24c8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ca:	82 30       	cpi	r24, 0x02	; 2
    24cc:	91 05       	cpc	r25, r1
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <LCD_u8Init+0x4e>
    24d0:	95 c0       	rjmp	.+298    	; 0x25fc <LCD_u8Init+0x178>
    24d2:	2c 81       	ldd	r18, Y+4	; 0x04
    24d4:	3d 81       	ldd	r19, Y+5	; 0x05
    24d6:	23 30       	cpi	r18, 0x03	; 3
    24d8:	31 05       	cpc	r19, r1
    24da:	5c f4       	brge	.+22     	; 0x24f2 <LCD_u8Init+0x6e>
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	c9 f1       	breq	.+114    	; 0x2556 <LCD_u8Init+0xd2>
    24e4:	2c 81       	ldd	r18, Y+4	; 0x04
    24e6:	3d 81       	ldd	r19, Y+5	; 0x05
    24e8:	21 30       	cpi	r18, 0x01	; 1
    24ea:	31 05       	cpc	r19, r1
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <LCD_u8Init+0x6c>
    24ee:	62 c0       	rjmp	.+196    	; 0x25b4 <LCD_u8Init+0x130>
    24f0:	ac c1       	rjmp	.+856    	; 0x284a <LCD_u8Init+0x3c6>
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	83 30       	cpi	r24, 0x03	; 3
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <LCD_u8Init+0x7a>
    24fc:	a3 c0       	rjmp	.+326    	; 0x2644 <LCD_u8Init+0x1c0>
    24fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2500:	3d 81       	ldd	r19, Y+5	; 0x05
    2502:	24 30       	cpi	r18, 0x04	; 4
    2504:	31 05       	cpc	r19, r1
    2506:	09 f4       	brne	.+2      	; 0x250a <LCD_u8Init+0x86>
    2508:	c1 c0       	rjmp	.+386    	; 0x268c <LCD_u8Init+0x208>
    250a:	9f c1       	rjmp	.+830    	; 0x284a <LCD_u8Init+0x3c6>
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	9d 81       	ldd	r25, Y+5	; 0x05
    2510:	88 30       	cpi	r24, 0x08	; 8
    2512:	91 05       	cpc	r25, r1
    2514:	09 f4       	brne	.+2      	; 0x2518 <LCD_u8Init+0x94>
    2516:	4a c1       	rjmp	.+660    	; 0x27ac <LCD_u8Init+0x328>
    2518:	2c 81       	ldd	r18, Y+4	; 0x04
    251a:	3d 81       	ldd	r19, Y+5	; 0x05
    251c:	29 30       	cpi	r18, 0x09	; 9
    251e:	31 05       	cpc	r19, r1
    2520:	6c f4       	brge	.+26     	; 0x253c <LCD_u8Init+0xb8>
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	9d 81       	ldd	r25, Y+5	; 0x05
    2526:	86 30       	cpi	r24, 0x06	; 6
    2528:	91 05       	cpc	r25, r1
    252a:	09 f4       	brne	.+2      	; 0x252e <LCD_u8Init+0xaa>
    252c:	f7 c0       	rjmp	.+494    	; 0x271c <LCD_u8Init+0x298>
    252e:	2c 81       	ldd	r18, Y+4	; 0x04
    2530:	3d 81       	ldd	r19, Y+5	; 0x05
    2532:	27 30       	cpi	r18, 0x07	; 7
    2534:	31 05       	cpc	r19, r1
    2536:	09 f4       	brne	.+2      	; 0x253a <LCD_u8Init+0xb6>
    2538:	15 c1       	rjmp	.+554    	; 0x2764 <LCD_u8Init+0x2e0>
    253a:	87 c1       	rjmp	.+782    	; 0x284a <LCD_u8Init+0x3c6>
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	9d 81       	ldd	r25, Y+5	; 0x05
    2540:	89 30       	cpi	r24, 0x09	; 9
    2542:	91 05       	cpc	r25, r1
    2544:	09 f4       	brne	.+2      	; 0x2548 <LCD_u8Init+0xc4>
    2546:	55 c1       	rjmp	.+682    	; 0x27f2 <LCD_u8Init+0x36e>
    2548:	2c 81       	ldd	r18, Y+4	; 0x04
    254a:	3d 81       	ldd	r19, Y+5	; 0x05
    254c:	2a 30       	cpi	r18, 0x0A	; 10
    254e:	31 05       	cpc	r19, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <LCD_u8Init+0xd0>
    2552:	72 c1       	rjmp	.+740    	; 0x2838 <LCD_u8Init+0x3b4>
    2554:	7a c1       	rjmp	.+756    	; 0x284a <LCD_u8Init+0x3c6>
		{
			case LCD_timer_Init:
					TIMER0_voidInit();
    2556:	0e 94 49 00 	call	0x92	; 0x92 <TIMER0_voidInit>
					//intialing pins direction and values
					DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_RS,u8_DIO_OUTPUT_PIN) ;
    255a:	88 e0       	ldi	r24, 0x08	; 8
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
					DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_RW,u8_DIO_OUTPUT_PIN) ;
    2564:	88 e0       	ldi	r24, 0x08	; 8
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
					DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_E,u8_DIO_OUTPUT_PIN) ;
    256e:	88 e0       	ldi	r24, 0x08	; 8
    2570:	63 e0       	ldi	r22, 0x03	; 3
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
					DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D4,u8_DIO_OUTPUT_PIN) ;
    2578:	88 e0       	ldi	r24, 0x08	; 8
    257a:	64 e0       	ldi	r22, 0x04	; 4
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
					DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D5,u8_DIO_OUTPUT_PIN) ;
    2582:	88 e0       	ldi	r24, 0x08	; 8
    2584:	65 e0       	ldi	r22, 0x05	; 5
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
					DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D6,u8_DIO_OUTPUT_PIN) ;
    258c:	88 e0       	ldi	r24, 0x08	; 8
    258e:	66 e0       	ldi	r22, 0x06	; 6
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
					DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D7,u8_DIO_OUTPUT_PIN) ;
    2596:	88 e0       	ldi	r24, 0x08	; 8
    2598:	67 e0       	ldi	r22, 0x07	; 7
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
					TIMER0_u8InterruptWait(u8_LCD_INTIAL_1st_WAITING_TIME_MS);
    25a0:	62 e3       	ldi	r22, 0x32	; 50
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateInit = LCD_initialize_state1 ;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	80 93 7e 00 	sts	0x007E, r24
    25b2:	4b c1       	rjmp	.+662    	; 0x284a <LCD_u8Init+0x3c6>

					break ; 
			case LCD_initialize_state1:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    25b4:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    25b8:	8b 83       	std	Y+3, r24	; 0x03
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	8d 31       	cpi	r24, 0x1D	; 29
    25be:	69 f4       	brne	.+26     	; 0x25da <LCD_u8Init+0x156>
					{
						//INTIALIZING COMMANDS TO LCD
						u8_commState=LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND1) ;
    25c0:	83 e0       	ldi	r24, 0x03	; 3
    25c2:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    25c6:	89 83       	std	Y+1, r24	; 0x01
						if(u8_commState==u8_LCD_NOK)
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	84 31       	cpi	r24, 0x14	; 20
    25cc:	19 f4       	brne	.+6      	; 0x25d4 <LCD_u8Init+0x150>
						{
							u8_commFinished = u8_LCD_FALSE ;
    25ce:	10 92 65 00 	sts	0x0065, r1
    25d2:	03 c0       	rjmp	.+6      	; 0x25da <LCD_u8Init+0x156>
						}
						else
						{

							u8_commFinished = u8_LCD_TRUE ;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	80 93 65 00 	sts	0x0065, r24
						}

					}
					if(u8_commFinished == u8_LCD_TRUE)
    25da:	80 91 65 00 	lds	r24, 0x0065
    25de:	81 30       	cpi	r24, 0x01	; 1
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <LCD_u8Init+0x160>
    25e2:	33 c1       	rjmp	.+614    	; 0x284a <LCD_u8Init+0x3c6>
					{
						u8_commFinished = u8_LCD_FALSE ;
    25e4:	10 92 65 00 	sts	0x0065, r1
						LCD_stateInit = LCD_initialize_state2 ;
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    25ee:	6a e0       	ldi	r22, 0x0A	; 10
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
    25fa:	27 c1       	rjmp	.+590    	; 0x284a <LCD_u8Init+0x3c6>

					}
					break;
	
			case LCD_initialize_state2:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    25fc:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2600:	8b 83       	std	Y+3, r24	; 0x03
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	8d 31       	cpi	r24, 0x1D	; 29
    2606:	69 f4       	brne	.+26     	; 0x2622 <LCD_u8Init+0x19e>
					{
						    u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND1) ;
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    260e:	89 83       	std	Y+1, r24	; 0x01
							if(u8_commState==u8_LCD_NOK)
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	84 31       	cpi	r24, 0x14	; 20
    2614:	19 f4       	brne	.+6      	; 0x261c <LCD_u8Init+0x198>
							{
								u8_commFinished = u8_LCD_FALSE ;
    2616:	10 92 65 00 	sts	0x0065, r1
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <LCD_u8Init+0x19e>
							}
							else
							{
								u8_commFinished = u8_LCD_TRUE ;
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	80 93 65 00 	sts	0x0065, r24
							}

					}
					if(u8_commFinished == u8_LCD_TRUE)
    2622:	80 91 65 00 	lds	r24, 0x0065
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	09 f0       	breq	.+2      	; 0x262c <LCD_u8Init+0x1a8>
    262a:	0f c1       	rjmp	.+542    	; 0x284a <LCD_u8Init+0x3c6>
					{

						LCD_stateInit = LCD_initialize_state3 ;
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2632:	6a e0       	ldi	r22, 0x0A	; 10
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    263e:	10 92 65 00 	sts	0x0065, r1
    2642:	03 c1       	rjmp	.+518    	; 0x284a <LCD_u8Init+0x3c6>

					}
					break;
	
			case LCD_initialize_state3:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2644:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2648:	8b 83       	std	Y+3, r24	; 0x03
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	8d 31       	cpi	r24, 0x1D	; 29
    264e:	69 f4       	brne	.+26     	; 0x266a <LCD_u8Init+0x1e6>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND1) ;
    2650:	83 e0       	ldi	r24, 0x03	; 3
    2652:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    2656:	89 83       	std	Y+1, r24	; 0x01

						if(u8_commState==u8_LCD_NOK)
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	84 31       	cpi	r24, 0x14	; 20
    265c:	19 f4       	brne	.+6      	; 0x2664 <LCD_u8Init+0x1e0>
						{
							u8_commFinished = u8_LCD_FALSE ;
    265e:	10 92 65 00 	sts	0x0065, r1
    2662:	03 c0       	rjmp	.+6      	; 0x266a <LCD_u8Init+0x1e6>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	80 93 65 00 	sts	0x0065, r24
						}
					}

					if(u8_commFinished == u8_LCD_TRUE)
    266a:	80 91 65 00 	lds	r24, 0x0065
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	09 f0       	breq	.+2      	; 0x2674 <LCD_u8Init+0x1f0>
    2672:	eb c0       	rjmp	.+470    	; 0x284a <LCD_u8Init+0x3c6>
					{
						LCD_stateInit = LCD_initialize_state4 ;
    2674:	84 e0       	ldi	r24, 0x04	; 4
    2676:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    267a:	6a e0       	ldi	r22, 0x0A	; 10
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    2686:	10 92 65 00 	sts	0x0065, r1
    268a:	df c0       	rjmp	.+446    	; 0x284a <LCD_u8Init+0x3c6>

					}
					break;
	
			case LCD_initialize_state4:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    268c:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2690:	8b 83       	std	Y+3, r24	; 0x03
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	8d 31       	cpi	r24, 0x1D	; 29
    2696:	69 f4       	brne	.+26     	; 0x26b2 <LCD_u8Init+0x22e>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND2) ;
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    269e:	89 83       	std	Y+1, r24	; 0x01
						if(u8_commState==u8_LCD_NOK)
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	84 31       	cpi	r24, 0x14	; 20
    26a4:	19 f4       	brne	.+6      	; 0x26ac <LCD_u8Init+0x228>
						{
							u8_commFinished = u8_LCD_FALSE ;
    26a6:	10 92 65 00 	sts	0x0065, r1
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <LCD_u8Init+0x22e>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	80 93 65 00 	sts	0x0065, r24
						}

					}

					if(u8_commFinished == u8_LCD_TRUE)
    26b2:	80 91 65 00 	lds	r24, 0x0065
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	09 f0       	breq	.+2      	; 0x26bc <LCD_u8Init+0x238>
    26ba:	c7 c0       	rjmp	.+398    	; 0x284a <LCD_u8Init+0x3c6>
					{
						LCD_stateInit = LCD_initialize_state5 ;
    26bc:	85 e0       	ldi	r24, 0x05	; 5
    26be:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    26c2:	6a e0       	ldi	r22, 0x0A	; 10
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    26ce:	10 92 65 00 	sts	0x0065, r1
    26d2:	bb c0       	rjmp	.+374    	; 0x284a <LCD_u8Init+0x3c6>
					}
					break;
	
			case LCD_initialize_state5:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    26d4:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    26d8:	8b 83       	std	Y+3, r24	; 0x03
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	8d 31       	cpi	r24, 0x1D	; 29
    26de:	69 f4       	brne	.+26     	; 0x26fa <LCD_u8Init+0x276>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_SINGLE_LINE_DIS_COM) ;
    26e0:	80 e2       	ldi	r24, 0x20	; 32
    26e2:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    26e6:	89 83       	std	Y+1, r24	; 0x01
						if(u8_commState==u8_LCD_NOK)
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	84 31       	cpi	r24, 0x14	; 20
    26ec:	19 f4       	brne	.+6      	; 0x26f4 <LCD_u8Init+0x270>
						{
							u8_commFinished = u8_LCD_FALSE ;
    26ee:	10 92 65 00 	sts	0x0065, r1
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <LCD_u8Init+0x276>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	80 93 65 00 	sts	0x0065, r24
						}

					}

					if(u8_commFinished == u8_LCD_TRUE)
    26fa:	80 91 65 00 	lds	r24, 0x0065
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	09 f0       	breq	.+2      	; 0x2704 <LCD_u8Init+0x280>
    2702:	a3 c0       	rjmp	.+326    	; 0x284a <LCD_u8Init+0x3c6>
					{
						LCD_stateInit = LCD_initialize_state6 ;
    2704:	86 e0       	ldi	r24, 0x06	; 6
    2706:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    270a:	6a e0       	ldi	r22, 0x0A	; 10
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    2716:	10 92 65 00 	sts	0x0065, r1
    271a:	97 c0       	rjmp	.+302    	; 0x284a <LCD_u8Init+0x3c6>

					}
					break;
	
			case LCD_initialize_state6:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    271c:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2720:	8b 83       	std	Y+3, r24	; 0x03
	
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	8d 31       	cpi	r24, 0x1D	; 29
    2726:	69 f4       	brne	.+26     	; 0x2742 <LCD_u8Init+0x2be>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND4) ;
    2728:	88 e0       	ldi	r24, 0x08	; 8
    272a:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    272e:	89 83       	std	Y+1, r24	; 0x01
						if(u8_commState==u8_LCD_NOK)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	84 31       	cpi	r24, 0x14	; 20
    2734:	19 f4       	brne	.+6      	; 0x273c <LCD_u8Init+0x2b8>
						{
							u8_commFinished = u8_LCD_FALSE ;
    2736:	10 92 65 00 	sts	0x0065, r1
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <LCD_u8Init+0x2be>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	80 93 65 00 	sts	0x0065, r24
						}
					}

					if(u8_commFinished == u8_LCD_TRUE)
    2742:	80 91 65 00 	lds	r24, 0x0065
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	09 f0       	breq	.+2      	; 0x274c <LCD_u8Init+0x2c8>
    274a:	7f c0       	rjmp	.+254    	; 0x284a <LCD_u8Init+0x3c6>
					{
						LCD_stateInit = LCD_initialize_state7 ;
    274c:	87 e0       	ldi	r24, 0x07	; 7
    274e:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2752:	6a e0       	ldi	r22, 0x0A	; 10
    2754:	70 e0       	ldi	r23, 0x00	; 0
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    275e:	10 92 65 00 	sts	0x0065, r1
    2762:	73 c0       	rjmp	.+230    	; 0x284a <LCD_u8Init+0x3c6>

					}
					break;
	
			case LCD_initialize_state7:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2764:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2768:	8b 83       	std	Y+3, r24	; 0x03
	
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	8d 31       	cpi	r24, 0x1D	; 29
    276e:	69 f4       	brne	.+26     	; 0x278a <LCD_u8Init+0x306>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND5) ;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    2776:	89 83       	std	Y+1, r24	; 0x01

						if(u8_commState==u8_LCD_NOK)
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	84 31       	cpi	r24, 0x14	; 20
    277c:	19 f4       	brne	.+6      	; 0x2784 <LCD_u8Init+0x300>
						{
							u8_commFinished = u8_LCD_FALSE ;
    277e:	10 92 65 00 	sts	0x0065, r1
    2782:	03 c0       	rjmp	.+6      	; 0x278a <LCD_u8Init+0x306>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	80 93 65 00 	sts	0x0065, r24
						}


					}

					if  (u8_commFinished == u8_LCD_TRUE)
    278a:	80 91 65 00 	lds	r24, 0x0065
    278e:	81 30       	cpi	r24, 0x01	; 1
    2790:	09 f0       	breq	.+2      	; 0x2794 <LCD_u8Init+0x310>
    2792:	5b c0       	rjmp	.+182    	; 0x284a <LCD_u8Init+0x3c6>
					{
						LCD_stateInit = LCD_initialize_state8 ;
    2794:	88 e0       	ldi	r24, 0x08	; 8
    2796:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    279a:	6a e0       	ldi	r22, 0x0A	; 10
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    27a6:	10 92 65 00 	sts	0x0065, r1
    27aa:	4f c0       	rjmp	.+158    	; 0x284a <LCD_u8Init+0x3c6>

					}
					break;
	
			case LCD_initialize_state8:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    27ac:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    27b0:	8b 83       	std	Y+3, r24	; 0x03
	
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	8d 31       	cpi	r24, 0x1D	; 29
    27b6:	69 f4       	brne	.+26     	; 0x27d2 <LCD_u8Init+0x34e>
					{
						u8_commState = LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND6) ;
    27b8:	86 e0       	ldi	r24, 0x06	; 6
    27ba:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    27be:	89 83       	std	Y+1, r24	; 0x01

						if(u8_commState==u8_LCD_NOK)
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	84 31       	cpi	r24, 0x14	; 20
    27c4:	19 f4       	brne	.+6      	; 0x27cc <LCD_u8Init+0x348>
						{
							u8_commFinished = u8_LCD_FALSE ;
    27c6:	10 92 65 00 	sts	0x0065, r1
    27ca:	03 c0       	rjmp	.+6      	; 0x27d2 <LCD_u8Init+0x34e>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 65 00 	sts	0x0065, r24
						}

					}

					if(u8_commFinished == u8_LCD_TRUE)
    27d2:	80 91 65 00 	lds	r24, 0x0065
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	c1 f5       	brne	.+112    	; 0x284a <LCD_u8Init+0x3c6>
					{
						LCD_stateInit = LCD_initialize_state9 ;
    27da:	89 e0       	ldi	r24, 0x09	; 9
    27dc:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    27e0:	6a e0       	ldi	r22, 0x0A	; 10
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    27ec:	10 92 65 00 	sts	0x0065, r1
    27f0:	2c c0       	rjmp	.+88     	; 0x284a <LCD_u8Init+0x3c6>
					}
						
					break;
	
			case LCD_initialize_state9:
					u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    27f2:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    27f6:	8b 83       	std	Y+3, r24	; 0x03
					if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	8d 31       	cpi	r24, 0x1D	; 29
    27fc:	69 f4       	brne	.+26     	; 0x2818 <LCD_u8Init+0x394>
					{
						u8_commState=LCD_u8sendCommand(u8_LCD_INTIALIZING_COMMAND7) ;
    27fe:	8c e0       	ldi	r24, 0x0C	; 12
    2800:	0e 94 2e 14 	call	0x285c	; 0x285c <LCD_u8sendCommand>
    2804:	89 83       	std	Y+1, r24	; 0x01

						if(u8_commState==u8_LCD_NOK)
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	84 31       	cpi	r24, 0x14	; 20
    280a:	19 f4       	brne	.+6      	; 0x2812 <LCD_u8Init+0x38e>
						{
							u8_commFinished = u8_LCD_FALSE ;
    280c:	10 92 65 00 	sts	0x0065, r1
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <LCD_u8Init+0x394>
						}
						else
						{
							u8_commFinished = u8_LCD_TRUE ;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	80 93 65 00 	sts	0x0065, r24
						}

					}

					if (u8_commFinished == u8_LCD_TRUE)
    2818:	80 91 65 00 	lds	r24, 0x0065
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	a9 f4       	brne	.+42     	; 0x284a <LCD_u8Init+0x3c6>
					{
						LCD_stateInit = LCD_initialize_state10 ;
    2820:	8a e0       	ldi	r24, 0x0A	; 10
    2822:	80 93 7e 00 	sts	0x007E, r24
						TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2826:	6a e0       	ldi	r22, 0x0A	; 10
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
						u8_commFinished = u8_LCD_FALSE ;
    2832:	10 92 65 00 	sts	0x0065, r1
    2836:	09 c0       	rjmp	.+18     	; 0x284a <LCD_u8Init+0x3c6>
					}
						
					break;
	
			case LCD_initialize_state10:
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;
    2838:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    283c:	8b 83       	std	Y+3, r24	; 0x03
				if((u8_timerState==u8_FINISH_INTERRUPT_WAITING))
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	8d 31       	cpi	r24, 0x1D	; 29
    2842:	19 f4       	brne	.+6      	; 0x284a <LCD_u8Init+0x3c6>
				{
					LCD_stateInit = LCD_initializing_finished ;
    2844:	8b e0       	ldi	r24, 0x0B	; 11
    2846:	80 93 7e 00 	sts	0x007E, r24
				break ;
		}
	}
	
	
	return u8_returnState ; 
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <LCD_u8sendCommand>:


/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendCommand(uint8_t u8_WantedCommand)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <LCD_u8sendCommand+0x6>
    2862:	00 d0       	rcall	.+0      	; 0x2864 <LCD_u8sendCommand+0x8>
    2864:	0f 92       	push	r0
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_returnState = u8_LCD_NOK ,u8_timerState ;
    286c:	84 e1       	ldi	r24, 0x14	; 20
    286e:	8a 83       	std	Y+2, r24	; 0x02
	if(LCD_stateData == LCD_data_ready_state )
    2870:	80 91 64 00 	lds	r24, 0x0064
    2874:	85 30       	cpi	r24, 0x05	; 5
    2876:	09 f0       	breq	.+2      	; 0x287a <LCD_u8sendCommand+0x1e>
    2878:	eb c0       	rjmp	.+470    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
	{
		if(LCD_stateCommand == LCD_command_ready_state)
    287a:	80 91 7f 00 	lds	r24, 0x007F
    287e:	85 30       	cpi	r24, 0x05	; 5
    2880:	11 f4       	brne	.+4      	; 0x2886 <LCD_u8sendCommand+0x2a>
		{
			LCD_stateCommand = LCD_command_state1 ; 
    2882:	10 92 7f 00 	sts	0x007F, r1
		}
	
		switch(LCD_stateCommand)
    2886:	80 91 7f 00 	lds	r24, 0x007F
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	3d 83       	std	Y+5, r19	; 0x05
    2890:	2c 83       	std	Y+4, r18	; 0x04
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	9d 81       	ldd	r25, Y+5	; 0x05
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	91 05       	cpc	r25, r1
    289a:	09 f4       	brne	.+2      	; 0x289e <LCD_u8sendCommand+0x42>
    289c:	7d c0       	rjmp	.+250    	; 0x2998 <LCD_u8sendCommand+0x13c>
    289e:	2c 81       	ldd	r18, Y+4	; 0x04
    28a0:	3d 81       	ldd	r19, Y+5	; 0x05
    28a2:	23 30       	cpi	r18, 0x03	; 3
    28a4:	31 05       	cpc	r19, r1
    28a6:	54 f4       	brge	.+20     	; 0x28bc <LCD_u8sendCommand+0x60>
    28a8:	8c 81       	ldd	r24, Y+4	; 0x04
    28aa:	9d 81       	ldd	r25, Y+5	; 0x05
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	99 f0       	breq	.+38     	; 0x28d6 <LCD_u8sendCommand+0x7a>
    28b0:	2c 81       	ldd	r18, Y+4	; 0x04
    28b2:	3d 81       	ldd	r19, Y+5	; 0x05
    28b4:	21 30       	cpi	r18, 0x01	; 1
    28b6:	31 05       	cpc	r19, r1
    28b8:	71 f1       	breq	.+92     	; 0x2916 <LCD_u8sendCommand+0xba>
    28ba:	ca c0       	rjmp	.+404    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
    28bc:	8c 81       	ldd	r24, Y+4	; 0x04
    28be:	9d 81       	ldd	r25, Y+5	; 0x05
    28c0:	83 30       	cpi	r24, 0x03	; 3
    28c2:	91 05       	cpc	r25, r1
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <LCD_u8sendCommand+0x6c>
    28c6:	a4 c0       	rjmp	.+328    	; 0x2a10 <LCD_u8sendCommand+0x1b4>
    28c8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ca:	3d 81       	ldd	r19, Y+5	; 0x05
    28cc:	24 30       	cpi	r18, 0x04	; 4
    28ce:	31 05       	cpc	r19, r1
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <LCD_u8sendCommand+0x78>
    28d2:	b3 c0       	rjmp	.+358    	; 0x2a3a <LCD_u8sendCommand+0x1de>
    28d4:	bd c0       	rjmp	.+378    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
		{
			case LCD_command_state1:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    28d6:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    28da:	89 83       	std	Y+1, r24	; 0x01

				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	8d 31       	cpi	r24, 0x1D	; 29
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <LCD_u8sendCommand+0x88>
    28e2:	b6 c0       	rjmp	.+364    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				{
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    28e4:	88 e0       	ldi	r24, 0x08	; 8
    28e6:	63 e0       	ldi	r22, 0x03	; 3
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RS,u8_DIO_PIN_LOW) ;
    28ee:	88 e0       	ldi	r24, 0x08	; 8
    28f0:	61 e0       	ldi	r22, 0x01	; 1
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RW,u8_DIO_PIN_LOW) ;
    28f8:	88 e0       	ldi	r24, 0x08	; 8
    28fa:	62 e0       	ldi	r22, 0x02	; 2
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					/*SETTING HIGHER SIGNIFICANT BITS */
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2902:	6a e0       	ldi	r22, 0x0A	; 10
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state2 ;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	80 93 7f 00 	sts	0x007F, r24
    2914:	9d c0       	rjmp	.+314    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				}
				break ; 
					
			case LCD_command_state2:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2916:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    291a:	89 83       	std	Y+1, r24	; 0x01
				
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	8d 31       	cpi	r24, 0x1D	; 29
    2920:	09 f0       	breq	.+2      	; 0x2924 <LCD_u8sendCommand+0xc8>
    2922:	96 c0       	rjmp	.+300    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				{
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D7_BIT));
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	98 2f       	mov	r25, r24
    2928:	99 1f       	adc	r25, r25
    292a:	99 27       	eor	r25, r25
    292c:	99 1f       	adc	r25, r25
    292e:	88 e0       	ldi	r24, 0x08	; 8
    2930:	67 e0       	ldi	r22, 0x07	; 7
    2932:	49 2f       	mov	r20, r25
    2934:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D6_BIT));
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	82 95       	swap	r24
    293c:	86 95       	lsr	r24
    293e:	86 95       	lsr	r24
    2940:	83 70       	andi	r24, 0x03	; 3
    2942:	98 2f       	mov	r25, r24
    2944:	91 70       	andi	r25, 0x01	; 1
    2946:	88 e0       	ldi	r24, 0x08	; 8
    2948:	66 e0       	ldi	r22, 0x06	; 6
    294a:	49 2f       	mov	r20, r25
    294c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D5_BIT)) ;
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	82 95       	swap	r24
    2954:	86 95       	lsr	r24
    2956:	87 70       	andi	r24, 0x07	; 7
    2958:	98 2f       	mov	r25, r24
    295a:	91 70       	andi	r25, 0x01	; 1
    295c:	88 e0       	ldi	r24, 0x08	; 8
    295e:	65 e0       	ldi	r22, 0x05	; 5
    2960:	49 2f       	mov	r20, r25
    2962:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D4_BIT)) ;
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	82 95       	swap	r24
    296a:	8f 70       	andi	r24, 0x0F	; 15
    296c:	98 2f       	mov	r25, r24
    296e:	91 70       	andi	r25, 0x01	; 1
    2970:	88 e0       	ldi	r24, 0x08	; 8
    2972:	64 e0       	ldi	r22, 0x04	; 4
    2974:	49 2f       	mov	r20, r25
    2976:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    297a:	88 e0       	ldi	r24, 0x08	; 8
    297c:	63 e0       	ldi	r22, 0x03	; 3
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2984:	6a e0       	ldi	r22, 0x0A	; 10
    2986:	70 e0       	ldi	r23, 0x00	; 0
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state3 ; 
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	80 93 7f 00 	sts	0x007F, r24
    2996:	5c c0       	rjmp	.+184    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				}
				break ; 
				
			case LCD_command_state3:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2998:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    299c:	89 83       	std	Y+1, r24	; 0x01
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	8d 31       	cpi	r24, 0x1D	; 29
    29a2:	09 f0       	breq	.+2      	; 0x29a6 <LCD_u8sendCommand+0x14a>
    29a4:	55 c0       	rjmp	.+170    	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				{
					/*SETTING LOWER SIGNIFICANT BITS */
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    29a6:	88 e0       	ldi	r24, 0x08	; 8
    29a8:	63 e0       	ldi	r22, 0x03	; 3
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D3_BIT));
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	86 95       	lsr	r24
    29b4:	86 95       	lsr	r24
    29b6:	86 95       	lsr	r24
    29b8:	98 2f       	mov	r25, r24
    29ba:	91 70       	andi	r25, 0x01	; 1
    29bc:	88 e0       	ldi	r24, 0x08	; 8
    29be:	67 e0       	ldi	r22, 0x07	; 7
    29c0:	49 2f       	mov	r20, r25
    29c2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D2_BIT));
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	86 95       	lsr	r24
    29ca:	86 95       	lsr	r24
    29cc:	98 2f       	mov	r25, r24
    29ce:	91 70       	andi	r25, 0x01	; 1
    29d0:	88 e0       	ldi	r24, 0x08	; 8
    29d2:	66 e0       	ldi	r22, 0x06	; 6
    29d4:	49 2f       	mov	r20, r25
    29d6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D1_BIT)) ;
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	86 95       	lsr	r24
    29de:	98 2f       	mov	r25, r24
    29e0:	91 70       	andi	r25, 0x01	; 1
    29e2:	88 e0       	ldi	r24, 0x08	; 8
    29e4:	65 e0       	ldi	r22, 0x05	; 5
    29e6:	49 2f       	mov	r20, r25
    29e8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D0_BIT)) ;
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	98 2f       	mov	r25, r24
    29f0:	91 70       	andi	r25, 0x01	; 1
    29f2:	88 e0       	ldi	r24, 0x08	; 8
    29f4:	64 e0       	ldi	r22, 0x04	; 4
    29f6:	49 2f       	mov	r20, r25
    29f8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    29fc:	6a e0       	ldi	r22, 0x0A	; 10
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state4 ; 
    2a08:	83 e0       	ldi	r24, 0x03	; 3
    2a0a:	80 93 7f 00 	sts	0x007F, r24
    2a0e:	20 c0       	rjmp	.+64     	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				}
				break ; 
			
			case LCD_command_state4:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2a10:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2a14:	89 83       	std	Y+1, r24	; 0x01
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	8d 31       	cpi	r24, 0x1D	; 29
    2a1a:	d1 f4       	brne	.+52     	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				{
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    2a1c:	88 e0       	ldi	r24, 0x08	; 8
    2a1e:	63 e0       	ldi	r22, 0x03	; 3
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2a26:	6a e0       	ldi	r22, 0x0A	; 10
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateCommand = LCD_command_state5 ; 
    2a32:	84 e0       	ldi	r24, 0x04	; 4
    2a34:	80 93 7f 00 	sts	0x007F, r24
    2a38:	0b c0       	rjmp	.+22     	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				}
				break ; 
			case LCD_command_state5:
				
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2a3a:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2a3e:	89 83       	std	Y+1, r24	; 0x01
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	8d 31       	cpi	r24, 0x1D	; 29
    2a44:	29 f4       	brne	.+10     	; 0x2a50 <LCD_u8sendCommand+0x1f4>
				{
					LCD_stateCommand = LCD_command_ready_state ;
    2a46:	85 e0       	ldi	r24, 0x05	; 5
    2a48:	80 93 7f 00 	sts	0x007F, r24
					u8_returnState = u8_LCD_OK ;
    2a4c:	85 e1       	ldi	r24, 0x15	; 21
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
			default:
				break ;
		}
	}

	return u8_returnState ; 
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <LCD_u8sendData>:
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
 uint8_t LCD_u8sendData(uint8_t u8_WantedData)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <LCD_u8sendData+0x6>
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <LCD_u8sendData+0x8>
    2a6a:	0f 92       	push	r0
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_returnState = u8_NOK ,u8_timerState ; 
    2a72:	1a 82       	std	Y+2, r1	; 0x02
	if(LCD_stateCommand == LCD_command_ready_state && LCD_stateInit == LCD_initializing_finished)
    2a74:	80 91 7f 00 	lds	r24, 0x007F
    2a78:	85 30       	cpi	r24, 0x05	; 5
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <LCD_u8sendData+0x1c>
    2a7c:	f0 c0       	rjmp	.+480    	; 0x2c5e <LCD_u8sendData+0x1fc>
    2a7e:	80 91 7e 00 	lds	r24, 0x007E
    2a82:	8b 30       	cpi	r24, 0x0B	; 11
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <LCD_u8sendData+0x26>
    2a86:	eb c0       	rjmp	.+470    	; 0x2c5e <LCD_u8sendData+0x1fc>
	{
		if(LCD_stateData == LCD_data_ready_state)
    2a88:	80 91 64 00 	lds	r24, 0x0064
    2a8c:	85 30       	cpi	r24, 0x05	; 5
    2a8e:	11 f4       	brne	.+4      	; 0x2a94 <LCD_u8sendData+0x32>
		{
			LCD_stateData = LCD_data_state1 ; 
    2a90:	10 92 64 00 	sts	0x0064, r1
		}
	
		switch(LCD_stateData)
    2a94:	80 91 64 00 	lds	r24, 0x0064
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	3d 83       	std	Y+5, r19	; 0x05
    2a9e:	2c 83       	std	Y+4, r18	; 0x04
    2aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <LCD_u8sendData+0x4a>
    2aaa:	7d c0       	rjmp	.+250    	; 0x2ba6 <LCD_u8sendData+0x144>
    2aac:	2c 81       	ldd	r18, Y+4	; 0x04
    2aae:	3d 81       	ldd	r19, Y+5	; 0x05
    2ab0:	23 30       	cpi	r18, 0x03	; 3
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	54 f4       	brge	.+20     	; 0x2aca <LCD_u8sendData+0x68>
    2ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	99 f0       	breq	.+38     	; 0x2ae4 <LCD_u8sendData+0x82>
    2abe:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac2:	21 30       	cpi	r18, 0x01	; 1
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	71 f1       	breq	.+92     	; 0x2b24 <LCD_u8sendData+0xc2>
    2ac8:	ca c0       	rjmp	.+404    	; 0x2c5e <LCD_u8sendData+0x1fc>
    2aca:	8c 81       	ldd	r24, Y+4	; 0x04
    2acc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ace:	83 30       	cpi	r24, 0x03	; 3
    2ad0:	91 05       	cpc	r25, r1
    2ad2:	09 f4       	brne	.+2      	; 0x2ad6 <LCD_u8sendData+0x74>
    2ad4:	a4 c0       	rjmp	.+328    	; 0x2c1e <LCD_u8sendData+0x1bc>
    2ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    2ada:	24 30       	cpi	r18, 0x04	; 4
    2adc:	31 05       	cpc	r19, r1
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <LCD_u8sendData+0x80>
    2ae0:	b3 c0       	rjmp	.+358    	; 0x2c48 <LCD_u8sendData+0x1e6>
    2ae2:	bd c0       	rjmp	.+378    	; 0x2c5e <LCD_u8sendData+0x1fc>
		{
			case LCD_data_state1:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2ae4:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2ae8:	89 83       	std	Y+1, r24	; 0x01
				
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	8d 31       	cpi	r24, 0x1D	; 29
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <LCD_u8sendData+0x90>
    2af0:	b6 c0       	rjmp	.+364    	; 0x2c5e <LCD_u8sendData+0x1fc>
				{
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    2af2:	88 e0       	ldi	r24, 0x08	; 8
    2af4:	63 e0       	ldi	r22, 0x03	; 3
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RS,u8_DIO_PIN_HIGH) ;
    2afc:	88 e0       	ldi	r24, 0x08	; 8
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RW,u8_DIO_PIN_LOW) ;
    2b06:	88 e0       	ldi	r24, 0x08	; 8
    2b08:	62 e0       	ldi	r22, 0x02	; 2
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					/*SETTING HIGHER SIGNIFICANT BITS */
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2b10:	6a e0       	ldi	r22, 0x0A	; 10
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state2 ; 
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	80 93 64 00 	sts	0x0064, r24
    2b22:	9d c0       	rjmp	.+314    	; 0x2c5e <LCD_u8sendData+0x1fc>
				}
				break ; 
					
			case LCD_data_state2:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2b24:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2b28:	89 83       	std	Y+1, r24	; 0x01
				
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	8d 31       	cpi	r24, 0x1D	; 29
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <LCD_u8sendData+0xd0>
    2b30:	96 c0       	rjmp	.+300    	; 0x2c5e <LCD_u8sendData+0x1fc>
				{
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedData,u8_LCD_D7_BIT));
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	98 2f       	mov	r25, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	99 27       	eor	r25, r25
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	88 e0       	ldi	r24, 0x08	; 8
    2b3e:	67 e0       	ldi	r22, 0x07	; 7
    2b40:	49 2f       	mov	r20, r25
    2b42:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedData,u8_LCD_D6_BIT));
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	82 95       	swap	r24
    2b4a:	86 95       	lsr	r24
    2b4c:	86 95       	lsr	r24
    2b4e:	83 70       	andi	r24, 0x03	; 3
    2b50:	98 2f       	mov	r25, r24
    2b52:	91 70       	andi	r25, 0x01	; 1
    2b54:	88 e0       	ldi	r24, 0x08	; 8
    2b56:	66 e0       	ldi	r22, 0x06	; 6
    2b58:	49 2f       	mov	r20, r25
    2b5a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedData,u8_LCD_D5_BIT)) ;
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	82 95       	swap	r24
    2b62:	86 95       	lsr	r24
    2b64:	87 70       	andi	r24, 0x07	; 7
    2b66:	98 2f       	mov	r25, r24
    2b68:	91 70       	andi	r25, 0x01	; 1
    2b6a:	88 e0       	ldi	r24, 0x08	; 8
    2b6c:	65 e0       	ldi	r22, 0x05	; 5
    2b6e:	49 2f       	mov	r20, r25
    2b70:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedData,u8_LCD_D4_BIT)) ;
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	82 95       	swap	r24
    2b78:	8f 70       	andi	r24, 0x0F	; 15
    2b7a:	98 2f       	mov	r25, r24
    2b7c:	91 70       	andi	r25, 0x01	; 1
    2b7e:	88 e0       	ldi	r24, 0x08	; 8
    2b80:	64 e0       	ldi	r22, 0x04	; 4
    2b82:	49 2f       	mov	r20, r25
    2b84:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    2b88:	88 e0       	ldi	r24, 0x08	; 8
    2b8a:	63 e0       	ldi	r22, 0x03	; 3
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2b92:	6a e0       	ldi	r22, 0x0A	; 10
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state3 ; 
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	80 93 64 00 	sts	0x0064, r24
    2ba4:	5c c0       	rjmp	.+184    	; 0x2c5e <LCD_u8sendData+0x1fc>
				}
				break ; 
				
			case LCD_data_state3:
			
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2ba6:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2baa:	89 83       	std	Y+1, r24	; 0x01
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	8d 31       	cpi	r24, 0x1D	; 29
    2bb0:	09 f0       	breq	.+2      	; 0x2bb4 <LCD_u8sendData+0x152>
    2bb2:	55 c0       	rjmp	.+170    	; 0x2c5e <LCD_u8sendData+0x1fc>
				{
					/*SETTING LOWER SIGNIFICANT BITS */
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    2bb4:	88 e0       	ldi	r24, 0x08	; 8
    2bb6:	63 e0       	ldi	r22, 0x03	; 3
    2bb8:	41 e0       	ldi	r20, 0x01	; 1
    2bba:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedData,u8_LCD_D3_BIT));
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	86 95       	lsr	r24
    2bc2:	86 95       	lsr	r24
    2bc4:	86 95       	lsr	r24
    2bc6:	98 2f       	mov	r25, r24
    2bc8:	91 70       	andi	r25, 0x01	; 1
    2bca:	88 e0       	ldi	r24, 0x08	; 8
    2bcc:	67 e0       	ldi	r22, 0x07	; 7
    2bce:	49 2f       	mov	r20, r25
    2bd0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedData,u8_LCD_D2_BIT));
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	86 95       	lsr	r24
    2bd8:	86 95       	lsr	r24
    2bda:	98 2f       	mov	r25, r24
    2bdc:	91 70       	andi	r25, 0x01	; 1
    2bde:	88 e0       	ldi	r24, 0x08	; 8
    2be0:	66 e0       	ldi	r22, 0x06	; 6
    2be2:	49 2f       	mov	r20, r25
    2be4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedData,u8_LCD_D1_BIT)) ;
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	86 95       	lsr	r24
    2bec:	98 2f       	mov	r25, r24
    2bee:	91 70       	andi	r25, 0x01	; 1
    2bf0:	88 e0       	ldi	r24, 0x08	; 8
    2bf2:	65 e0       	ldi	r22, 0x05	; 5
    2bf4:	49 2f       	mov	r20, r25
    2bf6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedData,u8_LCD_D0_BIT)) ;
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	98 2f       	mov	r25, r24
    2bfe:	91 70       	andi	r25, 0x01	; 1
    2c00:	88 e0       	ldi	r24, 0x08	; 8
    2c02:	64 e0       	ldi	r22, 0x04	; 4
    2c04:	49 2f       	mov	r20, r25
    2c06:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2c0a:	6a e0       	ldi	r22, 0x0A	; 10
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state4 ; 
    2c16:	83 e0       	ldi	r24, 0x03	; 3
    2c18:	80 93 64 00 	sts	0x0064, r24
    2c1c:	20 c0       	rjmp	.+64     	; 0x2c5e <LCD_u8sendData+0x1fc>
				}
				break ; 
			
			case LCD_data_state4:
					
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2c1e:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2c22:	89 83       	std	Y+1, r24	; 0x01
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	8d 31       	cpi	r24, 0x1D	; 29
    2c28:	d1 f4       	brne	.+52     	; 0x2c5e <LCD_u8sendData+0x1fc>
				{
					DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    2c2a:	88 e0       	ldi	r24, 0x08	; 8
    2c2c:	63 e0       	ldi	r22, 0x03	; 3
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					TIMER0_u8InterruptWait(u8_LCD_DEFAULT_WAITING_TIME_MS) ;
    2c34:	6a e0       	ldi	r22, 0x0A	; 10
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 0b 08 	call	0x1016	; 0x1016 <TIMER0_u8InterruptWait>
					LCD_stateData = LCD_data_state5 ; 
    2c40:	84 e0       	ldi	r24, 0x04	; 4
    2c42:	80 93 64 00 	sts	0x0064, r24
    2c46:	0b c0       	rjmp	.+22     	; 0x2c5e <LCD_u8sendData+0x1fc>
				}
				break ; 
			case LCD_data_state5:
				
				u8_timerState = TIMER0_u8GetIntWaitStatus() ;  
    2c48:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMER0_u8GetIntWaitStatus>
    2c4c:	89 83       	std	Y+1, r24	; 0x01
	
				if(u8_timerState==u8_FINISH_INTERRUPT_WAITING)
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	8d 31       	cpi	r24, 0x1D	; 29
    2c52:	29 f4       	brne	.+10     	; 0x2c5e <LCD_u8sendData+0x1fc>
				{
					LCD_stateData = LCD_data_ready_state ;
    2c54:	85 e0       	ldi	r24, 0x05	; 5
    2c56:	80 93 64 00 	sts	0x0064, r24
					u8_returnState = u8_LCD_OK ;
    2c5a:	85 e1       	ldi	r24, 0x15	; 21
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
			default:
				break ;
		}
	}

	return u8_returnState ; 
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <KEYPAD_voidInit>:
KEYPAD_STATE_t StateOfKeyPad ;

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void KEYPAD_voidInit(void) 
{
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
	TIMER2_voidInit() ;
    2c78:	0e 94 88 00 	call	0x110	; 0x110 <TIMER2_voidInit>
	//SETTING ROWS AS OUTPUT PINS
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_ROW1,u8_DIO_OUTPUT_PIN) ; 
    2c7c:	8a e0       	ldi	r24, 0x0A	; 10
    2c7e:	62 e0       	ldi	r22, 0x02	; 2
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_ROW2,u8_DIO_OUTPUT_PIN) ; 
    2c86:	8a e0       	ldi	r24, 0x0A	; 10
    2c88:	63 e0       	ldi	r22, 0x03	; 3
    2c8a:	41 e0       	ldi	r20, 0x01	; 1
    2c8c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_ROW3,u8_DIO_OUTPUT_PIN) ; 
    2c90:	8a e0       	ldi	r24, 0x0A	; 10
    2c92:	64 e0       	ldi	r22, 0x04	; 4
    2c94:	41 e0       	ldi	r20, 0x01	; 1
    2c96:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	//SETTING COL PINS AS INPUT PINS
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_COL1,u8_DIO_INPUT_PIN) ; 
    2c9a:	8a e0       	ldi	r24, 0x0A	; 10
    2c9c:	65 e0       	ldi	r22, 0x05	; 5
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_COL2,u8_DIO_INPUT_PIN) ; 
    2ca4:	8a e0       	ldi	r24, 0x0A	; 10
    2ca6:	66 e0       	ldi	r22, 0x06	; 6
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_COL3,u8_DIO_INPUT_PIN) ;
    2cae:	8a e0       	ldi	r24, 0x0A	; 10
    2cb0:	67 e0       	ldi	r22, 0x07	; 7
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <DIO_u8SetPinDir>
	//ENABLE ALL PULL-UP PINS
	DIO_voidEnablePullUps() ;      
    2cb8:	0e 94 b2 11 	call	0x2364	; 0x2364 <DIO_voidEnablePullUps>
	//SETTING INTIAL HIGH VALUE FOR OUTPUT ROW PINS		
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_ROW1,u8_DIO_PIN_HIGH) ; 
    2cbc:	8a e0       	ldi	r24, 0x0A	; 10
    2cbe:	62 e0       	ldi	r22, 0x02	; 2
    2cc0:	41 e0       	ldi	r20, 0x01	; 1
    2cc2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_ROW2,u8_DIO_PIN_HIGH) ; 
    2cc6:	8a e0       	ldi	r24, 0x0A	; 10
    2cc8:	63 e0       	ldi	r22, 0x03	; 3
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_ROW3,u8_DIO_PIN_HIGH) ;
    2cd0:	8a e0       	ldi	r24, 0x0A	; 10
    2cd2:	64 e0       	ldi	r22, 0x04	; 4
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	//SETTING PULL-UP FOR INPUT PINS
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_COL1,u8_DIO_PIN_HIGH) ; 
    2cda:	8a e0       	ldi	r24, 0x0A	; 10
    2cdc:	65 e0       	ldi	r22, 0x05	; 5
    2cde:	41 e0       	ldi	r20, 0x01	; 1
    2ce0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_COL2,u8_DIO_PIN_HIGH) ; 
    2ce4:	8a e0       	ldi	r24, 0x0A	; 10
    2ce6:	66 e0       	ldi	r22, 0x06	; 6
    2ce8:	41 e0       	ldi	r20, 0x01	; 1
    2cea:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_COL3,u8_DIO_PIN_HIGH) ;
    2cee:	8a e0       	ldi	r24, 0x0A	; 10
    2cf0:	67 e0       	ldi	r22, 0x07	; 7
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	
	StateOfKeyPad.keyState = keyNotPressed ;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	80 93 80 00 	sts	0x0080, r24
	StateOfKeyPad.u8_KeyRow = u8_KEYPAD_ROW_NOT_PRESSED ;
    2cfe:	85 e1       	ldi	r24, 0x15	; 21
    2d00:	80 93 82 00 	sts	0x0082, r24
	StateOfKeyPad.u8_KeyCol = u8_KEYPAD_COL_NOT_PRESSED ;
    2d04:	86 e1       	ldi	r24, 0x16	; 22
    2d06:	80 93 83 00 	sts	0x0083, r24
	StateOfKeyPad.keyLastStableState = stableState ; 
    2d0a:	10 92 81 00 	sts	0x0081, r1
}
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <KEYPAD_u8GetKeyNum>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCTION KEYPAD_u8GetKeyNum RETURN ERROR STATE AND TAKE POINTER TO RETURN PRESSED KEY NUM IN ASCII OR ASCII OF ZERO IF NO KEY PRESSED 
uint8_t KEYPAD_u8GetKeyNum(uint8_t* pu8_ReturnKeyNum)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	27 97       	sbiw	r28, 0x07	; 7
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	9d 83       	std	Y+5, r25	; 0x05
    2d2a:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8_ReturnState = u8_KEYPAD_NOK ;
    2d2c:	83 e3       	ldi	r24, 0x33	; 51
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_timerState ; 
	uint8_t	u8_ButtonState = u8_KEYPAD_NOT_PRESSED; 
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	8b 83       	std	Y+3, r24	; 0x03

	if(pu8_ReturnKeyNum!=NULL_POINTER)
    2d34:	8c 81       	ldd	r24, Y+4	; 0x04
    2d36:	9d 81       	ldd	r25, Y+5	; 0x05
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <KEYPAD_u8GetKeyNum+0x2a>
    2d3c:	60 c0       	rjmp	.+192    	; 0x2dfe <KEYPAD_u8GetKeyNum+0xea>
	{
		
		switch(StateOfKeyPad.keyState)
    2d3e:	80 91 80 00 	lds	r24, 0x0080
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	3f 83       	std	Y+7, r19	; 0x07
    2d48:	2e 83       	std	Y+6, r18	; 0x06
    2d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	91 05       	cpc	r25, r1
    2d52:	91 f1       	breq	.+100    	; 0x2db8 <KEYPAD_u8GetKeyNum+0xa4>
    2d54:	2e 81       	ldd	r18, Y+6	; 0x06
    2d56:	3f 81       	ldd	r19, Y+7	; 0x07
    2d58:	22 30       	cpi	r18, 0x02	; 2
    2d5a:	31 05       	cpc	r19, r1
    2d5c:	a1 f1       	breq	.+104    	; 0x2dc6 <KEYPAD_u8GetKeyNum+0xb2>
    2d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d60:	9f 81       	ldd	r25, Y+7	; 0x07
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	09 f0       	breq	.+2      	; 0x2d68 <KEYPAD_u8GetKeyNum+0x54>
    2d66:	4d c0       	rjmp	.+154    	; 0x2e02 <KEYPAD_u8GetKeyNum+0xee>
		{
			case keyPressed :
					DIO_u8SetPinVal(u8_KEYPAD_PORT,StateOfKeyPad.u8_KeyRow,u8_DIO_PIN_LOW) ; 
    2d68:	90 91 82 00 	lds	r25, 0x0082
    2d6c:	8a e0       	ldi	r24, 0x0A	; 10
    2d6e:	69 2f       	mov	r22, r25
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					DIO_u8GetPinVal(u8_KEYPAD_PORT,StateOfKeyPad.u8_KeyCol,&u8_ButtonState) ;
    2d76:	90 91 83 00 	lds	r25, 0x0083
    2d7a:	9e 01       	movw	r18, r28
    2d7c:	2d 5f       	subi	r18, 0xFD	; 253
    2d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d80:	8a e0       	ldi	r24, 0x0A	; 10
    2d82:	69 2f       	mov	r22, r25
    2d84:	a9 01       	movw	r20, r18
    2d86:	0e 94 2f 10 	call	0x205e	; 0x205e <DIO_u8GetPinVal>
					DIO_u8SetPinVal(u8_KEYPAD_PORT,StateOfKeyPad.u8_KeyRow,u8_DIO_PIN_HIGH) ;
    2d8a:	90 91 82 00 	lds	r25, 0x0082
    2d8e:	8a e0       	ldi	r24, 0x0A	; 10
    2d90:	69 2f       	mov	r22, r25
    2d92:	41 e0       	ldi	r20, 0x01	; 1
    2d94:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
					if(u8_ButtonState!=u8_KEYPAD_PRESSED)
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	88 23       	and	r24, r24
    2d9c:	91 f1       	breq	.+100    	; 0x2e02 <KEYPAD_u8GetKeyNum+0xee>
					{
						StateOfKeyPad.keyState =  keyBouncing ; 
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	80 93 80 00 	sts	0x0080, r24
						StateOfKeyPad.keyLastStableState  = BouncningFromPressedState ; 
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	80 93 81 00 	sts	0x0081, r24
						TIMER2_u8InterruptWait(u8_KEYPAD_DEBOUNCING_TIME) ;
    2daa:	64 e1       	ldi	r22, 0x14	; 20
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 ed 0b 	call	0x17da	; 0x17da <TIMER2_u8InterruptWait>
    2db6:	25 c0       	rjmp	.+74     	; 0x2e02 <KEYPAD_u8GetKeyNum+0xee>

					}

					break ; 
			case keyNotPressed :
					KEYPAD_voidcheckedIfNotPressed(pu8_ReturnKeyNum) ;
    2db8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dba:	9d 81       	ldd	r25, Y+5	; 0x05
    2dbc:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <KEYPAD_voidcheckedIfNotPressed>
					u8_ReturnState = u8_KEYPAD_OK ; 
    2dc0:	82 e3       	ldi	r24, 0x32	; 50
    2dc2:	8a 83       	std	Y+2, r24	; 0x02
    2dc4:	1e c0       	rjmp	.+60     	; 0x2e02 <KEYPAD_u8GetKeyNum+0xee>
					break ; 
			case keyBouncing :

					u8_timerState = TIMER2_u8GetIntWaitStatus();
    2dc6:	0e 94 49 0c 	call	0x1892	; 0x1892 <TIMER2_u8GetIntWaitStatus>
    2dca:	89 83       	std	Y+1, r24	; 0x01
					if(u8_timerState == u8_FINISH_INTERRUPT_WAITING)
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	8d 31       	cpi	r24, 0x1D	; 29
    2dd0:	c1 f4       	brne	.+48     	; 0x2e02 <KEYPAD_u8GetKeyNum+0xee>
					{
						if(StateOfKeyPad.keyLastStableState == BouncningFromNotPressedState)
    2dd2:	80 91 81 00 	lds	r24, 0x0081
    2dd6:	82 30       	cpi	r24, 0x02	; 2
    2dd8:	29 f4       	brne	.+10     	; 0x2de4 <KEYPAD_u8GetKeyNum+0xd0>
						{
							StateOfKeyPad.keyState =  keyPressed ; 
    2dda:	10 92 80 00 	sts	0x0080, r1
							StateOfKeyPad.keyLastStableState  = stableState ; 
    2dde:	10 92 81 00 	sts	0x0081, r1
    2de2:	09 c0       	rjmp	.+18     	; 0x2df6 <KEYPAD_u8GetKeyNum+0xe2>

						}
						else if(StateOfKeyPad.keyLastStableState == BouncningFromPressedState)
    2de4:	80 91 81 00 	lds	r24, 0x0081
    2de8:	81 30       	cpi	r24, 0x01	; 1
    2dea:	29 f4       	brne	.+10     	; 0x2df6 <KEYPAD_u8GetKeyNum+0xe2>
						{
							StateOfKeyPad.keyState =  keyNotPressed ; 
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	80 93 80 00 	sts	0x0080, r24
							StateOfKeyPad.keyLastStableState  = stableState ; 
    2df2:	10 92 81 00 	sts	0x0081, r1
						}
						TIMERS_u8IntModesDis(u8_TIMER2_COMPARE_ON_MATCH) ;
    2df6:	80 e2       	ldi	r24, 0x20	; 32
    2df8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <TIMERS_u8IntModesDis>
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <KEYPAD_u8GetKeyNum+0xee>
		}
	}
	else 
	{
		//IF THE POINTER IS SEND AS NULL_POINTER, RETURN u8_KEYPAD_NOK
		 u8_ReturnState = u8_KEYPAD_NOK ;
    2dfe:	83 e3       	ldi	r24, 0x33	; 51
    2e00:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8_ReturnState ; 
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e04:	27 96       	adiw	r28, 0x07	; 7
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <KEYPAD_voidcheckedIfNotPressed>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

static void KEYPAD_voidcheckedIfNotPressed(uint8_t* pu8_PressedNum)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <KEYPAD_voidcheckedIfNotPressed+0x6>
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <KEYPAD_voidcheckedIfNotPressed+0x8>
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <KEYPAD_voidcheckedIfNotPressed+0xa>
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8_ColCounter = u8_KEYPAD_COL1,u8_RowCounter = u8_KEYPAD_ROW1,u8_TotalCount = u8_KEYPAD_INTIALIZING_VAR ;
    2e28:	85 e0       	ldi	r24, 0x05	; 5
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	8a 83       	std	Y+2, r24	; 0x02
    2e30:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8_ButtonState = u8_KEYPAD_NOT_PRESSED ;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	8c 83       	std	Y+4, r24	; 0x04
	//LOOP TO PASS ON ALL COLUMNS 
	*pu8_PressedNum = u8_KEYPAD_ALL_KEYS_NOT_PRESSED ; 
    2e36:	ed 81       	ldd	r30, Y+5	; 0x05
    2e38:	fe 81       	ldd	r31, Y+6	; 0x06
    2e3a:	84 e1       	ldi	r24, 0x14	; 20
    2e3c:	80 83       	st	Z, r24
	StateOfKeyPad.u8_KeyRow = u8_KEYPAD_ROW_NOT_PRESSED ;
    2e3e:	85 e1       	ldi	r24, 0x15	; 21
    2e40:	80 93 82 00 	sts	0x0082, r24
	StateOfKeyPad.u8_KeyCol = u8_KEYPAD_COL_NOT_PRESSED ;
    2e44:	86 e1       	ldi	r24, 0x16	; 22
    2e46:	80 93 83 00 	sts	0x0083, r24
	for(u8_RowCounter = u8_KEYPAD_ROW1; u8_RowCounter<=u8_KEYPAD_ROW3;u8_RowCounter++)   
    2e4a:	82 e0       	ldi	r24, 0x02	; 2
    2e4c:	8a 83       	std	Y+2, r24	; 0x02
    2e4e:	44 c0       	rjmp	.+136    	; 0x2ed8 <KEYPAD_voidcheckedIfNotPressed+0xc2>
	{
		//SETTING PIN OF ONE COL. TO LOW SO THAT WE CAN CHECK IF ANY KEY PRESSED 
		DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_LOW) ; 
    2e50:	8a e0       	ldi	r24, 0x0A	; 10
    2e52:	6a 81       	ldd	r22, Y+2	; 0x02
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
		//LOOP TO PASS ON ALL ROWS 
		for (u8_ColCounter = u8_KEYPAD_COL1; u8_ColCounter<=u8_KEYPAD_COL3;u8_ColCounter++)
    2e5a:	85 e0       	ldi	r24, 0x05	; 5
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
    2e5e:	2d c0       	rjmp	.+90     	; 0x2eba <KEYPAD_voidcheckedIfNotPressed+0xa4>
		{	
			// CHECK IF THE KEY PRESSED WITHOUT THE BOUNCING EFFECT 
			//TOTAL NUMBER OF BUTTONS WE CHECK SO THAT WHEN THEY ARE ADDED TO INTIAL '0' VALUE, WE CAN RETURN THE BUTTON NUM PRESSED
			u8_TotalCount++ ;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	8f 5f       	subi	r24, 0xFF	; 255
    2e64:	89 83       	std	Y+1, r24	; 0x01
			DIO_u8GetPinVal(u8_KEYPAD_PORT,u8_ColCounter,&u8_ButtonState) ;
    2e66:	9e 01       	movw	r18, r28
    2e68:	2c 5f       	subi	r18, 0xFC	; 252
    2e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6c:	8a e0       	ldi	r24, 0x0A	; 10
    2e6e:	6b 81       	ldd	r22, Y+3	; 0x03
    2e70:	a9 01       	movw	r20, r18
    2e72:	0e 94 2f 10 	call	0x205e	; 0x205e <DIO_u8GetPinVal>
			if(u8_ButtonState==u8_KEYPAD_PRESSED)
    2e76:	8c 81       	ldd	r24, Y+4	; 0x04
    2e78:	88 23       	and	r24, r24
    2e7a:	e1 f4       	brne	.+56     	; 0x2eb4 <KEYPAD_voidcheckedIfNotPressed+0x9e>
			{
				DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_HIGH) ;
    2e7c:	8a e0       	ldi	r24, 0x0A	; 10
    2e7e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e80:	41 e0       	ldi	r20, 0x01	; 1
    2e82:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
				*pu8_PressedNum = u8_TotalCount ;
    2e86:	ed 81       	ldd	r30, Y+5	; 0x05
    2e88:	fe 81       	ldd	r31, Y+6	; 0x06
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	80 83       	st	Z, r24
				StateOfKeyPad.keyLastStableState = BouncningFromNotPressedState ; 
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	80 93 81 00 	sts	0x0081, r24
				StateOfKeyPad.keyState =  keyBouncing ; 
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	80 93 80 00 	sts	0x0080, r24
				StateOfKeyPad.u8_KeyRow = u8_RowCounter ; 
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	80 93 82 00 	sts	0x0082, r24
				StateOfKeyPad.u8_KeyCol = u8_ColCounter ; 
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	80 93 83 00 	sts	0x0083, r24
				TIMER2_u8InterruptWait(u8_KEYPAD_DEBOUNCING_TIME) ;
    2ea6:	64 e1       	ldi	r22, 0x14	; 20
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 ed 0b 	call	0x17da	; 0x17da <TIMER2_u8InterruptWait>
    2eb2:	06 c0       	rjmp	.+12     	; 0x2ec0 <KEYPAD_voidcheckedIfNotPressed+0xaa>
	for(u8_RowCounter = u8_KEYPAD_ROW1; u8_RowCounter<=u8_KEYPAD_ROW3;u8_RowCounter++)   
	{
		//SETTING PIN OF ONE COL. TO LOW SO THAT WE CAN CHECK IF ANY KEY PRESSED 
		DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_LOW) ; 
		//LOOP TO PASS ON ALL ROWS 
		for (u8_ColCounter = u8_KEYPAD_COL1; u8_ColCounter<=u8_KEYPAD_COL3;u8_ColCounter++)
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	8f 5f       	subi	r24, 0xFF	; 255
    2eb8:	8b 83       	std	Y+3, r24	; 0x03
    2eba:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebc:	88 30       	cpi	r24, 0x08	; 8
    2ebe:	80 f2       	brcs	.-96     	; 0x2e60 <KEYPAD_voidcheckedIfNotPressed+0x4a>
				StateOfKeyPad.u8_KeyCol = u8_ColCounter ; 
				TIMER2_u8InterruptWait(u8_KEYPAD_DEBOUNCING_TIME) ;
				break ;
			}
		}
		if(StateOfKeyPad.keyState == keyBouncing )
    2ec0:	80 91 80 00 	lds	r24, 0x0080
    2ec4:	82 30       	cpi	r24, 0x02	; 2
    2ec6:	61 f0       	breq	.+24     	; 0x2ee0 <KEYPAD_voidcheckedIfNotPressed+0xca>
		{
			break ; 
		}
		// MAKE THE COL HIGH AGAIN SO THAT WE CAN CHECK SAME ROWS WITH DIFFERENT COLs. 
		DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_HIGH) ; 
    2ec8:	8a e0       	ldi	r24, 0x0A	; 10
    2eca:	6a 81       	ldd	r22, Y+2	; 0x02
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <DIO_u8SetPinVal>
	uint8_t u8_ButtonState = u8_KEYPAD_NOT_PRESSED ;
	//LOOP TO PASS ON ALL COLUMNS 
	*pu8_PressedNum = u8_KEYPAD_ALL_KEYS_NOT_PRESSED ; 
	StateOfKeyPad.u8_KeyRow = u8_KEYPAD_ROW_NOT_PRESSED ;
	StateOfKeyPad.u8_KeyCol = u8_KEYPAD_COL_NOT_PRESSED ;
	for(u8_RowCounter = u8_KEYPAD_ROW1; u8_RowCounter<=u8_KEYPAD_ROW3;u8_RowCounter++)   
    2ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed4:	8f 5f       	subi	r24, 0xFF	; 255
    2ed6:	8a 83       	std	Y+2, r24	; 0x02
    2ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eda:	85 30       	cpi	r24, 0x05	; 5
    2edc:	08 f4       	brcc	.+2      	; 0x2ee0 <KEYPAD_voidcheckedIfNotPressed+0xca>
    2ede:	b8 cf       	rjmp	.-144    	; 0x2e50 <KEYPAD_voidcheckedIfNotPressed+0x3a>
		}
		// MAKE THE COL HIGH AGAIN SO THAT WE CAN CHECK SAME ROWS WITH DIFFERENT COLs. 
		DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_HIGH) ; 
	}

}
    2ee0:	26 96       	adiw	r28, 0x06	; 6
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <main>:
#include "ECUAL/LCD/lcd_interface.h"
#include "ECUAL/KEYPAD_non_blocking/keypad_interface.h"
#include "ECUAL/LED/led_interface.h"

int main(void)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <main+0x6>
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <main+0x8>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <main+0xa>
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	uint8_t PressedKeyNum = 0,u8_lcdValstate1,state2,state1;
    2f00:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t tempKeyNum = 0 ;
    2f02:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t ValidKeyPadVal = u8_KEYPAD_NOK ;
    2f04:	83 e3       	ldi	r24, 0x33	; 51
    2f06:	89 83       	std	Y+1, r24	; 0x01
	KEYPAD_voidInit() ;
    2f08:	0e 94 38 16 	call	0x2c70	; 0x2c70 <KEYPAD_voidInit>
	SET_BIT(Ru8_SREG , 7); // set global interrupt
    2f0c:	af e5       	ldi	r26, 0x5F	; 95
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ef e5       	ldi	r30, 0x5F	; 95
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	80 68       	ori	r24, 0x80	; 128
    2f18:	8c 93       	st	X, r24
	state1 = LCD_u8Init() ;
    2f1a:	0e 94 42 12 	call	0x2484	; 0x2484 <LCD_u8Init>
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
	Ru8_DDRD =0xFF ;
    2f20:	e1 e3       	ldi	r30, 0x31	; 49
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	8f ef       	ldi	r24, 0xFF	; 255
    2f26:	80 83       	st	Z, r24
	while(1)
	{
		if(state1== u8_LCD_NOK )
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	84 31       	cpi	r24, 0x14	; 20
    2f2c:	21 f4       	brne	.+8      	; 0x2f36 <main+0x44>
		{
			state1 = LCD_u8Init() ;
    2f2e:	0e 94 42 12 	call	0x2484	; 0x2484 <LCD_u8Init>
    2f32:	8b 83       	std	Y+3, r24	; 0x03
    2f34:	f9 cf       	rjmp	.-14     	; 0x2f28 <main+0x36>
		}
		else
		{
			state2 = KEYPAD_u8GetKeyNum((uint8_t*)(&PressedKeyNum)) ;
    2f36:	ce 01       	movw	r24, r28
    2f38:	06 96       	adiw	r24, 0x06	; 6
    2f3a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <KEYPAD_u8GetKeyNum>
    2f3e:	8c 83       	std	Y+4, r24	; 0x04
			if(state2 == u8_KEYPAD_OK)
    2f40:	8c 81       	ldd	r24, Y+4	; 0x04
    2f42:	82 33       	cpi	r24, 0x32	; 50
    2f44:	41 f4       	brne	.+16     	; 0x2f56 <main+0x64>
			{
				if(PressedKeyNum != u8_KEYPAD_ALL_KEYS_NOT_PRESSED)
    2f46:	8e 81       	ldd	r24, Y+6	; 0x06
    2f48:	84 31       	cpi	r24, 0x14	; 20
    2f4a:	29 f0       	breq	.+10     	; 0x2f56 <main+0x64>
				{
					tempKeyNum=PressedKeyNum+'0' ;
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	80 5d       	subi	r24, 0xD0	; 208
    2f50:	8a 83       	std	Y+2, r24	; 0x02
					ValidKeyPadVal = u8_KEYPAD_OK ;
    2f52:	82 e3       	ldi	r24, 0x32	; 50
    2f54:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			if(ValidKeyPadVal == u8_KEYPAD_OK)
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	82 33       	cpi	r24, 0x32	; 50
    2f5a:	31 f7       	brne	.-52     	; 0x2f28 <main+0x36>
			{
				u8_lcdValstate1 = LCD_u8sendData(tempKeyNum) ;
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <LCD_u8sendData>
    2f62:	8d 83       	std	Y+5, r24	; 0x05
				if(u8_lcdValstate1== u8_LCD_OK)
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	85 31       	cpi	r24, 0x15	; 21
    2f68:	f9 f6       	brne	.-66     	; 0x2f28 <main+0x36>
				{
					ValidKeyPadVal = u8_KEYPAD_NOK ;
    2f6a:	83 e3       	ldi	r24, 0x33	; 51
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	dc cf       	rjmp	.-72     	; 0x2f28 <main+0x36>

00002f70 <_exit>:
    2f70:	f8 94       	cli

00002f72 <__stop_program>:
    2f72:	ff cf       	rjmp	.-2      	; 0x2f72 <__stop_program>
